￼
台灣軟體產業的失落十年
Victor Lin
This book is for sale at http://leanpub.com/the-lost-ten-years-of-taiwan-software-industry This version was published on 2013-11-25
This is a Leanpub book. Leanpub empowers authors and publishers with the Lean Publishing process. Lean Publishing is the act of publishing an in-progress ebook using lightweight tools and many iterations to get reader feedback, pivot until you have the right book and build traction once you do.
©2013 Victor Lin
￼
Contents
購買此書.............................................. 1
隨書贈品.............................................. 2
推薦序-警鐘乎?喪鐘乎?................................... 3 成也代工思維、敗也代工思維................................ 3 軟體人「才」不是硬體人「材」 .............................. 3 我不是做零件的,我也沒有水晶球............................. 4 是警鐘、還是喪鐘? ..................................... 4
序-寒冬將至的桃花源...................................... 5
人才篇............................................... 6 人的素質決定一切....................................... 6 輕視溝通成本 ......................................... 6 我要打十個........................................... 7 流動率過高........................................... 8 外行領導內行 ......................................... 9 無法識別人才 ......................................... 9 證照有用嗎? ......................................... 12 人才的繁殖........................................... 12 面試與相親........................................... 12 寧缺勿濫............................................ 13 留住人才............................................ 13 脫節的教育........................................... 14
工程篇 ............................................... 16 技術債.............................................. 16 程式碼風格........................................... 20 版本控制............................................ 21 自動化測試........................................... 26 自動化部署........................................... 31 聰明地工作而非努力工作 .................................. 32 邊移動邊開火 ......................................... 33 資訊安全............................................ 35
CONTENTS 分散式運算........................................... 37
開源篇 ............................................... 39 加法思考與減法思考 ..................................... 39 開放源碼的加法思維 ..................................... 41 兩大授權的陣營........................................ 42 開源商業模式 ......................................... 44 評估並使用開放源碼資源 .................................. 46 使用次世代程式語言 ..................................... 47 使用Python........................................... 49 寫部落格............................................ 50 活動,更多的交流活動.................................... 51 使用Github........................................... 51
經營篇 ............................................... 52 沒有創投............................................ 52 PayPal幫 ............................................ 52 固定成本、高附加價值.................................... 53 軟體即服務........................................... 54 國際化與在地化........................................ 54
體驗篇 ............................................... 56 軟體是服務業 ......................................... 56 專注做好一件事........................................ 56 惡魔都在細節裡........................................ 57 被忽視的視覺設計....................................... 58 聆聽來自使用者的聲音.................................... 59
尾聲................................................. 60
購買此書
此書為作者十年來觀察並體驗國內外產業的心得,以台灣市場的規模,許多人都稱在台灣 寫這類書籍為做公德,事實確實也是如此,寫這本書所花的時間連成本都回不了,所幸在 網路盛行的時代發行一本書已經不再是件難事,購買一本書或許只是對於作者表達的一種 支持,個人還有其它想寫的書籍,不管是從入門技術、工程師的自我學習職涯發展、深度 的最新技術探討等等,如果你喜歡這本書,歡迎前往購買1,也可以透過重覆購買或是超額 付款來表達你的支持,如果有足夠的迴響,或許有機會再看到作者的新作品。
如有任何意見,歡迎來信至
hello@victorlin.me
因時間有限,可能無法一一回覆,敬請見諒。
1http://lost- ten- years.victorlin.me
￼
隨書贈品
Logdown2是一個部落格平台服務,只要申請帳號就可以擁有自己的部落格,與常見的部 落格平台不同的是,其設計讓譔寫技術文章變成一件輕鬆簡單的事情,本書隨書附贈 $10 USD 兌換碼:
lost-ten-year-vitor
實際對換情況由原廠商保留決定
2http://logdown.com
￼
推薦序-警鐘乎?喪鐘乎?
2013 年 11 月 5 日,宏碁召開董事會:第三季大虧 131 億新台幣,董事長王振堂先生宣布請 辭,創辦人施振榮先生回鍋,想要再次挽救宏碁。
這是一個象徵台灣 PC 產業持續衰退的歷史事件。 成也代工思維、敗也代工思維
台灣以電子代工起家,創造了數十年來的經濟榮景,在過程中卻忽略了產業的提升和轉 型。
2000 年網路泡沫化之後,台灣再也不敢涉足網路產業,國家政策此後也持續向代工產業傾 斜,因此過去 13 年的時間,錯失了網路產業發展和典範轉移的每一個機會,網路產業原地 踏步、軟體人才得不到應有的重視、產業人才的思維和培養也逐漸跟全世界脫節。
同樣的一段時間,中國大陸狹其龐大的內需市場,儼然成為全世界第二個自給自足的網際 網路,且觸角已經開始往國際延伸;當台灣在政治和經濟面還在持續無謂的內耗時,中國 大陸網路產業生態的成熟度和熱度、現在已把台灣遠遠拋在後頭;台灣在網路產業的國際 舞台上,成為缺席曠課的學生,在被退學的邊緣苦苦掙扎。
兩相比較,不勝唏噓。
台灣的大企業專注於過去數十年來成功的代工模式,甚至於想要持續以這種模式打造品 牌、拼轉型,因此無論在企業運行和人才培育上,都沒有即時向軟體及網路產業做調整, 直接造成了今天幾大 PC 品牌大廠的困境,大家終於開始檢討:Cost down 或許不是萬靈 丹。
Cost down 的思維,是把員工當成零件來使用,所以有了人「材」之說:零件壞了,換一個 就可以了,馬照跑、舞照跳、生產線繼續運作、老闆們繼續想辦法專心壓低成本就好,哪 裡會有什麼問題?這是早在十九世紀工業時代就發展出來的管理思維,台灣的企業也持續 沿用至今。
偏偏軟體產業的本質不是如此。
軟體人「才」不是硬體人「材」
在硬體公司,人才是費用支出;在軟體公司,人才是無形資產,而且是沒有辦法列在財報 裡面的無形資產。
這讓許多企業主很不舒服,因為軟體人才的產出不僅看不見,還很難用數字去衡量,最後 只好回歸到成本的觀念去做決策,繼續把人當成是費用、是零件。照這種思維,Google 和
推薦序-警鐘乎?喪鐘乎? 4 Facebook 應該要把他們的軟體工程師全部解雇才對,因為這些人的產出無法與成本做直接
有效的連結和量化,卻每年持續花掉公司大筆的人事費用,不裁這些人、要裁哪些人?
我們都知道這是很荒謬的結論,但是到底不對在哪裡?卻又說不出個所以然。
就是因為台灣許多企業無法了解這一個關鍵的不同點,導致了台灣企業始終無法轉型成 功、始終無法真正跨入軟體產業的困境。
筆者在帶領愛卡拉的過程之中,也持續傳達這樣的訊息,將在 Google 學習到的軟體產業最 佳實務持續帶入台灣業界,冀望可以為改善台灣軟體界的環境貢獻一份心力。
我不是做零件的,我也沒有水晶球
在這樣的過程中,愛卡拉當然也持續遭遇到重重的困難、突顯出台灣環境和政策對於網路 業的不友善。比如說,在爭取政府補助的過程中,審查委員提出的問題都是:「你算給我 看,你的 LIVEhouse.in3 這個產品三年後和五年後可以賺到多少錢?這些 KPI 是我們要拿來 交差的。」
結果,諸多業者的應變方式,是把早已經完成、有了數字可以交差的專案,包裝成新案子 之後爭取政府補助,因為案子早就做完開始營運,數字也可以抓得精確,可以讓委員們交 差。
這是業界公開的祕密和最佳實務,卻從來沒有人提出檢討。
錯誤的思維和錯誤的制度互相形成惡性循環,導致問出錯誤的問題,最後形成畸形的業界 生態。網路業難以預測的特性,因此更讓爭取政府補助這件事情變得困難。
這只是網路業者在面對台灣不友善的網路環境時的冰山一角。還有更多政策面和制度面的 困難等著我們一起去改善。
是警鐘、還是喪鐘?
HTC 過去一段時間的低迷、Acer 的轉型失敗,為台灣敲響的是一記警鐘還是喪鐘?端看我 們今後如何對待台灣的軟體人才、如何徹底扭轉自己的思維、改善各種制度、來看待這個 多變、卻又處處充滿機會的網路產業。
要怎麼做?這本書,給了我們一些答案。
我誠心推薦讀者閱讀本書。
本文作者為 Sega Cheng - MMDays4 共同創辦人, 現任愛卡拉5執行長暨遊戲橘子監察人, 曾 任 Google 軟體工程師。
3https://livehouse.in/ 4http://mmdays.com/ 5http://www.ikala.tv/
￼
序-寒冬將至的桃花源
台灣自詡為科技矽島,在近代在硬體發展、晶圓代工方面於世界上有重要的地位,一台的 電腦從硬體慢慢往上到軔體、軟體,最後到網路服務,底層硬體的部份是台灣的強項,然 而越到高階的軟體及服務開發的能力越是差勁,純軟體公司屈指可數,網路服務公司更是 少得可憐,隨著世界網路的數位潮流發展,純粹的硬體產業利潤只會越來越低,產品與 服務和通路的高附加價值終將會主要來自軟體與網路,網路產業的國界不如實體產業的 明顯,如今每個人上網所接觸最多的服務,不管是 Dropbox、Facebook、Google、Youtube、 Line,大多數都來自國外,很多甚至連在台灣的辦公室都沒有,台灣雖也有本土的網路產 業,許多都還停留在五到十年前的樣貌沒有太大的改變,一切看起來歌舞昇平,有對岸的 網友以「桃花源」來形容台灣:
不知有漢,無論魏晉。
雖然聽起來刺耳,卻很貼切,桃花源與世隔絕,更暗示了台灣的落後,光是在軟體開發這 方面落後於先進國家至少有十年之水準,對岸的網路產業早已起飛,並對台灣這塊小而精 美的市場虎視眈眈,曾有台灣的網友以冰與火之歌小說裡面史塔克家族的家訓
寒冬將至 (Winter is coming)
來形容台灣將面臨困境嚴峻的程度,當網路與數位化的浪潮滲入生活的每個角落,食衣住 行都與軟體與網路密不可分時,你能想像一個人民每天使用的服務、通路大部份都沒辦法 自給自足得仰賴進口的國家嗎?並非危言聳聽,現今的數位網路革命就有如以往的工業革 命一般,舊的產業無法改變只有面臨淘汰一途,無法跟上工業改革的國家也都只有被侵略 的份,其改變的速度之快,無法跟上腳步行動遲緩的巨人往往摔了一跤即被時代所遺棄, 不久前宣佈破產的美國柯達公司和芬蘭被收購的諾基亞都是很好的例子,從領導者到倒下 不稍幾年光陰,台灣目前落後的情況,就好比世紀帝國二遊戲裡所有的玩家都已經升級了 到了帝國時代,唯有台灣還停留在黑暗時代,難道你還沒有聽見敵軍入侵的那警鐘作響 嗎?
等登~
台灣軟體產業的問題不只出在技術落後,更是缺少靈魂與思想,走進書店裡教導電腦技術 的書不在少數,應有盡有,然而少見有談論產業問題與思維的書籍,當一個國家的產業落 後了國外十年以上,沒人會停下腳步來告訴你該如何跟上世界的潮流,許多事情對領先者 來說都已經像是呼吸一樣理所當然的事情,桃花源表面上看起來美好,但是當駛進來的不 是迷路漁夫的漁船而是黑船時,寒冬必將到來,在此希望能用淺顯易懂的方式分析產業出 錯的環節,又該如何解決,以及一些對於網路與軟體產業的思維和見解,不只是寫給技術 人員,也希望決策者能從此書瞭解這個產業所面對的問題。
人才篇 人的素質決定一切
軟體開發是一個很特別的過程,集成眾人的智慧進行協作,並非像是工廠生產產品那樣, 輸入原料,經過一定製程生產產品,許多人有一個錯誤的觀點是將其它產業的經驗帶入軟 體的開發,認為軟體只要投入足夠的資金,購買廠房設備,僱用工人,就能夠進行軟體的 生產,然而事實上程式碼皆由人所撰寫,因此軟體開發的品質成功與否完全是基於人的素 質之上,並非有好的設備和足夠的資金就能夠保證成功,這是和其它產業有非常大的差別, 除此之外還有一個很重要的差異是,軟體的生產力和品質通常難以被量化,不像是許多工 業或硬體的產品可以輕易計算出每個月的產量、硬體的良率以及各項數值,軟體開發的產 出比較像是找了人來給他一個題目寫一篇文章,究竟這篇文章生產力高與低,如果只單純 用字數來判斷,那麼只要加很多贅字在文章裡,生產力乍看之下很高,但其實不然,文章 品質的好與壞,在經過許多人的閱讀可以給出一個大略的評價,然而很難有一個公平客觀 的標準,以軟體開發的角度來看也是一樣,程式碼的行數並不能完全代表生產力的高低, 軟體的品質好與壞除了依賴有經驗的工程師閱讀也難有簡單的方式做出評斷。
當軟體生產的品質好壞由人的素質決定,連判斷軟體的品質和生產力都需要有經驗的工程 師達成,這就引出了一個簡單的事實,對於軟體開發的來說最重要資產,不是設備、不是 廠房,而是在於人,忽視人才的軟體公司註定要失敗,不幸的是在台灣許多企業無法理解 這點,以傳統產業的經驗來開發軟體,將人才視為用完即丟的工具而非公司最重要的資產, 是很常見的失敗原因。
輕視溝通成本
對於軟體開發的一個常見錯誤認知即是以為只要增加團隊的人數,生產力就可以隨之增加, 就像是擴增生產線一樣簡單,事實上軟體的本質是思想與方法,團隊裡的工程師要在一起 開發一套軟體需要將不同的想法統一整合在一起,需要付出溝通的成本才有辦法達成,軟 體工程的經典書籍人月神話曾用收割小麥來比擬可以透過增加人力增加生產力的工作,收 割小麥不需要太多的溝通,因此只要增加人力即可加速工作的完成,但對於軟體開發來說, 越多人其實表示需要越多的溝通,當一個團隊有兩個人時溝通的組合就只有一條,當有三 個人就有三條溝通的組合,四個人增加到六條,隨著人數的增加,團隊成員之間的溝通連 線是以指數成長的,這也意謂著人數越多溝通的成本也越重,舉個例子,如果一個團隊裡 十個工程師每個人自行開發的生產力定為十,兩個人一起開發可能生產力只剩十八,三個 人一起開發可能只有二十四,如果十個人一起開發說不定生產力總合只剩五十。
人才篇
7
￼                 團隊溝通造成的生產力損失
輕忽溝通的成本是常見的軟體開發錯誤,很容易就將工廠生產線的經驗套用在軟體開發 上,例如可能找來許多工程師以期待可以加速開發,將寶貴的開發時間浪費在無意義的會 議上,如果不能正視並改善溝通成本問題,生產力很容易就被消耗殆盡,最後團隊都只是 在空轉。
我要打十個
如果讀者有看過電影葉問,印相最深刻的一幕可能莫過於葉問大喊
  我要打十個
而現實生活中,很少有一項工作或專業,一個人的能力可以比上十個人,但軟體開發就有 這樣的特性,最頂尖的工程師一個人的生產力可能可以抵上一般的工程師十到二十五倍, 這聽起來有點不可置信或是難以想像,但是許多軟體開發的書籍都指出了這點,人月神 話、Peopleware,甚至連史提夫 · 賈伯斯也說過類似的話:
在大多數的行業裡,好的工作者和一般的工作者最大的差別是 2 比 1 是吧?就 像是你去紐約找到最好的計程車頂多只能比一般的計程車快 30%,2 比 1 的比例 已經算是很大了。
最好的電腦硬體工作者和平均是 2 比 1,在汽車產業也是 2 比 1,但是在軟體產 業對程式設計師來說,它至少是 25 比 1。
我成功的秘密在於我們花了九牛二虎之力去僱用世界上最棒的人才,當你在一 個好壞差異可以到 25 比 1 的的領域,這難道不划算嗎?
一個偉大員工的薪水6 - Steve Jobs, 1995 年六月 6http://whiteappleer.tw/2012/07/07/the- lost- steve- jobs- tapes/
￼
人才篇 8
所以究竟為何在這個產業裡人力的素質有這麼大的差異?最主要的一個原因是軟體是純粹 思考的結晶,一個有經驗的人和沒經驗的人,能想出來解決問題的方法,不管是方法本身 實行的難易度以及方法的效率,都可以有十萬八千里的差別,我們在此以算數來當做例子, 假設乘法的概念還沒有被發明,但是工程師要想出方法來處理乘法,較笨的方法是以加法 來做,聰明一點的方法是利用九九乘法表,當數字夠大時,就可以明顯看出兩者的差異。
軟體的開發就像是這樣,有無數種方法可以解決同一個問題,然而方法的好壞優缺點各不 相同,有的走較遠的路,有的伸手可及,加上經驗的累積,生產力確實很顯然的有很大的 差別,然而除了這樣的因素,還有一個很重要的原因使得個體之間的生產力有極大的差異, 如果把軟體開發比擬成打造一台車子,有經驗的工程師會到市場上找到一個現成的輪子然 後裝上車體,沒有經驗的工程師可能會自行打造一個輪子,如果沒經驗的工程師不擅長造 輪子,那麼他的車子不僅造得比別人慢,成品也比別人差勁,在這產業裡有一句經典的話
不要重覆打造輪子
這個比喻想告訴我們的概念就是,程式碼其實是可以重覆利用的,有經驗的人懂得利用現 成的程式碼或資源來快速地解決問題並保持良好的品質,而沒經驗的人自己從頭打造,不 但浪費時間,品質也不一定會比較好,除此之外軟體的開發有許多工具可以利用,總合這 些原因,好的工程師想出好的方法,利用現成的資源,善用工具,自然可以有數倍於不精 於此道的工程師之生產力,瞭解之後就不令人意外了。
在台灣常見的缺失就是無法理解人才好壞的差異,在許多人眼中工程師都差不多,在生產 線上可能是這樣,但是軟體開發則不是,許多企業花了大錢僱用為數眾多的工程師,其實 不如找少數幾個優秀的工程師,只要簡單的算數就可以發現,僱用優秀的工程師是最划算 的選擇,我們拿先前提過的例子,假設一般的工程師生產力是十,薪水每個月三萬元,另 外有一個優秀的工程師生產力是一般工程師的五倍,也就是五十,但他要求的薪水是每個 月十萬元,僱用五個一般工程師每個月的花費是十五萬元,但僱用一個優秀工程師的成本 只要每個月十萬元,五人團隊的一般工程師因為溝通的成本,生產力會打折扣,然而優秀 的工程師只有一個人,可以發揮最高的生產力,只要理解這點,就不難發現為何好的軟體 工程師在美國這麼搶手,在那裡很多公司光是找到對的人才,他們願意花大錢支付實習生 不錯的薪水,甚至在他們剛下飛機,就有加長型禮車將他們載到公司去,顯示其對於人才 的禮遇與重視。
流動率過高
無可避免的,一間公司一定會有人離職,公司需要找新的人進來填補這個職缺,不同於傳 統產業,對軟體產業來說這樣的過程的成本是非常昂貴的,一個新人從就職到熟悉工作環 境是需要不少時間的,依人的素質與過往的經驗而定,可能最長可能需要半年,這對公司 來說就好比劃出了一道傷口,需要時間癒合。
正因為大多數台灣的企業無法理解人才對於軟體產業的重要性,把人才當做隨時可替換的 零件與消耗品,在輕視的情況下往往會造成流動率過高,這對於一間企業來說是很大的傷 害,軟體開發並不像是生產線上的操作員,有著固定的流程與標準可以訓練,縱使可以對
人才篇 9 軟體工程師這麼做,但是最終生產力還是由人的素值所決定,流動率過高意謂著經驗很難
累積與傳承,一個人進來還沒做熟立刻又離開了,最後企業只能沒效率地運轉。
流動率過高有很多原因造成,最直接的原因其實就是無法留住人心,可能是工作環境出了 問題,公司文化出了問題,人與人之間的相處出了問題,或是待遇太差,最終還是事在人 為。
外行領導內行
在台灣還有一個常見的錯誤即是外行領導內行,誠如在這一章裡所一再提到的,軟體的開 發都是事在人為,當一個不懂軟體開發的人做為軟體開發的管理階層或負責決策,這往往 是災難的開始,例如決策者讓工程師以寫程式的行數做為生產力的指標,在這樣的情況下, 工程師寫出來的程式可能又臭又長,表面上看起來很有生產力,實質上只是增加維護的成 本與負擔,在無法讀懂程式碼的情況下,決策者可能還沾沾自喜地覺得自己為公司做了很 大的貢獻,許多公司之所有有過高的流動性,就是因為找了一個錯誤的管理者,錯誤的決 策與管理遠比偷懶更可怕,只會使得人才想逃離那樣的環境。
好的決策者與管理者不一定需要是技術或相關專業背景出身的,但一定要懂軟體開發,當 然如果有深厚的技術背景更是如魚得水,管理者要做的並不是去管每個細節,更重要的其 實是去找到對的人,幫忙工程師搬開擋在路上的大石頭,然後放手給他們去做,對的人才 的定義其實包含了他們可以自我管理自己做出正確的決定,許多人被「管理」兩個字所迷 惑,打從心底不信任工程師,將生產線的管理套用在軟體工程師身上,以命令的方式來限 制工程師,如果管理者懂軟體開發,或許情況還好一些,但當管理者不懂軟體開發,這些 命令在工程師眼裡往往是很愚蠢的枷鎖,會使得他們心生不滿,不僅是生產力會降低,同 時也可能造成流動率過高,因此對於軟體工程師來說,最好的管理方式是無為而治,無為 而無所不為,相信他們的能力,把空間留給他們。
所以到底什麼是擋在軟體開發路上的大石頭?像是政治問題此類無關軟體開發成敗的事情 往往就是阻礙軟體開發的障礙,好的管理者會想盡辦法去把這些障礙移開,讓他們遠離工 程師,如此一來團隊才可以專注在軟體開發上,如果一個工程師要同時兼顧公司裡的政治 鬥爭並同時進行開發,生產力低落是可以預期的事情,離職當然也只是遲早的問題。
無法識別人才
無法分辯人才的水準也是大多數台灣企業會犯的錯誤,由不懂軟體的人來面試軟體的人 才,自然很難分辨人才的好壞,軟體並不像是文章寫作,文章寫得好壞大多數人都可以看 出來,程式碼品質的好壞如果沒有專業的經驗都是很難以分辨的,當面試的時候唯一可以 判斷的只有對方的學歷、經歷與背景,以台灣的教育系統來看,學歷的高低與是否為名校 往往與人才的素質無關,而台灣的軟體產業都已經落後國外十年,其實待一間公司長或短, 並無法看出是否真的有那麼久的經歷還是只是同樣或過時的經驗重覆多年,因此在台灣很 常出現外行人面試內行人的奇怪現象,面試人員在沒有專業背景的情況下,最終能夠影響 錄取與否的就只有表面上的學經歷以及嘴上的能力。
人才篇 10
許多公司會有獨立的人力資源部門,有些會委託第三方的人力資源公司,俗稱獵人頭公司 負責人才的尋找與接洽,然而這並不一定就能因此解決問題,許多所謂的人資對於軟體開 發領域瞭解不夠深入,他們所能做的也只有審查表面上的經歷,曾經就有國外的獵人頭公 司鬧了笑話,他們寄了一封信給 Python 程式語言之父 Guido van Rossum7:
Hi Guido,
我在 Google 搜尋發現你的履歷,看起來你在 Python 方面很專業,我會很高興
  如果你能回信讓我知道你是否有興趣且是否可以接受工作。
要知道 Python 程式語言的發明人,這表示全世界沒有人比他更有經驗,身為一個程式語言 社群的開創者與領導者,他曾在 Google 工作,後來被挖角到 Dropbox,絕非這種亂槍打鳥 形式的獵人頭公司能輕易挖走的,這樣的事情突顯出了往往人力資源相關人員缺乏軟體開 發領域相關的背景知識因而很難識別人才的困境。
一家公司要有判別人才的能力,其實最基本的要件就是必需在一開始就有優秀的人才存在 才能識別人才的好壞,優秀的人才一般也瞭解什麼樣的人才稱得上是優秀,或是至少有潛 力,但這是一個難解的雞生蛋與蛋生雞問題,最初的雞或蛋究竟要從何而來?一般沒有專 業經驗的決策者較難識別最初的優秀人才,不過還是有一些可以觀察的特性。
對於程式設計的喜愛
如果一個求職者對於程式設計沒有熱情,對他來說可能這是一件痛苦的事情,自然避之唯 恐不及,但相反的,如果他對這方面有興趣,一般除了上班或在學校所要求的程式,會花 自己的時間在這上面,通常你可以看見他自己的一些作品,縱使可能只是一些類似玩票性 質的專案,都顯示出這個人在工作之餘還願意花時間在程式設計上,應當是有一定熱情才 能做到,熱情對於這產業是很重要的,它影響了員工的生產力和學習的意願。
學習的能力與意願
如果一個員工是學了一次就用一輩子的類型,請不要期待這樣的人能跟上時代,如我們這 本書的主旨,台灣的軟體產業已經落後十年以上,正是因為這個產業的變化很快,一項新 的觀念可能過了兩年就已經過時了,一種新的工具可能過了一年就有更新的替代品,雖然 軟體產業裡也是有可以通用多年的基礎知識,並非指軟體開發一定得盲目的追求最新的事 物,但是通常新的工具多少都有較進步的地方,如果當整個產業都在利用新的工具提升競 爭力時,跟不上的人自然就只有被淘汰的份,一個員工必需得有學習新事物的能力與意願, 才不容易被時代所淘汰,一個時時刻刻更新自己的人,你可以從他口中得知他最新在玩什 麼新玩具,以及他對這些新東西的評論與它所帶來的好處。
7https://plus.google.com/115212051037621986145/posts/R8jEVrobbRj
￼
人才篇 11 對團隊的重視
程式碼人人會寫,但並不是每個人都可以寫出有質量的程式碼,程式碼的質量很多時候來 自於對團隊的重視,自己寫的程式在世界上最瞭解它的人自然是自己,但是將團隊考量進 來的人,會時時刻刻思考這樣的程式碼是不是容易被理解、容易被維護,如果一個員工把
「我寫的程式只有我自己看得懂」這樣的事情當做可以炫耀的事情,就表示在他心中沒有 任何對團隊的重視,這樣的人即使單兵作戰能力再強,對團隊整體而言未必是一件好事。
解決問題的能力
工程師的能力有很大一部份是關於解決問題上,解決問題的方法很多種,很不幸的是不像 是台灣教育所訓練的,軟體開發並沒有所謂的標準答案,只有選擇與取捨,好的工程師可 以告訴你目前有幾種可行方案可以選擇,各種選擇又什麼樣的優點和什麼樣的缺點,解決 問題的方法不一定要來自工程師本身,可以是來自網路上,或是現有的解決方案,找到這 些答案也是體現工程師的能力的一種。
表達的能力
程式設計其實並非只有撰寫程式,即使是一個人開發,面對和客戶的溝通,都需要一定的 表達能力,有許多優秀的程式設計師,在技術方面有很強的能力,但可惜缺少優秀的表達 能力,因此在溝通上較為吃虧,如果一個技術人員能夠清楚的表達與溝通,對於團隊來說 不管是內部溝通或是對外的溝通都很有幫助,客戶關係的發展和團隊的整體生產力都會有 所提升。
寫作能力
好的寫作能力雖然並非軟體開發中的必要條件,但是對於文件的撰寫、說明手冊的撰寫, 或是部落格的撰寫,都需要優秀的寫作能力,除了口頭表達,其實更多的時候是以書寫的 形式程現,現代的軟體、網路服務開發,很多時候需要進行行銷,會需要開發人員撰寫部 落格來吸引讀者或向使用者進行說明,雖然夠大的公司可能會有專職的人員,但是好的寫 作能力其實往往也是來自清楚的邏輯思考能力與表達能力,許多優秀的程式設計師都有自 己的部落格,從文章中其實就可以看出這個人對哪些領域有所涉略,也多少看得出涉略的 深度以及其思維。
英文能力
毋雍置疑的,英文是軟體開發的母語,任何最新的程式設計技術或是相關資料,都是以英 文呈現的,如果要跟上時代的潮流,等待有人翻譯相關的書籍或文件可能往往該技術都已 經過時了,要跟上最新的技術,非得直接閱讀英文資料,除此之外,當使用的第三方提供 的函式庫或系統出問題時,與國外廠商或是社群溝通和詢問時,一樣都是透過英文進行, 總體而言閱讀能力優先於寫作,寫作能力優先於口語能力,除非團隊裡的口語溝通也都用 英語進行。
人才篇 12 證照有用嗎?
許多人對於證照有謎思,以為證照越多越好,或是對於找人才證照可以起一定的參考作用, 其實在這個行業幾乎沒什麼人在看證照,至少歐美大多公司也都是如此,這個產業改變實 在太快了,一份證照可能才剛建立公信力,沒多久新的技術又出來了,或著是證照都是依 照十年前或甚至二十年前的知識在出的考題,出考題的人本身也沒跟上時代,看國內的國 家考試題目就不難理解,證照的考題都是被綁定在某間公司的特定產品上,通過證照考試 其實只證明了通過考試,在這個補習文化盛行的國家,考試往往也只證明了考生對於題目 很熟練,不幸的是,軟體產業的實戰並非像是考試那樣在固定的範圍內,一套軟體或產品 出問題引起的原因很多時候都會超出教課書的考試範圍,一個員工如果只能解決盒子裡的 問題,而不能超出框架來思考的話,當遇到問題時沒有參考答案,很可能就束手無策了, 所以對於證照的簡單結論是對於識別人才來說其實是沒有太大參考價值的。
人才的繁殖
一但一家軟體公司由優秀的人才出發,神奇的事情發生了,優秀的人才比起一般人有較高 的機會找到其它優秀的人才,可以從其他公司無法識別好壞的雞蛋裡挑出最好的,並且因 為他們理解軟體開發不是人數越多越有效這個事實,抱持著寧缺勿濫的心態耐心尋找,這 些人像是會自我繁殖一般,找到更多頂尖的人才進來,最後團隊裡充滿了一流人才,這樣 的事情很常在矽谷這樣的地方發生,可惜的是在台灣大多數公司往往連第一步都無法走 對。
好的人才對於一間公司有正面的影響,當然相對的,有問題的人員對於軟體開發團隊而言, 也有相當負面的影響,當一間軟體公司聘用了不對的人,通常都會使人心背離,台灣因為 地方小,家族企業很常見,這類的事情很常發生,很多可能是親朋好友安插進來的職位, 這對於其它產業可能傷害不大,但對於事在人為的軟體產業有相當負面的影響,好的人才 會自我繁殖,不對的人也有一樣的效果,當一個團隊裡有人無法跟成員好好相處,仗勢著 自己的關係欺人,很快的會造成其它人心生不滿,最終產生劣幣逐良幣的效應,優秀的人 才終將離開,團隊也會因此支離破碎。
面試與相親
如果攤開台灣人的履歷表與美國人的履歷表就會發現很大的差別,台灣人的履歷表像是身 家調查,從你的長相到生辰八字一應俱全,像是要相親似的,歐美的履歷則大多都只有簡 單的自我介紹與學經歷,一來是他們認為最重要的是你做過成就什麼而不是你的身家,二 來他們也比較重視個人隱私,但不管如何,履歷終就只給了第一道篩選的關卡,面試往往 才是看出一家公司對於軟體開發專業程度與否的所在。
除了外行人面試內行人,也很常見到錯誤的面試方式,例如要求面試者當場解決非常刁鑽 的問題,像是艱難演算法問題,或是類似腦筋急轉彎的問題,這類問題都對於識別人才的 素質沒有太大的幫助,面試是相當有壓力的環境,未必所有人都能在那樣的環境下在短時
人才篇 13
間內解決問題,而思考需要時間的,喜愛考試成痴的台灣人很喜歡考倒對方來顯示自己的 水準,可惜軟體的開發並不像是程式設計的競賽或是考試那樣需要短時間解題,很多時候 問題的思考是來自於日常生活中,上班途中、吃飯,甚至是睡夢中,解決的方法也未必都 是來自於自己的想法,很多時候都需要上網找資料研究才有辦法解決,許多國外的軟體公 司也會有技術性質的面試,但其實這些技術性質的面試未必是要檢測出面試者的素質,很 多時候它只是一個簡單的過濾功能而已,每年都有無數的學生從資訊相關科系畢業,然而 在那之中真的有實際開發能力的人只佔一小部份,然而如果每個人都花很多時間面試當然 是不符成本,因此這些公司多半會要求求職者用程式解決一個簡單的問題,光是這樣就能 篩掉大部份來浪費你時間的求職者,而測試的結果其實並不一定重要,重點在於這個過程 中他們會觀察你解決問題的能力,許多人可能過於緊張一時腦子打結,但是從旁觀察你解 決問題的過程,有經驗的人可以告訴你哪些求職者是有解決問題能力,甚至從談吐之間看 出是他們的能力與聰明才智落在哪裡。
有趣的是,說台灣的履歷像是用來相親用的,但是面試卻不像是在相親,一般都是由主管 來決定僱用哪位求職者,當一切生殺大權都落在少數主管手裡,就像是指腹為婚一般,團 隊的成員在未來會與這位求職者共事並相處最久的人,然而他們卻沒有權力或機會來決定 誰與他們共事,你永遠也無法預料明天公司會找來哪個討厭鬼當你的同事,在歐美許多公 司的做法並非如此,他們認為很多時候比聰明才智與經驗更重要的,是團隊的成員是否想 與這樣的人一起共事,縱使求職者有再強的能力,如果他沒辦法和團隊的人相處,也與公 司的文化不合,終將造成傷害,因此許多歐美公司除了主管面試以外,還會找機會讓求職 者和幾位工程師談談,由工程師參與決定他們是否想與這樣的人一起工作,也會有和求職 者一起吃飯進行文化媒合,在聊天的過程中發現是否人格特質吻合公司的文化,而在台灣 主管選了人丟進一個辦公室裡然後把他們稱為一個團隊,運氣好時他們會是一個團隊,運 氣不好時,就成了烏合之眾,招聘的過程其實更像是在相親,台灣的軟體產業在履歷上和 面試方面都用了錯誤的方法。
寧缺勿濫
三國演義裡,曹操為了留住關羽這個人才費盡心力,但因為關羽和曹營的企業文化合不來, 最後即使過五關斬六將也要離開,這就是找到錯誤人才的結果,賠了夫人又折兵,正因為 僱用錯的人的損失慘重,大多歐美國家的軟體公司都懂得寧缺勿濫這樣的道理,一般認為 雇錯一個人所花費的成本是他一年的薪水,但是許多台灣的軟體公司都不瞭解這個道理, 一個職缺就只是一個職缺,他們只是想透過增加人數來提升生產力,遺憾的是如同我們先 前所提到的,這在軟體產業並無法起多大的作用,在一個新進人員進來時原本的團隊還得 花額外的心力帶他進入正軌,反而可能會使原本落後的進度更加落後,許多歐美的軟體公 司面試都得經過五六個關卡,是名符其實的過五關斬六將,台灣的軟體公司必需明白寧缺 勿濫的道理,才能避免浪費成本在沒有太大幫助的多餘人力。
留住人才
找到人才已經非常困難,留住人才更是不容易,基於現實考量,當然薪資待遇會決定你能 找到的人才是在什麼樣的範圍內,有趣的是,有研究指出基於腦力的工作並非待遇越好生
人才篇 14
產力越高,但是如果當一個人才需要為經濟問題煩腦時,他的生產力會受影響這是無庸置 遺的8,因此足夠的待遇只是留住人才的基本條件而已,並非有了足夠的薪水人才就不會離 職,工作環境與公司文化很多時候反而才是重點,當一間公司如果找到對的人,提供一個 較自由的環境,其實在台灣這樣的地方留住一個人不會太困難,因為到處都是慘不忍睹的 環境,至少目前看來是這樣,在歐美國家就不是這麼容易了,在那裡對於獲取人才的競爭 就像是軍備競賽一般,除了優良的環境,還提出令人驚豔的待遇都是只為了把人留住,這 點台灣軟體產業還有一段很長的路要學習。
脫節的教育
台灣的教育對於軟體產業來說也是相當不利的,在這裡填鴨式教育盛行,都是以考試為指 標,然而軟體開發不像考試一樣有標準答案或是閱卷老師的喜好可參考,它是開放式的思 考,解決一個問題有千百種方法,當 Google 搜尋能夠回答所有你需要的標準答案時,死記 硬背似乎也已經失去了意義,自然這樣教育出來的學生在開放式思考的能力較弱。
除了基礎教育,大專院校的專業教育其實也相當落後,不難理解,當一個產業落後國外十 年以上,沒有理由學術界可以跟上國外,當然在此指的都是軟體開發實作的能力,台灣的 大學因為崇尚 SCI 等等論文指標,許多教授都有發表論文的壓力,自然無心於教學與實作 能力的培養,有人會說大學是以理論與學術為主要方向,不過這並非是實作能力低落的藉 口,因為國外頂尖的大學不管在論文或是實作的能力都是一流的,其實以開放源碼專案, 國外大學與國內大學參與的程度就能看出一二,以下列出部份國外知名大學所主導的開放 源碼專案:
• BSD/OS9 - UC Berkeley
• BOINC10 - UC Berkeley
• Mach11 Carnegie Mellon University
• Lua12 - University of Rio de Janeiro in Brazil
• ACE Network library13 Washington University • LLVM14 - University of Illinois
然而台灣在這方面的參與非常少,或許有作者所不知道的專案,但就這些國外的例子看來, 光是一個 LLVM 對整個產業造成的貢獻與影響就難以估計,它是一套用來即時編譯程式碼 用來加速執行的函式庫與工具,現今相信許多手機裡都可以看見 LLVM 的身影,而它最先 就只是一個美國伊利諾大學的研究專案,巴西里約大學主導的 Lua 程式語言也被廣範使用, 像是魔獸世界就用它來做為遊戲使用者介面的語言,這些學校在純理論的學術能力眾人皆
8https://www.youtube.com/watch?v=u6XAPnuFjJc
9http://en.wikipedia.org/wiki/BSD/OS
10http://boinc.berkeley.edu/ 11http://www.cs.cmu.edu/afs/cs/project/mach/public/www/mach.html 12http://www.lua.org/about.html 13http://www.cs.wustl.edu/~schmidt/ACE.html
14http://llvm.org
￼
人才篇 15
知,但他們不是只會紙上談兵,開發出來的專案是可以實實在在地直接影響全世界,在台 灣每年都有大量的論文產生,但是連一個像樣的開源專案都沒有,由此可見台灣的學術、 教育界其實在軟體方面一樣是與世界脫節的,在這種情況下教育出來的學生自然也是與世 界脫節的。
就一個資訊系大學畢業的學生的經歷來看,其接觸程式設計的時間不過是四年,而比例又 佔不了多少,寫的也都是作業為主,如果讀完研究所也只有六年,但就算讀完博士班,在 學術界裡程式設計開發的經驗與業界是不一致的,因為以研究做為目的的開發往往只是為 了產生數據,與實用為目的系統開發有天壤之別,實際的系統需要穩定、隨時間修改與擴 增、解決實際的問題、處理各種細節和例外,這些在教育或學術體系裡都難以學到,因此 在台灣的學術教育體制中要期待能訓練出可用人才其實是緣木求魚。
教育的體制除了上述的問題,還有學生的動機不足的問題,許多相關科系學生就讀的動機 往往是因為父母壓力或是就業壓力,缺乏來自本身的動力,因此在業界很常看到本科系的 學生未必能寫程式,但是非本科系的學生卻能力比較強的情況。
簡單的來說,這樣的教育系統有太多問題需要解決,只求數字上好看的 SCI 論文點數功利 導向未修改前,不必太期待有什麼樣太大的改變,大多數學習軟體開發的資源都在網路上 由民間提供,有興趣的人都可以自己學習,只要軟體產業界能跟上世界的腳步,教育系統 也才有跟上的可能。
工程篇 技術債
大多數人對於債務都多少有個概念,當你買了房子會有房貸,買了車子會有車貸,不管你 多富有,或多或少都生活在債務之中,對於軟體開發來說,事實上也有所謂的技術債,技 術債和現實的債務有點類似,有趣的是,並非所有軟體工程師對於技術債都有正確的概念, 特別在台灣,技術債往往是被忽略的,甚至有很多人都不知道技術債的存在。
我們在此以財務上的現金流量表來解釋技術債,以下圖為例,如果你向銀行借款,約定每 個月給付利息給銀行,在一定期限後還清債務,那麼它的現金流量表看起來如下圖所示
銀行債務現金流量圖
綠色的箭頭代表了收入,紅色代表了支出,在你舉債之後,立刻有了一筆收入,接著你每 個月必需支付給銀行利息,技術債就是類似財務上的債務。
技術債不像是財務上的債務需要特別去舉債,很多是技術債在軟體開發的過程就內建了, 舉個例子,當你開發一個只有單一功能的系統,每次你修改或改進程式時,你都得測試過 這個功能一次,確保它可以正確運作,因此每次的修改,你都付出了額外的時間進行測試, 這便是技術債所產生的利息,它是軟體開發與生俱來你需要付出的成本,如下圖所示
￼
工程篇
17
￼技術債現金流量圖
綠色的箭頭代表生產,紅色的箭頭代表損失的生產或是開發額外的時間花費,隨著你持續 改進這個程式,雖然每次都得付出測試的心力,但是整體而言程式的品質隨著時間提升
事情看起來還在控制之中,然而當越來越多的功能被增加到這系統之中,每次修改程式都 得重新測試過這些功能,確保沒有因為這次修改而弄壞某個功能,隨著功能增加,每次你 修改要付出的利息都越來越多,如下圖所示
工程篇
18
￼                技術債利息隨時間增長現金流量圖
直到有一天,你測試所花費的心力遠大於花在程式的生產上,你的軟體開發進度就會從此 陷入泥沼,你發現你不管怎麼修改,都會產生新的問題,永遠都在原地踏步,簡單的來說 你的支出遠大於收入,當然不可能有進度,在台灣很多人的做法是忽略修改後的測試,其 結果就是可能產品發佈到使用者手上時才發現出了問題。
要解決因為測試的成本花費所引起的技術債,其實只要引入自動化測試,而自動化測試, 簡單的來說其實就是將針對每項功能或元件應該有的正確行為,以預先寫好的程式進行自 動的測試來替代昂貴又重覆的人力花費,當然撰寫自動化測試程式碼需要額外的心力,我 們可以把這視為償債,更詳細的細節我們會在後面的自動化測試章節介紹。
有了自動化測試,技術債的現金流量表看起來會像這樣子
工程篇
19
￼               技術債受自動化測試控制的現金流量圖
一開始花費了額外的時間建立了自動化的測試,隨著功能的增加,也同時增加相對應的自 動化測試案例,這樣一來,隨著系統規模的成長,花費在測試上的心力受到了控制,軟體 的品質也有了一定的保障。
缺少自動化測試只是技術債的一種體現,事實上技術債有很多種不同的來源:
• 不良的程式碼風格 • 不良的設計
• 缺少自動化測試
• 缺少文件
• 程式碼缺少適當的註解 • 未使用版本控制系統
• 骯髒的寫法
在此未必所有的技術債來源都詳盡的被列出,但他們都有一個共同的特點,就是在開發的 過程中你必需為這些因素持續付出額外的心力,我們都可以視為技術債,例如不良的程式 碼風格,每次工程師本身或是團隊裡的其它人要讀懂那段程式片段時,都得花額外的心力 才有辦法讀懂,這類持續性的利息支出正是技術債的最大特徵。
雖然債務聽起來好像不太受歡迎,然而事實上妥善運用債務不管是在軟體開發上或是公司 的經營上其實都很有幫助,投資者在評估一間公司績效時不會因為一間公司完全沒有債務 而認為這是一件好事,反而會被視為沒有效率,適當的舉債對於公司的擴張是有一定的幫
工程篇 20
助,同樣的技術債對於軟體開發來說,並非完全是邪惡的存在,有經驗的工程師懂得在對 的情況下,有計劃的容許技術債的存在,來加速軟體的開發,舉個例子,當你的新創公司 的新產品,是否真的能在市場上存活還是一個未知數時,如果花太多時間在一開始嘗清債 務反而是浪費了寶貴的開發時間,這種情況下其實可以容許技術債,甚至刻意舉一些債來 加速開發,用最快的速度把產品做出來,但仍保有一定的品質,當產品經過市場的考驗之 後再來償債,風險低了很多,因為如果這個產品無法存活,那麼有多少債務其實都沒有任 何意義。
很多時候技術債不必償還,像是產品死亡或是交付專案給業主,有許多軟體外包合約就是 很好的例子,因為外包的團隊很清楚知道,當這個專案交付給業主之後,對於團隊而言就 再也沒機會維護這樣的專案,因此他們在開發這專案時並不會在意欠下多少債務,正因為 不用負責,產生了道德風險,特別是對於軟體品質不要求、花費也無關痛癢的政府單位容 易出現這樣的情況,很常見到政府單位的網站被入侵,也就是因為軟體品質低劣造成的, 如果原有的系統需要增加功能或是修正問題,當遇到原有的合作廠商倒閉或是由另一家廠 商得標時,接手的團隊就得面對這樣債務堆積如山的專案,通常有兩種選擇,一種是打掉 重建,另一種是在原有的系統上再疊上更多的債務,只要能夠成功交付專案,負責的不是 開發團隊,就很少會有人在乎。
對於技術債的無知或無視在台灣是很常見的錯誤,因為大多數人對於軟體開發的認知不 足,在上面的論述中,其實不難發現,軟體開發有一個特性,開發最初的成本可能只佔兩 成,而維護的成本會佔八成,並且隨著系統存活的時間越久而越來越多,如果當技術債台 高築時,維護的成本更是雪上加霜,因此軟體開發不該被技術債所控制,而是該主動去瞭 解並控制技術債。
程式碼風格
程式碼的風格和易讀性往往也是台灣的軟體產業所忽視的,乍看之下好像只是程式碼容不 容易被讀懂,但實際上對於軟體的開發影響很大,因為一個事實是
程式碼讀比寫多次
因為當你撰寫程式碼,你就寫這麼一次,但是你每次接著修改,都會不斷的去讀先前所寫 的程式碼,因為沒有人可以記住所有程式碼,更別說那段程式如果不是你寫的,對於團隊 來說,當團隊的成員越多,一段程式碼需要被閱讀的次數就越多,假如因為一個成員故意 或非故意寫出很難讓人理解的程式碼時,在一個五個人的團隊每個都讀一次這段程式都額 外浪費十分鐘的話,那麼整個團隊就白白浪費了五十分鐘在這段難懂的程式上,隨著時間 推進,這樣的浪費在技術債被還清以前都不會消失,日積月累也是相當可觀的成本浪費。
解決的方法其實不難,現在有許多工具可以自動幫你檢查程式碼是否符合特定風格,如果 有成員寫出不合格的程式時,那些程式碼應該被團隊拒絕,不過比起程式碼風格的自動檢 查,更重要的是團隊成員對於程式風格重要性的認知和實行,有許多項目是自動檢測無法 檢查的,例如變數的命名是否有意義,工具就只能檢查規則,無法得知該變數名稱是否能
工程篇 21 正確表達它在片段裡的用途,因此除了自動檢測,許多團隊還會增加一個複閱的流程,每
有新的程式碼被寫出來,要被接受前都得經過其它成員的檢閱。
值得注意的是,程式碼的風格最好從專案的一開始就開始維持,因為沒有多少人願意去清 理前人所留下來的技術債務,如果已經欠了一屁股債,後面接手的人往往會選擇忽視債務, 如果真的不得已,也只能先停下腳步來把債務償清再繼續往下走。
版本控制
台灣軟體業界落後國外十年以上是有跡可尋的,有時在聊天時提到「你們公司用的版本控 制系統是什麼」,有很多人都會回答「那是什麼?」,其實版本控制在國外已經有約二十年 以上的歷史,到近代早都已經是開發軟體的標準工具,一個產業的落後可見一般,許多公 司至今用的仍是土法鍊鋼的方式在管理程式碼,最常見的就是直接修改專案裡的程式碼。
￼這種做法帶來許多嚴重問題
• 無法得知究竟改了什麼
• 無法得知是誰改的
• 沒有修改的歷史
• 一但改壞將難以輕易復原
有些人為了保留以前的版本,會定期複製專案的資料夾
直接修改程式碼
工程篇
22
￼                 使用複製資料夾管理程式專案
雖然這樣一來雖然保留了一些舊的版本,但是依然很難得知到底改了什麼、是誰修改的, 當程式改壞掉了,就得和上一個備份進行比對,人工要從數百個檔案之中找出差異來是一 件困難又痛苦的事情,而且上一次備份如果是很久以前的版本,在這期間可能已經歷經了 相當大的改動,專案就介於改壞掉的版本和老舊的版本這兩種尷尬的情況裡,為了保有夠 多的備份,每修改一點程式碼就得複製一份,除了佔空間以外,這些重覆的動作都是在浪 費寶貴的開發時間,依賴人力做這樣的事情除了很容易出錯,隨著複製的版本越來越多, 負擔也會越來越重,
如果工程師一人獨立開發,情況還很好解決,但當是多人協作共同進行開發,土法鍊鋼的 做法依然還是很常見,許多人會使用 FTP 來管理程式碼
使用 FTP 管理程式專案 但是這並沒有太大的改善,除此之外多人協作還引入了更多問題,假設 FTP 上有個檔案
hello.py
￼
工程篇 23 今天張三載回去改了,變成
hello.py (張三版)
不幸的是,王五在張三上傳回 FTP 之前,也下載回來改,變成
hello.py (王五版) 接著,張三把它的檔案上傳了,所以 FTP 上的檔案變成了
hello.py (張三版)
接著有趣的事情發生了,王五也把他改的東西上傳了,所以 FTP 上的檔案被蓋掉,變成
hello.py (王五版)
發生了什麼事? 張三改的版本被蓋掉了!這造成辛苦修改的程式碼遺失的問題,也會造成 團隊裡的糾紛,王五與張三都不認為是自己的錯,事實上他們是對的,這是團隊的錯,使 用過時且錯誤的方式進行程式碼的管理。
所以版本控制系統到底是什麼?如果讀者有玩過角色扮演遊戲,像是仙劍奇俠傳、軒轅劍 等等,一定知道遊戲打到一半可以存檔,然後也可以讀檔,接續先前的遊戲進度,如果發 現目前的等級太差了,打不贏魔王,可以讀前面一點的檔案來重新練,或是前面的寶物忘 記拿,也可以讀檔回去拿
工程篇
24
￼遊戲存檔與讀檔
而版本控制系統做的事情,就和 RPG 裡的遊戲存檔是一樣的概念,你可以將目前程式開發 的進度的快照存下來,當你發現改的檔案有問題,可以回朔到以前的版本,除此之外,它 還可以幫助你找出兩個版本的差異,你再也不怕不小心改了哪一行結果都不知道,也不怕 你的同事幫你偷改了幾行結果你卻不知道,兩個版本的差異也可以輕易的比對
版本的更動
以上圖為例,減號開頭並且標為紅色的行數,為此次修改刪除的行,加號開頭標為綠色則 為此次修改增加的行,如此一來對程式碼的更動一清二楚,甚至還可以合併兩個不同的分 支,版本控制系統在幾十年前就已經有現成的工具,然而一直一路演進到今天,現在的版
￼
工程篇 25
本控制系統已經相當先進且成熟,週邊的工具或是平臺也都相當齊全,更重要的是最流行 的幾種版本控制系統都是免費的,以下介紹幾種最常見的免費開源版本控制系統以及相關 的資源
Concurrent Versions System
CVS 是古董級的版本控制系統,主要被使用於開放源碼專案的開發,特色是可以多人共同 使用,缺點是如果多人要存取同個檔案,要先將檔案鎖起來,很多時候會鎖了忘了開,造 成別人無法使用,即使已經是二十年以前的工具,但是目前還有一些大型的開源專案還在 使用這套系統,因為和現代的版本控制系統脫節太久,一般都不建議使用。
Subversion
Subversion 簡稱 svn,約十年前出現,是 CVS 的繼承者,主要是改進 CVS 的缺點,最重要 的改進就是檔案鎖定的問題,SVN 以試著自動合併檔案的方式來解決同時有兩人修改同一 個檔案的問題,現今很多軟體開發專案也還在使用 SVN,但是多人協作開發時因為都得透 過一台中央的檔案庫來處理,造成開發必需依賴中央檔案庫的管理員才能進行,如果中央 檔案庫的管理員不巧沒時間,便造成其它人沒辦法先行修改的迥境。
Git
正因為 SVN 與 CVS 有多人無法獨立進行開發的問題,分散式版本控制系統成為了新興的 主流,在這些新的系統中,檔案庫不在是集中式的,而是分散式的,原本提交 (commit) 都 要集中送到中央檔案庫,分散式的設計讓程式碼可以被提交到本地的檔案庫,在當需要時, 比對不同檔案庫提交的差異,可以互通有無,如此一來讓開發更加容易,它們引入的新特 性也讓合併兩個分支之類的事變得更加容易,Git 就是基於新的分散式版本控制概念所設 計的系統,目前被用於管理 Linux 核心程式碼,Linux 作業系統的程式碼龐大且開發流程 複雜,參與人數也眾多,因此可以證明是一套成功的版本控制系統,它的特色是許多設計 都以效率為考量。
Git 除了這套系統本身很流行以外,還有一個叫做Github15的平台網站很受歡迎,在以往 要架設一個版本控制的程式碼檔案庫要花時間並且找一台主機自行架設,費時又費力, Github 提供免費的 Git 檔案庫服務給開放源碼的專案,除了檔案庫以外,它還有臭蟲追蹤 等等專案管理的功能整合,因為簡單好用又功能強大,有許多開源專案的程式碼檔案庫都 放這個平台上面,如果想開發不公開的程式碼,可以付費購買私有的檔案庫,在開放源碼 的章節我們會有更深入一些的介紹。
Mercurial
Mercurial 同樣和 Git 為分散式的版本控制系統,它又稱 Hg,因為 Mercurial 是水銀的意思, 也就是汞,而汞的化學符號正是 Hg,它在設計理念上與 Git 有些不同,它對於檔案庫的操
15http://github.com
￼
工程篇 26
作較為保守,為的是怕使用者做出錯誤的操作而將檔案庫弄壞,但它支援擴充的功能,Git 能做到的事情它也能做到,有些需要擴充模組達成,Git 和 Mercurial 開發的過程中互相參 考並吸收了對方的優點,相對於 Github,它最知名的檔案庫平台是Bitbucket16,它除了可以 開設 Hg 的檔案庫,同時也支援 Git,除此之外,它還支援免費的私有檔案庫,因此當有經 濟上的考量,可以考慮使用 Bitbucket 來存放私有的專案程式碼。
考量到開放源碼專案使用檔案庫平台的流行程度,事實上 Github 遠大於 Bitbucket,並且 平台的功能完整性和改善速度也是 Github 較有優勢,Git 的學習曲線較 Mercurial 來得陡, 但是當剋服學習的困難之後,以作者的經驗 Git 是比 Mercurial 來得好用與強大,因此如果 公司打算導入版本控制系統,如果想跟上世界潮流的話,Git 與 Github 是比較推薦的選擇, 因為篇幅有限,在此不打算太深入介紹,但網路上有許多資源可以參考,想學習 Git,推薦 閱讀Pro Git17這本線上書籍,如果英文的閱讀上有困難,網路上應該可以找到中文的翻譯 版本,如果想學 Mercurial,可以參考Hg Init: a Mercurial tutorial18這份線上教學,如果嫌打 指令麻煩,可以考慮使用免費的視窗介面工具SourceTree19,它同時支援 Git 和 Hg,並且同 時有 Windows 與 Mac 的版本。
自動化測試
程式開發的過程可以拆成兩種階段,一種是撰寫,一種是測試,程式設計師在撰寫完一小 段程式後,就進行測試,確保寫出來的程式是可以正確運行的,如此反覆進行
撰寫 測試 撰寫 測試 撰寫 測試 ...
然而現實中並非這麼簡單,因為程式碼之間不同的模組可能會有依賴的關係存在,例如 A 模組依賴 B 模組,在這樣的情況下,修改 B 模組可能造成原先可以正常運行的 A 模組出 錯,為了確保整體系統能正常運行,撰寫的過程會像是
16http://bitbucket.com 17http://git- scm.com/book 18http://hginit.com 19http://www.sourcetreeapp.com
￼
工程篇 27
撰寫
測試 A
測試 B
測試 C 撰寫
測試 A
測試 B
測試 C 撰寫
測試 A
測試 B
測試 C ...
模組 模組 模組
模組 模組 模組
模組 模組 模組
當系統裡有越多模組或子系統,每次修改後要測試的項目就越多,這就是我們在技術債章 節裡提到的利息會隨著系統規模成長的問題,而自動化測試的目的就是在於消除程式修改 之後對於系統整體運作正確與否的不確定性,將昂貴的人力從重覆的工作中抽離,如果拿 更具體現實中的實例來說明,以手機製造生產來說,一台手機出廠需要確定它是良品,手 機剛生產出來可能是由品質控管人員進行測試
確定螢幕顯示正常 確定觸控功能正常 確定音效播放正常 確定 USB 接口正常 ...
用人力進行每一隻手機都得經過同樣的確認流程,這些都是昂貴的人力花費,如果採用自 動化測試,可能就是一系列儀器或機械手臂,全自動進行這些品質確保的程序,軟體開發 的自動化測試基本上就是同樣的概念,下列展示一個專案運行自動化測式的結果。
工程篇
28
￼自動化測試運行的結果
不幸的是,為了節省成本自動化測試是這樣的做法在台灣軟體業界並不常見,大多數的軟 體開發卻都是以昂貴的人力進行測試,或是乾脆省去測試,其結果就是很容易犯新手等級 的錯誤,舉一個實際發生在一間國外軟體公司的實例,一個工程師在修改程式時為了測試 方便,在驗證使用者帳號密碼的函數改成無條件通過認證,也就是說就算帳號密碼是錯的, 依然可以通過驗證,工程師在完成測試後忘記這樣一個測試用的更動,就將程式碼送到伺 服器上,造成資訊安全的漏洞,讀者可能會質疑這位工程師的水準,但他在離開這間公司 後到 Google 去工作了,為何這麼頂尖的工程師一樣會犯如此初級的錯誤?一個很簡單的因
工程篇 29
素就是軟體公司的開發團隊並沒有設置自動化測試,因此任何程式碼都可以被推送到產品 伺服器上,如果有做測試的話,在這個步驟就會被偵測出來,是人都會犯錯,總體來看這 樣的錯誤是團隊的錯誤而非該工程師一人的錯誤。
自動化測試有分很多種,最底層的測試是單元測試,針對單一個模組、元件或類別進行測 試,接著還有功能性測試,可能是幾項元件或子系統進行測試,更廣範的有整合測試,將 不同的系統整合在一起測試,除此之外也有軟體開發團隊會建置階段性測試,也就是系統 交付或部署之前,先放到一個獨立的虛擬環境進行各種測試,像是壓力測試,確定沒問題 之後才可以真正交到使用者手上,越單純的測試越容易,像是單元測試因為測試的對象只 有一個單位,因此很容易,當越多不同的系統整合在一起測試,越難以做出一個純淨的測 試環境,但是相對的在越真實的環境下測試,越能找出平時不容易找出的問題。
自動化測試雖然可以讓開發團隊對於軟體品質有信心,然而每次改寫都要手動運行測試其 實是一件費時的事情,所幸現在一樣有工具可以幫我們做這些例行公事,我們把這樣的流 程稱為「持續整合測試」,每次當有新的程式碼被送到版本控制的檔案庫,持續整合測試 服務便會自動進行測試與建置,因為有些專案規模龐大,自動測試或專案建置一次可能會 花上數小時,所以有些團隊會將持續整合測試以每日定時的方式進行,有了持續整合測試 的服務,開發團隊就能專心在開發程式與撰寫測試上,持續確保系統可以正確運行,目前 流行的一款持續整合測試工具叫做Jenkins CI20,它是免費的開放源碼軟體,它有簡單好用 的網頁介面,讓持續整合測試可以輕鬆進行
￼Jenkins 運行畫面截圖
￼20http://jenkins- ci.org
工程篇 30
如果讀者不喜歡自行架設伺服器來運行這樣的服務,網路上也有現成的服務平台可以使 用,最廣為人知的就是Travis CI21,它提供開放源碼的專案進行免費的持續整合測試,可以 輕鬆和 Github 整合,只要設置一個簡單的設定檔,裡面描述要如何進行測試,剩的它會自 動幫它做好,每當有新的程式碼寫入,它也會自動進行測試,如果想要進行商業軟體的自 動化測試,他們也有提供付費的方案22讓你測試私有的程式碼。
Travis-CI 運行畫面截圖 除了持續整合測試,還有一個重要的測試時機,就是將程式碼部署到產品伺服器以前,限
制只有通過測試的版本能夠被部署,如此一來可以大大降低犯低級錯誤的機會。
自動化測試雖然很有用,但並非有自動化測試就百分之一百保證了程式的品質,它只是提 供了團隊對於程式碼品質的信心,請勿產生程式沒有臭蟲的幻覺,在自動化測試中,有一 個重要的指標叫做「覆蓋率」,在執行自動化測試的期間它會計算測試時執行過的程式碼 和整體的程式碼行數百分比,如此一來如果有條件判斷式在測試過程中沒有被執行,我們 就可以知道這樣的程式片段沒有被測試到,理想上的覆蓋率是達成 100% 最好,然而盲目 追求高覆蓋率並沒有太大的意義,因為開發時間有限,如果有餘力時可以追求,但是大部 份時間應該以系統的核心、重要的商業邏輯、資料模型為優先撰寫自動測試案例的對象, 因為這些部份出錯時基本上整個系統可能都會出錯,此時枝微末節再怎樣正確都是枉然, 除此之外優先的測試項目是安全性相關的部份,如同我們在先前提到的例子,因為沒有測 試錯誤的帳號密碼不該可以登入,而導致產生資安事件,為了確保系統安全機制可以正確 運行,也應該優先撰寫針對權限存取、身份認證、常見攻擊手法防禦等等的測試案例,讓
21http://travis- ci.org 22http://travis- ci.com
￼￼
工程篇 31 犯低級錯誤的機會大大降低。
在軟體開發的過程中難免會發現臭蟲,為了確保同樣的臭蟲不會再次出現,也可以針對該 臭蟲撰寫測試案例,如此一來隨著測試案例越來越多,軟體出錯的機會越來越低,對於品 質的信心也會越來越高。
自動化部署
軟體有很多種形式,在早期軟體大多是以套裝的形式銷售,到了近代雲端的概念盛行,許 多軟體都是以軟體即服務(Software as Service)的形式提供,在伺服器端的軟體開發也越 來越常見,網頁應用程式的開發就是最常見的例子,這類的軟體都需要部署到伺服器上, 也就是將程式碼送到伺服器上進行更新,或是在新的一台主機上安裝運行環境以及程式, 對於這個過程我們都可以稱之為部署,在台灣最常見的部署形式就是手工進行,當伺服器 數量只有少數幾台,手動進行一台一台安裝與更新,並不會產生太大的問題,只是單純很 浪費時間,但當伺服器的負載量成長,主機的數量也增加時,部署所需要的時間更長了, 同時也更容易出錯,每次更新都得在每台機器進行一樣的動作,這也可以視為是技術債的 一種。
部署聽起來沒什麼,好像不過就只是把程式碼上傳到伺服器,然而不良的部署其實也會引 起嚴重的問題,例如部份機器忘記更新,新程式與舊程式同時運行,可能就會發生意想不 到的問題,美國就曾有一家公司因為部署出了差錯,導致股票交易系統出錯,短短時間內 損失 4.4 億美元23,由此可見部署其實是軟體開發中很重要的一個環節。
現代的軟體部署,也早以朝自動化的方向邁進,已有成熟的技術行之有年,部署一定會遇 到的一個問題就是程式碼版本的管理,如果軟體開發團隊沒有引入版本控制系統的話,光 是控管版本就是一個令人頭痛的問題,如果你有十台伺服器,你要知道哪一台運行的是哪 個版本?最原始的方式就是直接用 FTP 把程式碼上傳到伺服器上,如果有十台那就得上傳 十次,如果有一百台那就是一百次,到最後管理人員自己可能都會搞不清楚哪一台已經更 新哪一台還沒有,除此之外,軟體開發不是總是一路順遂,許多時候在程式部署完成後才 發現新修改的程式造成了系統出錯,此時如果團隊沒有版本控制,那更是一場惡夢,所有 人員得因此加班趕修,或是從以往雜亂的備份裡去找出可運行的舊程式來上傳到伺服器 上,但是如果有版本控制,就不會有這樣的問題,因為所有程式更動都有記錄,進行部署 只要在所有伺服器上執行取出最新程式碼的指令即可,如果遇到出錯的情況,也可以輕鬆 的取出上一個可運行的版本,找出這次修改出問題的地方,修正後再更新到最新的版本, 這些省下來的都是昂貴的人力成本以及不必要的意外狀況與加班,因此版本控制系統一般 都會和伺服器部署整合在一起,這已經是國外業界的標準作法。
有了版本控制管理程式碼解決了程式部署的版本控管問題,但是還有許多待解的問題,新 的伺服器安裝也是一個頭痛的問題,每次要增加主機都得進行同樣的安裝步驟,除了浪費 人力又容易出錯,許多時候網站服務突然遇到大量的流量湧入,更會有壓力在短時間內新 增數台主機,為了解決產品運行環境安裝的問題,國外的社群已發展出了成熟的解決方案 可以用於輕鬆進行伺服器的部署,最廣為人知的有Puppet24,它是一套以 Ruby 撰寫的開放
23http://www.bloomberg.com/news/2012- 08- 02/knight- has- all- hands- on- deck- after- 440- million- bug.html 24http://puppetlabs.com
￼
工程篇 32
源碼部署工具,運用這套工具,開發者可以描述一個伺服器需要安裝哪些套件,產生哪些 設定檔,進行哪些動作,雖然使用任何一個腳本語言都可以做到同樣的事情,但是它大大 地減輕了各種使用上的負擔,最近有一套 Puppet 的後繼者,叫做Chef25,它所做的事情和 Puppet 大致一樣,只是它吸收了 Puppet 的經驗,是更加成熟的解決方案。
在開發與部署的過程中令人討厭的是,要建立一個測試用的環境並不是一件容易的事情, 雖然現在有成熟的虛擬機器可以使用,但是建構一個虛擬機器的環境還是需要不少時間, 所幸不久前也出現了一個成熟的開源解決方案,它叫做Vagrant26,它提供了虛擬機器建置 的指令,將建構虛擬機器環境變成可以輕鬆下指令和改設定檔的方式進行,除此之外它也 提供了載入影像檔的方式讓工程師不必自己從頭建立常見的開發環境,有了 Vagrant,針 對軟體的部署與測試,就可以用它來進行,例如你的伺服器艦隊是由多種角色分工組成, 欲測試伺服器整體服務運作是否如預期,就可以利用 Vagrant 建置不同的虛擬機器透過本 機的網路進行連線,原本要花數小時的工作,只要寫好設定檔後,下一行指令就可以自動 完成,大大地節省了寶貴的開發時間,除此之外,像是 Chef 這類部署的腳本程式,也可以 利用 Vagrant 來測試是否如預期一般正確運行。
有了上述提到的工具,自動化部署的大部份需求都可以被滿足了,剩下的問題只有要如 何在多台伺服器上執行同樣的、或是依環境決定的指令,答案就是使用Fabric27,它是一款 Python 寫的工具,可以讓你同時對多台伺服器下指令,配合前述的工具,這樣一來就解決 了自動化部署的問題。
聰明地工作而非努力工作
在台灣努力工作似乎是理所當然的事情,許多事情都可以透過努力工作來增進生產力,很 可惜對軟體開發來說,努力工作未必是一件好事,並非指工程師應該整天偷懶,而是當你 發現一個團隊一直都很努力在工作,甚至不停加班時,或許你應該停下腳步來仔細觀察一 下你們工作的方式,很多時候你會發現大多數的工作都是重覆的,如果再仔細想想,其實 這些工作都可以被自動化的程式取代,一個優秀的開發團隊不會靠努力工作來提高生產 力,他們會靠聰明的工作來達成,我們在這個章節裡提到的許多方法,都是產業發展這些 年來,利用工具來解決容易出錯的重覆人力工作進而提升生產力的做法,軟體不只是可以 解決客戶的問題,當然也可以解決開發團隊自身的問題,如果發現團隊裡有重覆的人力工 作,就應該考慮使用自動化的方式來解決這些不必要的負擔,第一個考慮的是找現成的方 案,因為別人也應該會遇到類似的問題,如果真的找不到現成的方案可以解決,那就考慮 自己開發一套,當然這就牽涉到投資與報酬的問題,在評估過後如果開發這樣的系統能提 升整體的生產力,又不會花太多成本,其實是很值得實行,聰明地工作除了生產力較高, 對於員工來說也是較友善的對待,努力工作短期內看起來生產力提生了,但長期看來這些 人都會受不了長期加班而離去,是時候好好檢視並改善工作流程了。
25http://www.opscode.com/chef/ 26http://www.vagrantup.com 27http://fabfile.org
￼
工程篇 33 邊移動邊開火
許多人將軟體開發以硬體開發的觀念來看待,這兩者有一個很大的差別是硬體的開發週期 較長,要更新功能只有透過軔體才有辦法,成本也相對的較高,如果用差別更大的例子來 看,蓋一棟房子的開發週期更長,更新的成本更高,當房子蓋到一半才進行設計修改或是 新增項目,需要花的成本會很高,硬體也是一樣,一但製造出來交付到客戶手上能夠修 改或更新的餘地就相對的有限,特別是交付後才發現問題,最慘的狀況可能是產品招回, Intel 公司就曾經在一款 Pentium 的 CPU 上被發現一個浮點數處理會出錯的設計缺陷28,為 此他們對該產品進行全面招回,造成了公司 $4.75 億美元的損失,純軟體或是網路服務就幸 運多了,它們的開發週期相對較短,部署產品到客戶手上的時間較短,成本也較少,遇到 這類的問題一般只要更新程式就能解決,正因為這樣的特性使得軟體開發可以較為敏捷。
因為延用硬體開發的經驗,將軟體的開發週期拉長,其實並沒有太大的好處,並且帶來了 相當的風險,最大的問題在於軟體或服務的開發,究竟能不能受到使用者的喜愛,能否符 合使用者的需求,在開發的過程中這部份往往都只是猜測與幻想,在軟體產業的歷史中, 不乏砸重金研發的產品或服務最終乏人問津的慘例
                在單一開發週期進行龐大的開發
為了能盡快取得使用者的意見回饋、得知市場的反應降低風險,軟體的開發最好避免過長 的開發週期,一口氣花很久時間研發再推出的情況,軟體開發最好要能邊移動邊開火,先 從滿足這項產品最核心的使用者需求著手,把一次開發的項目數量控制在合理的範圍內, 推出之後視使用者的反應,收集使用者的需求,再進行下一個開發週期,週而復始,如此 一來,使用者的需求能夠貼切的被滿足,對大部份開發團隊而言,要有征服世界的雄心壯 志是很容易的事情,但是能想清楚優先順序,在有限的開發週期內逐步達成目標卻不是每 個開發團隊都能做好的事情。
28http://en.wikipedia.org/wiki/Pentium_FDIV_bug
￼￼
工程篇
34
￼                 循序漸進的第一次開發週期
                 循序漸進的第二次開發週期
                 循序漸進的第三次開發週期
其實如果讀者有讀過軟體工程的相關書籍,就知道軟體開發有一種經典的開發方式叫做瀑 布模型29,它的想法是整個軟體經過規劃、設計、開發等等流程,一氣呵成,然而不幸的 是軟體開發的需求可能會隨時間改變,除此之外開發的過程中也會發現新的需求或設計上
29http://zh.wikipedia.org/zh- tw/%E7%80%91%E5%B8%83%E6%A8%A1%E5%9E%8B
￼￼￼
工程篇 35
的問題,隨著網路的快速發展軟體的發展週期也越來越短,因此一氣呵成在大多數現代的 軟體開發中已經不適用,將軟體開發打散成為很多小的開發週期漸漸越來越流行,到後來 有人提出更完整的方法,像是前期的敏捷開發30到最近的Scrum31,不一定會適用於所有的 團隊,但裡面的許多想法與做法值得讀者參考,在網路上或書店裡都可以找到不少相關資 料。
資訊安全
資訊安全在台灣是普遍不受到重視的一個環節,在各大電子商務網站購買東西不久,很常 會接到詐騙集團的電話,他們手中都握有你完整的個人資料與購物資訊,除此之外,有 太多網站連最基本的使用者密碼不應該儲明碼這件事都沒做好,有個網站叫我的密碼沒加 密32就是專門在收集台灣沒有對使用者密碼進行加密的網站,上榜網站從政府單位到各大 知名網站都有,可見其對資安認知的缺乏,資訊安全是很困難的議題,就好比蓋一道長城, 這道長城只要有一個缺口或弱點就前功盡棄了,而且這世界上並沒有攻不破的城牆,那讀 者可能會有疑問即然沒有攻不破的城牆,為什麼還要蓋城牆?現今的駭客生態已不如十年 前或二十年前,當時的駭客多以炫耀和自我滿足為目的,但到現今,各種攻擊已不再只是 為了好玩,更多是為了獲利和達成特定的商業,甚至是軍事目的,駭客從原本單打獨鬥也 演變成團隊合作,攻與防的重點其實都在於成本、損失和獲利,今天如果一套系統保護的 是核彈發射的控制,那麼理所當然被攻破的損失難以估算,獲利也不斐,自然得投入許多 成本,讓攻破的成本遠超過獲利,同樣的道理也是可以運用在網站上,一個網站如果可以 影響股市交易,那麼被攻破損失是難以估算的,因此得投入相對應的成本進行防禦,大多 數人都有一個疑問,資訊安全是否需要無限上綱?多安全才叫安全?其實一套系統要達成 資訊安全,必需做到
攻破成本遠大於攻破獲利
簡單的舉例,當攻破一套系統要花一百萬元,但獲利只有十萬元,自然不會有人想要攻破 這樣的系統,我們也可以因此稱這樣的系統是安全的,不過值得注意的是,這些數字其實 是很難估算的,究竟攻破你的網站可以賺多少錢?攻破的部份又是哪些?其實是沒辦法像 舉的例子直接量化,除此之外攻擊者獲得的好處除了財務上的,也有可能是精神上的,而 攻擊的成本需要多少錢也是同樣難以量化,但總體而言這個規則只是定義了安全的要件, 實務上是靠各種細節累積而成。
台灣現行雖然有個資法,但因為實在難以證明是企業的疏失,雖然舉證則任落在企業身上, 但企業只要提出了各種表面上的防護措施的證明,也很難認定是企業的錯,加上集體訴訟 在台灣不如歐美盛行,大多數人面對自己的個人資料被某個網站外洩,也只會摸摸鼻子自 認倒霉,因此許多企業對於資訊安全的防護都是只採取表面上的措施,但實質上並沒有太 多的真正保護,簡單的一個因素就是被攻破造成的損失被認為是非常低的,因此產生了道 德風險,與其花這麼多心力去進行防禦不如放任它發生,然而其實除了被攻破所造成的財
30http://zh.wikipedia.org/wiki/%E6%95%8F%E6%8D%B7%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC 31http://zh.wikipedia.org/wiki/Scrum
32http://plainpass.com/
￼
工程篇 36
務損失風險,其實更難以估算的是使用者對這項服務的信心的損失,在競爭的市場上,當 使用者的資料在某個服務上被竊取,使用者很容易就會對這項服務喪失信心轉而投向競爭 對手,因此台灣要發展有競爭力的軟體服務,資訊安全絕不能以放任的心態處理。
在台灣資訊安全錯誤大多都是由經驗不足或缺乏資安概念的工程師所做的不良設計引起 的,很常見的有SQL 資料隱碼攻擊33,透過送出精心設計的資料輸入到網站或軟體系統, 因為處理不當,導致查詢指令被篡改,讓攻擊者得以執行任意的查詢指令,不管是取得完 整的資料庫或進行新增、刪除、修改,有經驗的工程師會在處理使用者輸入資料時特別小 心,所有來自使用者的資料都應該被假設為惡意的,得經過過濾,更進一步的做法是可以 採用像是ORM(Object-relational mapping)34這類技術來產生查詢指令,由於查詢指令全經 由 ORM 這層產生,只要這層設計得當,一般惡意的指令很難穿透,另一個常見問題就有 如先前所提到的使用者密碼沒加密,正因為有如 SQL 資料隱碼攻擊等手法,當資料庫被攻 擊者攻破時,就可以直接輕易地取得密碼然後利用它來登入系統,如果不幸的是有使用者 在其它網站也使用同樣密碼,也會跟著一起淪陷,因此這樣的做法是害人又害己,最簡單 的方式是透過雜湊函數將使用者密碼進行不可逆的加密,但從安全的角度來看其實這並不 足夠,還有更安全的做法可以參考Best practicing for password protection35這篇文章。
除了上述常見問題,其實還有太多問題可以討論,但因為本書並非以資訊安全為主題,最 重要的應是帶給讀者正確的觀念與心態,資訊安全的處理有一門哲學叫「深度防禦36」讀 者可以參考,簡單的來說就好比建造一座城池,如果城牆只有一道,一但被攻破了整個城 就淪陷了,為了安全起見,許多城池都會蓋多道城牆,最裡面住的可能是最重要的國王, 外面一層住貴族,最外面住百姓,這樣一來攻擊者想拿下國王得破三道城牆,而如果攻擊 者偷偷派內應進城裡,如果守衛對於城內的人就完全信任,那麼也可能很輕易的被攻破, 深度防禦就是透過多層的保護,並且不能輕易的依賴或信任其中的任一個環節,資訊安全 其實與其說是一種能力,不如說是一種態度,是人都會犯錯,再大的公司其實都有疏漏的 時候,最重要的是在一開始就得保持重視資訊安全的態度,抱持深度防禦的哲學,重視資 訊安全問題,瞭解攻擊的成本、攻破的獲利與損失,找到對的人,細心執行並檢驗,就可 以避免大多數初級的失誤所造成的損失,對資訊安全來說最忌諱的就是在發生資安事件後 還表現出無所謂的態度,除了會讓使用者喪失信心,可能更會因此引來更多攻擊。
正因為仙人打鼓有時錯,再頂尖的團隊都有可能會犯錯,盡力阻止出錯只是第一道防線, 更重要的是當出錯該如何處理,實務上的做法是許多大公司都會針對自家公司的系統漏洞 的獨家回報提出賞金,其背後很簡單的一個原因就是在於今天如果某個漏洞被發現,以獲 利為目的發現者一般會在地下市場轉賣給第三者或自行利用來牟利,當這樣的漏洞資訊落 到惡人手裡,自然會對公司造成損失,賞金其實就是一種對於漏洞與地下市場之間的競價, Yahoo 公司在不久前就曾發生有資安研究人員發現系統漏洞,結果只得到 12.5 美元禮卷的 糗事37,要知道一個漏洞看影響的範圍、深度,在地下市場一般都會遠遠超過禮卷的價值, 當競價過低,大多數人以利益為首要考量的話就會選擇賣給地下市場,Google 其它許多公 司都瞭解這樣的道理,因此都提供了豐厚的賞金,讀者如果有高價值的服務或系統,樹大 招風足以引來攻擊的話,除了僱用專業的資安人員,也可以考量採用類似方式避免漏洞由
33http://zh.wikipedia.org/wiki/SQL%E8%B3%87%E6%96%99%E9%9A%B1%E7%A2%BC%E6%94%BB%E6%93%8A 34http://zh.wikipedia.org/wiki/%E7%89%A9%E4%BB%B6%E9%97%9C%E8%81%AF%E5%B0%8D%E6%98%A0 35http://blog.gcos.me/2012- 01- 08_best_practicing_for_password_protection.html 36http://zh.wikipedia.org/wiki/%E7%B8%B1%E6%B7%B1%E9%98%B2%E7%A6%A6 37http://www.ithome.com.tw/itadm/article.php?c=82958
￼
工程篇 37 攻擊者第一手得知。
分散式運算
近日,中國大陸阿里巴巴集團的購物網站正在進行購物狂歡節,在開幕的前一分鐘裡就達 成了一億元的消費金額,並且有一千三百七十萬人同時在線上38,寫下了新的記錄,反觀 台灣的許多網站,即使是大廠商所舉辦的活動都會因使用者人數過多造成當機,這些造成 網站崩潰的使用者數量從現代的網路服務發展來看都是微不足道的,從驚人的數量級差別 就不難看出現今兩岸的實力差距,分散式運算、雲端運算是近年來的顯學,越來越多廠商 推出的產品都要跟雲端兩個字沾上邊,然而雲端的最基本功力,也就是承載大規模使用 者、擁有擴展能力,以這類規模的電子商務網站,只要停機一小時損失都是數十億甚至數 百億的金額,如果有競爭對手,更等於平白把使用者奉送給對方,台灣在這方面的能力是 相對薄弱的,許多廠商自稱有雲端技術,但這就好比在一個沒有龍的地方賣屠龍刀,究竟 能不能真的屠龍連賣刀的人都不曉得。
網站要達到那樣的規模就需要有適當的分散式架構設計,並且要有容錯設計,因為當機器 數量到達一個程度,隨時都會有機器出現故障的可能性,在這個層級計較的就不是軟體設 計的細節,而是宏觀的伺服器鑑隊編制、組織、協作的問題,在台灣這類的人才嚴重缺乏, 這同樣是難解的雞生蛋、蛋生雞問題,台灣的市場不如中國大陸或歐美龐大,能擁有的使 用者數量達百萬等級通常已經是極限,然而一個網站從十萬等級到百萬等級,甚至到千 萬、億級,其實是不一樣的事情,當這些使用者在同一個時間連上線又是另外一回事,沒 有大量的使用量自然沒有練兵的機會,要改善這個狀況需要做的不是再多推出幾個冠名雲 端的產品,而是應該紮紮實實從最基本解決各種活動的網站當機問題做起,從中吸取經驗 改善架構設計逐步成長,當一個廠商號稱有雲端相關的技術能力,但是自己的活動網站卻 被少少的人數塞暴,自然沒有人會信任這樣的服務。
相關的技術在國外也發展了許多年,以最近流行的Hadoop39來說就是很常見的例子,不幸 的是在台灣 Hadoop 似乎被當做雲端的代名詞,做為大量的離線資料運算確實很實用,但 因為處理速度太慢,在國外其實已經往更即時的海量運算Data stream40的方向前進了,其 它還有許多技術,例如ZeroMQ41是一款開放源碼的函式庫,用來讓不同的程式行程、主機 間方便進行溝通,Erlang42則是一款專為分散式運算設計的程式語言,HAProxy43則是用於 動態分散網頁流量的軟體伺服器,針對 Amazon Web Service,國外也有社群開發部份相對 應的開放源碼服務叫做Open stack44,其中包含虛擬機器、虛擬網路和雲端儲存等專案。
還有許多技術不勝繁舉,就不在此一一列出,但最重要的還是仔細思量和設計,如何運用 這些現有的技術,或自行開發技術,來達成高擴展性和高可得性,在近來還有一個趨勢, 那就是網路服務的擴展性和可得性越來越以純軟體達成,以往可能得購買昂貴的網路負載
38http://www.techweb.com.cn/internet/2013- 11- 11/1354870.shtml 39http://hadoop.apache.org
40http://highlyscalable.wordpress.com/2013/08/20/in- stream- big- data- processing/ 41http://zeromq.org
42http://www.erlang.org 43http://haproxy.1wt.eu 44http://www.openstack.org
￼
工程篇 38
平衡硬體,現今都已經成為過去式,昂貴的硬體設備不但是成本上的付擔,對於快速擴展 來說,特製的硬體不像軟體可以輕易複製到各種機器上運行,因此也造成了限制,Google 的搜尋服務在最初也是靠純軟體實現,在任何品牌與常見規格上的硬體都能運行,任一台 機器故障都可以被捨棄並更換,除了自己擁有硬體外,現在更多網站會直接利用 Amazon 等廠商提供的一系列雲端服務來建置自己的網路服務,台灣軟體產業要擁有真正的雲端技 術,就一定有實際的經驗,進軍國際是唯一突破規模限制的可能性,只有在經歷真正大量 使用的洗禮,才能避免雲端與海量資料變成沒有任何實質意義的口號。
開源篇 加法思考與減法思考
台灣是一個資源有限的島,上面擠了兩千三百餘萬人,在這樣的環境底下,減法思考是很 常見的,從小到大多少會有長輩向你灌輸這類的思想
  顧好你自己就好,別浪費時間教別人又多一個競爭對手
在學校裡一切都只是為了成績和名次,因此不是你死就是我活,在軟體開發也很常見到這 類的思維,有些人會告訴你
  你要藏一手,不然別人都學走,公司就不要你了
也有人會這麼說
  我的程式碼只有我能維護,如此一來公司就不能沒有我
諸如此類都是很典形的減法思維,在資源有限的環境下,透過各種手段去排除其它人的競 爭,來確保自己的利益,確實在短期內看來或許有成效,但長期看來環境會因為有太多人 抱持著這樣的思想越來越惡劣,很遺憾的,台灣目前的現況有不少人是這樣的心態,才會 走到今日的地步,這些人會不停的抱怨各種環境的改變,把責任和過錯都推給他人,但是 卻不願意承認是自己造成這樣的環境。
俗話說「人不為己,天誅地滅」,確實人是自私的生物,但相對於減法思維人,加法思維的 人,除了在考量自己利益同時,也會思考對整體環境有所改善的選擇,在一個班級上雖然 花了時間教同學,確實花了自己的時間又讓你的競爭者實力增加,或許因此輸了排名,但 是在互通有無的情況下,大家整體的能力是提升的,失去了一點短期的利益卻換來整體和 長遠的提昇,同樣的,在一間軟體公司裡,當員工互相交流,整體的能力提升,對公司來 說是正向的提升,確實有些不懂軟體開發的公司將人才當做用完即丟的工具,但如果因為 這樣公司開除你那也只是認識到這是一間不懂軟體開發的公司,必定沒有什麼前景,也不 值得久留,盡力將程式碼寫得人人都可以輕易維護,雖然多花了一點心力,但是對團隊來 說是整體的生產力提升。
開源篇
40
￼減法思維與加法思維
以更廣的視野來看,很多時候人們可以改變的環境不止是一個班級、一間公司,甚至可以 是一個國家的整個產業,一個產業能否跟上世界潮流的關鍵,抱有加法思維的人數佔整體 比例就可以看出端倪,從分享的風氣其實就可以看出個大概,不幸的是在台灣分享的風氣 並不盛行,許多人還是抱持著一但分享就會增加競爭對手的心態,即使是在團隊裡也是如 此,如果說一個人的所學是獨步武林的絕學,藏私也是理所當然的,但是當一個人所學不 多,已經落後其它高手數十年功力,在這小小的地方有著惡劣的環境還在想著透過藏私勝 過他人也未免太過可悲。
有趣的是,比較兩岸的軟體產業環境,對岸的工程師是樂於分享的,除了工程師人數基數 的巨大差距以外,在那裡分享技術心得是很常見的,並且很常看見他們在文章裡寫這麼一 句話
拋磚引玉
在他們的思維裡,他們希望透過自己分享這樣一點點心得,引來更多人分享更多經驗,讓 整體的環境有所提升,這也是為什麼中國大陸的軟體開發能力在短短十年內超越台灣的一 個重要原因之一,雖然慢了別人好幾拍,但是台灣的分享風氣已有好轉的跡象,越來越多 人願意寫部落格分享自己的心得,越來越多人參與開放源碼的活動,但還是都以學生和個 人為主,企業的參與還是少數,因此離先進國家還是有一大段距離要走。
之所以提到加法思維,是因為開放源碼就是加法思維的最好體現,不幸的是在台灣大部份 人對於開放源碼都有嚴重的錯誤觀念,作者就有曾聽過不少人以不屑的口吻表示
那做不起來啦
這些人可能都抱持著減法的思維,自然無法理解開放源碼的動機,運作的方式,甚至他們 不知道開放源碼早已經創造數百億產值,現在每個人的智慧型手機裡都有基於開放源碼的
開源篇 41
軟體在裡面運行,不管是作業系統還是函式庫,也有無數的公司的商業模式是基於開放源 碼在進行的,這些對於開放源碼的錯誤認知都是需要被修正的,否則台灣的軟體產業永遠 都會處於閉門造車的困境中無法脫離。
開放源碼的加法思維
開放源碼究竟是怎麼一回事?其實簡單來說,就是將軟體的程式碼透過一份授權,在一定 特定的條件下每個人都可以無償利用、修改、散佈程式碼,許多人將軟體的程式碼視為一 間軟體公司的命脈,開放程式碼這件事情聽起來很瘋狂,為什麼會有人想要平白免費讓人 使用辛辛苦苦寫出來的智慧結晶?這些人其實並沒有發瘋,因為他們以加法的思維看到, 透過開發源碼可以改善整個環境,或著只是某種商業的手段,端看開發者是抱持著什麼樣 的心態,對大部份人來說,他們開放源碼的動機不外乎
• 自我能力的證明
• 避免其它人重覆開發類似的程式,增進全人類的生產力 • 透過開放源碼獲利
對於一個開發者來說,證明自我實力的最好方法之一莫過於開放源碼,對一般的公司而言, 一個工程師再怎麼優秀,他所寫的程式最終都是屬於公司的,而其它人都看不到這個工程 師寫了什麼、他寫得如何,開放程式碼不一樣的是任何人都可以看見、利用這些程式,因 此一個人所生產的程式好壞都清楚可見,如果有工程師參與或甚至主導一個流行的大型的 開放源碼專案,這不言自明地證明了這些人的能力,因此他們一般都是產業裡的搶手人才, 為了贏得工程師社群裡的尊重與基於對自己聲望的累積,許多工程師都願意花心力在於開 放源碼的專案上,他們在為自己著想的過程中也改善了整體的環境。
軟體開發中其實有很多會重覆使用到的部份,就好比打造一台車子會用到四個輪子一樣, 一間汽車工廠未必有生產輪子的能力,他們可能會向上游廠商訂製或是購買現成的輪胎來 組裝,以減低生產的成本或風險,同樣的在軟體開發的世界也是如此,這也是為何會有
不要重覆打造輪子
這句名言,如果每個軟體工程師都為同樣一個輪子多花了一個工作天,那麼全世界假設有 一百萬個工程師都重造了一個輪子,那整體浪費掉的生產力就是一百萬個工作天,正因為 同樣功能的程式,在許多地方都派得上用場,具有加法思維的工程師在考慮到除了滿足自 己的需求以外,將這些會重覆利用到的部份以開放源碼的形式分享讓大家使用,如此一來 就省掉了全世界工程師們將會浪費掉的時間,或許讀者會質疑,這麼做可能會讓以同性質 軟體賣不出去,事實上確實是如此,但是因為這樣,軟體產業的巨輪往前推進了一大步, 除此之外也創造了新的商業機會,舉例來說,MySQL 做為開放源碼的資料庫,打敗了其它 類似的收費資料庫軟體,但是它讓原本無法負擔昂貴資料庫授權費用的開發者可以省下這 筆開支,基於資料庫系統的開發進而創造更多的價值,同時也因為有無數人使用這套資料 庫系統,它也創造了技術諮詢服務的需求和其它各種不同的商業模式。
開源篇 42
簡而言之,開放源碼是一種基於利人利己的個人職涯或是商業的經營策略,並非只是許多 人所認為的吃飽沒事做或是慈善事業,軟體產業之所以能夠在短短的數十年內改變世界原 有產業的樣貌,正是因為聰明的工程師懂得使用加法的思維,在考慮到自身好處以外還能 兼顧到整體環境的改進,他就像是一股巨浪,推著整個產業前進,把不願意乘浪抱持古老 思想的人遠遠甩在後頭,對岸早就駕馭開源,甚至做出貢獻,淘寶就有釋出一系列開源專 案45,台灣軟體產業如果想跟上世界腳步,必然得乘上這波巨浪。
兩大授權的陣營
要瞭解開放源碼,就得先瞭解兩大陣營的授權條款,授權說穿了其實只是一份定型化契約, 任何人都可以在遵守這樣的合約的條件下使用,舉個例子,在下雨天一個公共場所的門口 擺了一些免費讓人使用的雨傘,但有一個條件
  使用者在用完後應在有空時前來歸還
開放源碼授權的條款大致上就是類似這樣的概念,許多人對於開放源碼有所誤解,會擔心 一但使用了之後會不會對商業產品造成負面的影響或是權力的侵害,這確實有可能發生, 但只要抓住大原則和幾個重要的觀念其實就不容易出錯,而授權條款其實可以分為兩大陣 營,一個我們把它稱之為類 BSD,另一個我們稱之為 GPL。
先從類 BSD 介紹起,主要是針對這些條款的大原則介紹,以類 BSD 來說,BSD 這三個字的 全寫是Berkeley Software Distribution46,它是源自於美國柏克萊大學的一種軟體授權,就如 裡面散佈(Distribution)所說明的,其實這類授權最主要都是在於限制散佈的行為上,在 瞭解授權之前,我們必需先理解散佈,究竟什麼是散佈呢?簡單的來說,當你把一份程式 碼,由你的手中交給其它人,我們就稱之為散佈,像是放在網路上供人下載,這自然也是 散佈的一種,把程式碼進行編譯的結果交給第三者,一樣也屬於散佈,如果你只是將這份 程式下載來自行使用,就沒有散佈的問題,還有一個很常見的特例是下載開源軟體用在自 己伺服器上運行的程式,因為在自己的伺服器上,所以不涉及到散佈,但後面會提到少數 的例外之一,就是 AGPL 條款。
BSD 對於開源軟體的散佈限制,它主要的精神與概念在於當你散佈基於 BSD 條款下的程式 碼本身、或是修改自該程式碼作品的衍生作品,你都必須一同附帶 BSD 的授權條款,也就 是說你不能把一份 BSD 的開放程式碼,只將程式碼部份或編譯以後的執行檔交給別人,而 不把授權的條款聲明也一併交給他們,除此之外它還限制你不能篡改作者的名稱,例如你 不能拿了一份 BSD 的程式碼,然後將作者改成自己的名字,只要把握這兩個重點基本上不 會有太大的問題,而因為有很多其它授權都是大同小異的類似原則,因此這類授權我們都 稱為類 BSD,像是MIT 授權47、Apache 授權48都是屬於類 BSD 的授權形式。
我們列舉一些常見的 BSD 授權條款的合法做法
45http://code.taobao.org
46http://zh.wikipedia.org/wiki/BSD_license
47http://zh.wikipedia.org/zh- tw/MIT%E8%A8%B1%E5%8F%AF%E8%AD%89 48http://zh.wikipedia.org/wiki/Apache%E8%A8%B1%E5%8F%AF%E8%AD%89
￼
開源篇 43
• 利用 BSD 授權下的函式庫開發套裝軟體,不公開程式碼,賣給客戶的檔案或程式中 也夾帶了 BSD 的授權聲明
• 修改 BSD 授權下的程式碼,在作者群中加入自己的姓名並同樣夾帶 BSD 授權,販賣 給其它人
• 利用 BSD 授權下的函式庫開發在伺服器上運行的軟體
許多人對於開源程式有錯誤的誤解,誤以為不能用於商業用途,其實大多數授權都沒有這 樣的限制,重點都在於散佈時應遵守的條件,只要遵守了規定,要賣多少錢或以什麼樣的 方式獲利都不會有問題,以下列舉一些會有違反條款疑慮的做法
• 利用 BSD 授權下的函式庫開發套裝軟體,賣給客戶的檔案或程式中未夾帶了 BSD 的 授權聲明
• 修改 BSD 授權下的程式碼,對外散佈聲稱是自己所開發
除了類 BSD 以外, 另一個最大的開源軟體陣營就是 GPL, 全寫是GNU General Public License49,它有一個最大的差別在於,類 BSD 不在乎你在使用、修改、散佈了程式之後, 有沒有回饋貢獻於開源社群,而 GPL 很在意別人是否只取不予,因此它的條款除了上面 的兩大原則,最主要增加了一條,就是當你散佈程式碼的同時,你修改的部份也要一同用 GPL 授權條款開放出來讓大家使用,這對商業軟體的使用上就有了很大的限制,舉個例子, 當你修改一套 GPL 條款授權底下的軟體,拿來販賣獲利時,因為販賣的過程會牽涉到散佈 的行為,這表示你修改的部份一樣也要用 GPL 授權條款開放出來,這樣一來任何人都可以 免費利用,可能會有收不到錢的疑慮,除此之外,並非直接修改就得遵守 GPL 的條款,如 果一個函式庫是以 GPL 授權使用在你自己的軟體專案上,你的整個軟體專案因為使用到了 他們程式碼的部份,廣義上的認定是你的程式碼也算是他們程式的衍生作品,散佈時就得 遵守 GPL 條款,有人用「感染」兩個字來形容 GPL 的函式庫,雖然不怎麼好聽,但卻很貼 切。
正因為使用 GPL 條款下的函式庫有感染問題,這使得很多人因此卻步,為此後來提出了一 個約束弱化的 GPL 授權叫做LGPL(Less Generic Public Licence)50,這個條款免除了使用函 式庫受感染的疑慮,因此你可以開發一套封閉源碼的專案,利用到了 LGPL 的函式庫,而 不必擔心整個專案受到感染而被迫得開放出來。
GPL 雖然有在散佈時得強迫開放和俱感染特性,但在一個特別的情況下是不用被迫公開源 碼的,那就是利用 GPL 的程式開來發伺服器上運行的服務,因為運行在自己的伺服器上來 提供使用者服務,程式碼不管是其本身或衍生作品都還是留在自己的手上,並不符合散佈 的定義,自然沒有開放的義務,正因為這樣的特性有許多公司大量利用 GPL 的開放資源 卻沒有貢獻回饋社群,有些 GNU 社群的人不滿,因此提出了AGPL(Affero General Public License)51,這款授權將散佈的定義推廣到了提供服務供他人使用的層面,因此如果一套程 式是用 AGPL 授權,而你將它修改後用於運行服務提供第三者使用,你所修改的程式一樣 得用同樣授權的條款釋出,雖然如此,但類似 AGPL 的授權因為嚴格的條款,目前使得使
49http://zh.wikipedia.org/wiki/GNU%E9%80%9A%E7%94%A8%E5%85%AC%E5%85%B1%E6%8E%88%E6%AC%8A%E6%A2%9D%E6%AC%BE 50http://en.wikipedia.org/wiki/GNU_Lesser_General_Public_License
51http://zh.wikipedia.org/zh- tw/Affero%E9%80%9A%E7%94%A8%E5%85%AC%E5%85%B1%E8%A8%B1%E5%8F%AF%E8%AD%89
￼
開源篇 44
用的專案其實不多,但隨著網路服務的發展,使用的專案有越來越多的趨勢,除了 AGPL, CPAL(Common Public Attribution Licensee)52也有類似的特性,在使用這類授權的專案於 商業用途的網路服務上時得特別注意。
大多數的授權條款都在這兩大陣營內,然而還有許多零星的不同授權條款,因為並不常見 就不多做討論,開放源碼的授權其實還有很多細節可以深入討論,作者在此書所提供的並 非專業的法律見解,只是一些經驗的分享,僅供參考,如果讀者有需要的話,幸運的是可 以洽詢中研院提供的開放源碼免費的法律諮詢服務53,能否妥善利用開放源碼是軟體開發 成敗的關鍵之一,中研院提供這樣的服務真的值得鼓勵,如果不懂得利用就太可惜了。
開源商業模式
許多人以為開放源碼就等於放棄了賺錢的可能性,其實這是很大的錯誤,事實上有許多軟 體產業的商業模式都是環繞著開放源碼打轉的,在此介紹一些常見的商業模式
技術諮詢
技術諮詢是很常見的開源商業模式,縱使一套程式開放免費讓人使用,也有完整的說明文 件,並不代表任何人都可以輕易的用這套程式來解決所有問題,許多時候這就像買了一部 車子,你懂得如何開車,但未必懂得車子運作的各種細節,技術諮詢的性質就有點像是修 車廠的角色,當在開放源碼程式的使用上有疑問時,都可以洽詢這類的廠商,許多人有一 個誤解,認為商業的軟體才有完整的技術支援,出了問題才能找得到人幫忙,這其實並不 正確,開放源碼在出問題是最糟糕的情況是自己動手解決,因為程式碼都在手上,而商業 軟體反而當出問題時原廠不支援或甚至原廠倒閉了反而可能會求助無門,自己無法解決時 或是時間緊迫時這類廠商就會是你的好朋友,舉一個實際的例子,MySQL 資料庫54是最知 名的開放源碼資料庫,正因為已經成為業界的標準資料庫選擇之一,使用者眾多,因此有 許多廠商是專門做這方面的技術諮詢,Percona55就是這樣的一家廠商,當你的 MySQL 資料 庫因為資料量過多、或不明原因查詢速度緩慢時,就可以付費找他們來幫你查看造成的原 因是什麼,並提出妥當的解決方案。
專業訓練
免費並不代表工程師不用花時間去學習,許多時候學習的成本反而比開發一套來得高,開 放程式碼的使用也是需要花不少心力學習與探索的,因此有許多廠商提供了專業訓練的服 務,他們開設課程教導你們團隊裡的工程師如何使用該開放源碼的專案,像是先前提到的 Percona 也提供了 MySQL 資料庫的人員訓練服務。
52http://en.wikipedia.org/wiki/Common_Public_Attribution_License 53http://www.openfoundry.org/legal- consulting- services 54http://mysql.com
55http://www.percona.com
￼
開源篇 45 開放-封閉源碼
有一種常見的做法我們稱為開放-封閉源碼的模式(Open-close Source),簡單的來說,最 核心的程式主體是以開放源碼的條款釋出的,任何人都可以無償使用,廠商對這個主體開 發了一系列工具或是相關的加值程式、外掛、套件,這些部份是封閉程式碼的狀態,他們 透過販售週邊軟體來獲利,例如 MySQL 本身就是這樣的例子,他們有一系列針對 MySQL 資料庫開發的工具,是不公開程式碼的,得另外付費購買,另一個例子,Open Stack56是一 系列模仿Amazon Web Service57的開源軟體,其中有一款子專案是模仿Amazon S3 雲端儲存 服務58的軟體叫Swift59,因為自行架設這套雲端儲存系統並不是那麼簡單的事情,就有一家 公司叫SwiftStack60提供了一套週邊的付費雲端服務用於方便部署和管理 Swift 系統,這一 樣也是開放封閉的商業模式。
雙授權
一個軟體專案如果想利用現成的 GPL 函式庫開發,會面臨整個專案程式碼都被迫公開的 困境,有些廠商反而利用這個特性來塑造商業模式,也就是所謂的雙授權,簡單的來說, 程式碼的主體是以 GPL 授權釋出的,不以盈利為目的的自願開發者參與或利用,程式碼被 貢獻回饋到這個社群,是沒有太大的問題,但是當有人想利用這套程式可以進行散佈但又 不想公開程式碼,此時就可以向廠商購買另外的商業用途授權,這樣的第二種授權一般就 可以允許利用者的閉原行為,有些廠商還會訂出分不同使用條件級別的授權來販授,例如 以使用者人數的規模等等,視情況而定,以競爭者的角度來說,他們能取得的只有 GPL 的 授權,修改了程式也只能被迫開放於同樣的 GPL 授權,自然無利可圖,PyQT61就是這樣子 的例子,它是以 GPL 形式釋出的視窗框架函式庫,如果你的程式要利用它來開發商業用 的視窗程式,在不想公開程式碼的情況下就得向他們購買商業授權,再舉另一個比較特別 的例子是MongoDB62,它是一套資料庫,有別於函式庫,因為資料庫系統一般都是以服務 形式提供,使用上都是透過網路連線為主,因為不涉及到散佈問題,單純提供服務的使用 者就不必開放程式碼,為了避免競爭對手無償拿來運行服務收費,他們將伺服器部份的程 式碼主體以前面提到的 AGPL 條款授權釋出,如此一來任何人想修改 MongoDB 並提供服 務就得一樣貢獻出自己的修改,這表示利用 MongoDB 本身提供雲端資料庫服務,就勢必 得向他們購買另外的商業授權,但是對於一般使用者而言,因為它的資料庫驅動程式是以 Apache 授權釋出,是屬於類 BSD 條款,以連線的方式去使用 MongoDB 提供的服務並不會 受到 GPL 授權感染,由此可見巧妙的開源授權佈局以免費使用的方式讓人使用,但又利用 GPL 的限制性來確保商業上的利益。
就目前看來,在台灣大部份人對於軟體的商業模式還停留在販售套裝軟體的階段,連使用 開放源碼資源都有困難,更惶論建立基於開放源碼的商業模式,在這方面台灣的產業業界
56http://www.openstack.org
57http://aws.amazon.com
58http://aws.amazon.com/s3/ 59http://docs.openstack.org/developer/swift/ 60http://swiftstack.com 61http://www.riverbankcomputing.co.uk/software/pyqt/intro 62http://www.mongodb.org
￼
開源篇 46 依然有漫漫長路要走,很多時候需要跳脫傳統的商業模式思維理解外面的世界運作才能夠
在全球化的競爭下生存。
評估並使用開放源碼資源
能否有效利用開放程式碼,是一個軟體團隊是否成功的關鍵之一,使用開源軟體與否的 開發成本差別,使得兩個工程師個體之間的生產力甚至可以差異到百倍,簡單舉例,像 MySQL 這樣龐大複雜的資料庫系統,如果團隊只因為要用到資料庫,而從頭開發一套勉強 可用的系統的話,光是花掉的時間可能就是好幾個月,隨著團隊的規模越大,雖然開發時 間縮短,但成本還是相對較高,懂得利用現有資源就能省下大筆開發成本,MySQL 已經是 為大眾所熟知的開放源碼軟體,在開發過程中還有很多類似的情況,例如全文檢索功能、 加解密、特定檔案格式讀取等等,你會遇到的問題別人也有遇過,所以很多都可以找到現 成的資源可以使用,使用越多現成的資源通常表示省下越多的開發成本。
然而不幸的是並非盲目使用開源資源就能對整體開發進度達成提升,能否對於開放源碼資 源進行正確的評估、選擇,並決定是否使用,可以區別優秀的工程師與一般的工程師的好 壞差別,評估和利用開放源碼的資源其實有相當的難度,首先的門檻是英文閱讀能力,所 有開放源碼專案的文件都是以英文呈現,只有非常少的例外,再來就是得瞭解開放源碼授 權的各種特性,不必成為專家,但至少得懂上述的大原則,接著更困難的就是對於技術的 經驗上的判斷,一套現成的函式庫,有什麼樣的限制、優缺點、學習的難度、套用至現有 專案可能會遇到的問題、修改滿足需求需要多少時間、專案的品質、社群的支援,有太多 細節都需要工程師的仔細評估,這些都是難以速成的能力,如果選擇並使用不恰當的現成 資源,不但可能沒辦法提升生產力,可能還會降低開發進度,就好比挑了一顆歪七扭八的 輪子裝在車子上一般。
一般而言選擇一套現成資源可以分成幾個步驟
1. 尋找 2. 評比 3. 試驗 4. 決定
一開始透過在網路上搜尋,閱讀不同的資料,尋找並列出符合需求的候選名單,接著針對 各個候選項目的各種優缺點進行評估,接著可以進行一些簡單的使用與測試來看各種項目 是否真的如外面宣稱的那樣,最後決定要使用那一個,雖然說這個過程本身也是成本,但 是只要能夠因此找到適合的現成資源利用的話,省下來的開發成本和提升的軟體品質絕對 是物超所值,以降低成本引以為傲的台灣居然不懂得利用開放源碼來降低軟體開發成本真 的是莫大的諷刺。
開源篇 47 使用次世代程式語言
在歐美,現今已經越來越多新的軟體公司在使用像是 Python、Ruby、Scalar、Go 等等次世 代的程式語言,事實上,早在十幾年前 Google 的搜尋服務都是由自由軟體所組成的,在 台灣卻都還停留在十年前、二十年前的開發體系,這之間最大的差異就是生產力、產出的 品質,選擇一款程式語言不單單只是影響到寫程式,它更影響到你可以用什麼樣的現成資 源、是否能在社群裡找到協助、是否能夠找到廠商協助等等,在台灣很常見使用由特定商 業廠商所主導的開發體系,這類體系有個好處,當出問題時向原廠求助,只要付費一般都 可以得到支援,但這就像是一把雙面刃,過度依賴於廠商的開發體系,有時原廠成了專案 成敗的關鍵,例如開發時遇到工具的臭蟲難以自行解決,向原廠求助,如果原廠愛理不理 或是人手不足,那開發團隊就會陷入完全無法動彈的困境裡,原廠工具的限制或是技術上 的不足、與時代的脫節都會對團隊開發造成負面的影響,作者曾有看過一個外包專案業主 要求將系統做成可透過網頁操作的版本,但因為該專案先天的工具限制,只能產生難以使 用的 ActiveX 形式網頁,最後專案以失敗收場,還有更慘的,如果遇到原廠商倒閉或關閉 該項的業務、代理商結束代理等等狀況,那可能再多錢都無法挽回開發中的專案已投入的 心血,除此之外,綁定特定廠商的開發體系,正因為有強烈的封閉和被特定廠商控制,沒 有人願意投入太多心立在建立開放源碼的資源上,除了上述問題,這些工具或是伺服器軟 體等等的授權金額更是高得嚇人,對於公司而言是沉重的成本負擔。
近來有一個好轉的現象是在台灣越來越多人開始接觸這些新興的主流技術,但不幸的是大 多都還只限於學生與個人性質的使用,以公司為主的團隊開發依然還是陷於過時的技術之 中,當然,並非所有的情況都可以自由選擇開發的工具,像是 iOS 裝置走的就是 Objective C 路線,Android 就是 Java,雖然有一些跨平台框架,但整體來說沒有太多的選擇,但是對 於後端伺服器、網頁服務、桌面應用程式等等常見的應用,這些選擇都可以造成巨大的差 異,使用次世代語言有很多好處,但也有很多方面要考量:
程式語言本身的特性
隨著硬體運算能力的成長,程式運行在電腦上所使用的記憶體用量、指令數量多寡,雖然 並非無關緊要,但已經不像以前津津計較,在以往與昂貴的硬體相比,人力的費用與時間 的花費其實並不算什麼,然而當軟體產業的競爭越來越激烈,硬體越來越不值錢,在兵貴 神速的時代,開發的生產力反而成了最重要的開發成敗因素之一,除了像是類似 Google 這 樣擁有海量伺服器的情況,省下的運算資源、電費很可觀,對於新創公司而言,最重要的 是用最快的速度最少的資源解決問題,因此,可以發現新興的開發技術都越來越朝向動態 的形式發展,處理器的發展在以往都以提高時脈為目標,但自從因物理的限制提高時脈已 經到了極限,處理器改朝向多核心發展,語言的發展上也有越來越注重多工的趨勢,拋開 了舊時代文謅謅的寫法,新的語言也越來越往簡潔易懂、易寫的方向前進,這些語言都還 在不停的改進當中,許多新的語言特性使得原本容易出錯或是不容易寫好的部份可以輕易 達成。
開源篇 48 內建函式庫
許多新世代的語言之所以開發起來比較有生產力,是因為它們的內建函式庫都可以跟上時 代,當現今網路越來越朝網路方向發展,許多新的技術都是過去沒有或不流行的,例如 XML 做為網路上的資料交換格式,在過去是較受歡迎的,然而近來因為人們嫌它的格式太 過囉唆與肥大,加上 Javascript 語言的流行與運用的增長,JSON63取而代之成為最常見的網 路資料交換格式,許多舊世代的語言可能就沒有內建 JSON 編碼和解碼的資料庫,這時開 發者有兩種選擇,其一是自行撰寫一套,其二是在網路上找第三方提供的開放源碼函式庫 來使用,不管是哪一種都會浪費寶貴的開發時間,如果有內建的函式庫,就可以省去這樣 的麻煩,再舉另一個例子,正規表示法在現在的軟體開發是不可或缺的工具之一,它可以 讓工程師比對、搜尋複雜的字串格式,然而不幸的是在 C 和早期的 C++ 語言中這並不是標 準的內建的功能,使得要使用這樣的功能就得找第三方的函式庫來引入,尋找與評估、編 譯函式庫都是昂貴的額外開發成本,為此 C++ 在新的語言標準裡納入了這樣的支援。
由上面兩個例子不難發現,一款程式語言如果在內建的函式庫裡對於各種常用,甚至已經 幾乎成為標準的配備功能都沒有內建提供的話,對於開發者的生產力是很大的傷害,因此 在考量程式語言的過程裡,除了語法的特性,很多時候更重要的是標準函式庫是否能跟上 時代。
開放源碼資源的多寡與質量的好壞
在開發軟體的過程中會遇到不同的需求,最慢的方式無疑是自己從頭建構,較佳的方式是 找現成的開放源碼資源,一個事實是
  你會遇到的問題別人也會遇到
因此大部份情況下,當你想要解決某個問題時,別人已經解決過且有寫成開放源碼的專案 了,直接使用可以大幅降低開發的成本,如我們多次提到的,正因為利用別人現成的解決 方案所省下來的成本是非常可觀的,所以一款程式語言的選擇也包括對於這款程式語言現 有的開放源碼資源的多寡,不同的程式語言有不同的開放源碼套件列表,像是 Python 的列 表是PyPI - the Python Package Index64,Ruby 有Ruby Gems65,讀者都可以自行評估。
然而還有一個值得注意的是,並非數量多即是好,不同的語言其現有的開放資源所擅長的 項目往往也不太一樣,得端看開發的需求,除此之外這些現有資源的品質也是需要考量的, 作者就曾有看過某些對於開源專案品質的抱怨,如同在先前所提到的,選擇錯誤的專案很 多時候對於軟體開發來說反而會是一種傷害。
63http://zh.wikipedia.org/zh- hant/JSON 64https://pypi.python.org/pypi 65http://rubygems.org/gems
￼
開源篇 49 學習的曲線
如果一款程式語言得花二十年學習才能夠有效率的開發,那麼再怎樣有生產力可能都不切 實際,因此學習的難易度也是考量之一,但這其實並不難分辯,很簡單的一個指標就是流 行與否,不過這之中也有例外,有些程式語言表面上看起來容易上手,因為這樣非常流行, 但是事實上充滿了陷阱,如果不是經驗老道的工程師很容易寫出漏洞百出的軟體。
社群活躍與否
使用這個程式語言的多寡,也是重要的考量之一,如果一款程式語言使用的人數過少,當 你遇到問題時要詢問時,可能找不到半個人,在這樣的情況下,除了開發上的風險提高, 在招募新血上也相當不利,畢竟沒有太多人會想投資時間在一款越來越少人使用的程式語 言上,活躍的社群有一些特性,除了開放源碼的資源很多以外,可以看程式語言本身是否 一直持續在改進,如果一款與言已經多年沒有任何更新,其實多少都暗示已經沒有多少人 在使用。
使用 Python
讀者可以透過上述不同的面向來考慮使用次世代的語言,因作者並沒有所有語言的開發經 驗,因此無法針對每項給出看法,然而作者選擇的是 Python 體系的開發路線並精於此道, 因此可以針對這部份介紹與推薦,Python 是一款動態程式語言,在國內並不常見,但在歐 美相當流行,諸如像 Google、Facebook 的大公司都有使用這款語言,許多知名的網站或應 用服務都是用它開發的,例如 Youtube、Dropbox、Instagram,它由 Python 基金會所擁有, 它本身也是開放源碼的專案,因此不必擔心被特定廠商綁死,雖說是次世代語言,但已經 有二十年歷史,因為一路不停開發演進,因此跟得上時代的潮流,它的開發改進方式是由 任何人在一個叫做Python Enhancement Proposals66的列表上發表對 Python 改進的提案,經 由社群審查討論,最後由 Python 的發明者 Guido van Rossumr 決定,因此比起某些程式語 言放任任何參與的開發者隨意開發導致混亂的狀況,Python 在改進的同時能夠有一致的方 向與遠景,它的標準函式庫相當齊全,大多數常用的功能都有提供,它有非常活躍的社群, 有龐大的第三方開放源碼資源,並不限於只有網頁開發,從網路程式、科學計算、桌面應 用程式、伺服器管理等等一應俱全,這個社群非常重視可讀性與文件並引以為傲,因此大 部份的第三方資源都附有精美且完整的說明文件,程式碼也容易閱讀和修改,因為是動態 語言,它除了能夠跨平台運行,不管是 Windows、Linux、Mac 都不需要太多的修改,大 多第三方函式庫也都可以直接引用不需要編譯,如果需要引用 C/C++ 語言所寫的函式庫, 它也可以讓你包裝成 Python 模組引入使用,在過去幾年內台灣使用 Python 的人數很稀少, 但最近有越來越多新創的公司開始使用,並且開出不錯的薪資條件,因此不管是對於個人 職涯或是團隊開發,這都是一項值得考慮的選擇。
66http://www.python.org/dev/peps/
￼
開源篇 50 寫部落格
寫部落格是加法思維的典型體現,近來在台灣也越來越盛行,但風氣還是有許多成長的空 間,寫部落格有很多好處,從工程師個人的角度看來
• 驗證並整理自己所學
• 提升自我職場上的曝光度 • 提升自我聲望
• 提升寫作能力
寫作的過程中其實就是一直不停地整理並驗證自己所學,當自己的認知有所矛盾時,寫出 來便一目瞭然,隨時間流逝,許多時候自己以前所學可能也未必能夠全部記得,部落格也 可以有筆記的作用,對於求職來說一般也都有加分效果,只要看一個人部落格其實可以看 見他的學習歷程,可能會比單純的學經歷來得有說服力,如果寫得不錯可以累積讀者,在 工程師社群裡也可以得到一些聲望,在這個過程中也可以順便提升寫作能力,撇開自身的 角度,對於整個社群來說,技術的交流更頻繁,整體的能力也會因此有所提升。
在國外其實以公司角度寫部落格分享經驗與心得也是很常見的事情,以公司的角度來看, 寫部落格可以
• 提升使用者對產品的信任
• 提升公司對於求職者的曝光度 • 給予求職者瞭解公司的機會
• 培養潛在的客戶
一間公司可以透過部落格,介紹他們的產品、服務使用了什麼樣的技術,或是管理上有什 麼樣的經驗、公司有什麼樣的文化,這些其實對於使用者來說多少都有正面的影響,因 為這些文章呈現了這是一間專業的公司的印象,在介紹這些知識的過程中,也間接提升 了對於求職者的曝光度,同時也讓求職者有機會瞭解到這間公司的文化、用到哪些技術, 除此之外技術類型的公司也可能因此獲得新的客戶,網路上有個很好的例子就是來自瑞 典的線上音樂串流公司 Spotify,他們寫了文章介紹Spotify 如何建構他們的產品67(中文翻 譯68),另一篇文章介紹了Spotify 如何在開發團隊越來越龐大的情況下還能保持敏捷69(中 文翻譯70),透過這樣的文章,提升了許多工程師對於這間公司的印象,在尋找人才上也會 是一項加分,Spotify 並不是唯一一家這樣大方分享自家經驗的軟體公司,在國外比比皆是, 相較之下國內喜歡把一些過時的思維或技術視為不傳秘方更顯得視野狹隘 ‧
67https://dl.dropboxusercontent.com/u/1018963/Articles/HowSpotifyBuildsProducts.pdf
68http://zonble.postach.io/spotify- ru- he- da- zao- chan- pin 69https://dl.dropboxusercontent.com/u/1018963/Articles/SpotifyScaling.pdf
70http://zh.scribd.com/doc/148375738/Scaling- Agile- Spotify- %E4%B8%AD%E6%96%87%E7%BF%BB%E8%AD%AF%E7%89%88
￼
開源篇 51 活動,更多的交流活動
除了寫部落格文章,另一個增進軟體產業交流與能力提升的好方法就是舉辦各種相關的活 動,近年來國內有許多基於開放源碼的社群活動,像是COSCUP71,每年參加人數都創新 記錄,還有PyCon72、RubyConf73等等不同主題的交流活動,在國外這類活動已經行之有年, 國內是在近幾年才漸漸盛行起來,這是好的現象,但是依然還有很大的成長空間,像在美 國矽谷這樣的地方,事實上各種不同的技術領域都有相關的活動,其主題細分很多種,應 有盡有,當然台灣的軟體工程師人口總數無法與矽谷這樣的地方相比,但是像是廠商的參 與這方面或是參與的人數、活動的規模、種類、數量其實都還可以有所成長,有更多的活 動,才能有更多的交流機會 ‧
對於軟體廠商而言,這類活動是很好的曝光管道,如果是提供技術類型服務的廠商,那這 類的活動會是很好發掘潛在客戶的地方,就算是其它類型的廠商,在這樣的地方也很容易 發現不錯的人才,在國外這樣的場合進行求職的媒合其實是很常見的事情,很多時候只是 聊幾句就能得到一份工作,可能遠比檢視一百份求職網站上的履歷還來得有用許多 ‧
使用 Github
目前開放源碼的專案,有很大一部份都放在 Github 這一個平台上,針對開放源碼的專案它 提供了免費的 Git 檔案庫,如果有開發團隊想開發非開放源碼的專案,可以付費使用來建 立私有的檔案庫,因為程式碼都儲存在他們的主機上,如果對安全性有疑慮,他們也提供 了可以在團隊自己主機運行 Github 系統的方案,這一個平台之所以如此受歡迎,不單單只 是因為它提供了免費的開源專案檔案庫,他還提供了臭蟲追蹤列表、程式碼複閱、檔案下 載、專案頁面、維基文件等等多種功能,因為貼近開發團隊的需求,使得軟體開發可以不 必煩腦太多這方面的細節,可以更專注在軟體的開發上,正因為它是最流行的開源專案開 發平台,開源軟體開發的過程不管是程式碼、討論等等每個人都可以看得到,開發者的優 劣可以看出端倪,因此許多公司透過這樣的平台來徵才,Github 本身也提供了尋找人才的 服務,對於工程師個人職涯來說,Github 已經像是個人部落格一般值得經營的一個項目, 對公司來說,做為開發的平台也可以減低初期在架設各種專案開發相關系統的時間成本與 負擔,對於找人才也是素質好壞的重要參考來源之一,可以多加利用 ‧
71http://coscup.org/ 72http://tw.pycon.org/ 73http://rubyconf.tw/
￼
經營篇 沒有創投
對一間新的軟體或網路公司來說,從創立到開始獲利需要不少的資本投入,在初期最沉重 的就是人事成本,想要留住好的工程師自然不可能以台灣常見的 22K 等級薪水打發,除了 人事費用,辦公室、水、電和其它行政費用,也會隨著團隊的規模成長,因此一間新創公 司在初期往往會需要募資,管道有很多種,從自己的積蓄、親朋好友到風險投資公司,其 中最關鍵的可能要算是風險投資公司,然而不幸的是在台灣所謂的風險投資公司或是創業 投資公司,所做的事情大多與歐美的風投公司不一樣,在台灣一般的這類的投資公司都會 要求你的公司要有辦法獲利他們才肯借錢給你,說穿了這類業務其實就只是貸款,而矛盾 的地方在於,如果已經能夠自己自足,有穩定成長的獲利,在不尋求積極擴張的情況下, 需要這些公司的資金做什麼呢?除此之外,一間新創的網路公司要成功,並非只要有資金 就可以成功,要知道網路創業所做的事情許多都是從前沒有任何人做過的事情,並非只是 另外的一間工廠重覆著以往成功的模式用更便宜的成本生產更好的品質這種形式的創新, 成敗與否在早期都是難以預測的,新創公司在摸索階段除了資金也很需要來自創投身為夥 伴關係的各種資源幫助,不管是意見方面的諮詢、人脈的幫助、產業的合作、幫忙尋找下 一輪的投資、尋找人才等等,在台灣未曾有過真正的創投與網路公司成功案例,未曾嘗過 如矽谷那樣獲利百倍、千倍的投資甜頭、又沒有相關的經驗,在這方面理所當然也只能提 供貸款的服務,除了環境先天上的不足,政府法規的落後和對新創網路產業的無知,更使 得這個地方成為一遍荒漠 ‧
因為先天環境上的限制,如果在台灣要創立新的網路公司,除非能有其它的管道找到足夠 資金,否則應該盡量在早期能以類似「精實創業」的方式自給自足,在台灣要先做出成功 的產品再來找資金,相較於矽谷或中國大陸是非常困難的,很容易在半路上就會資金用罄, 創投投資的其實是一個團隊而不是一間公司,先建立能自給自足的堅強團隊是首要目標, 許多團隊在初期甚至靠接案子維生,雖然失去了一些專注在產品上的時間,但是在這樣的 環境下也只能如此。
PayPal 幫
簡而言之,對於軟體或網路產業來說,台灣沒有如歐美的創投,就算有願意投初期的新創 公司,經驗上來說也是嚴重不足的,台灣有成熟的硬體產業,早期的新創硬體公司的創業 者、早期員工、合作夥伴,到了現在他們已經賺足了資金,然而硬體產業也漸漸走入高原 期,利潤低落,很難再有大幅度的成長,這些人瞭解硬體,當他們決定拿出這些錢來進行 投資時自然是選擇他們所熟悉的硬體產業,軟體對他們來說太過陌生,風險也過高,不同 於硬體產業需要廠房和昂貴的設備,軟體產業最重要的資產都是人才,並沒辦法像設備廠 房一樣被人所擁有,當投資硬體產業失敗,或許還有剩下的廠房可以出賣,但網路公司一
經營篇 53
但失敗或受騙,只要人才散盡可能會一無所有,軟體和網路發展的好壞這些人也沒辦法看 出任何差別,因此在台灣所能見到的創投大多都只願意投他們熟悉的硬體產業或傳統產 業。
創業生態的發展其實就像是撒出一把種子一般,在這些種子之中只要有一顆能夠吸取足夠 養份,成長並開花結果,最後就能產生更多種子散播出去,最後長出一遍花海,以美國矽 谷的生態為例,PayPal 幫74就是一個很經典的例子,由Elon Musk75領軍的 PayPal 團隊在成 功將網站出售給 eBay 之後,這些初創的團隊都賺了一筆錢,Elon Musk 本人將這筆錢投入 於知名的電動汽車公司Tesla Motors76並成功開發出熱銷的電動汽車 Model S,他還創立了一 間火箭研發公司Space X77,PayPal 的早期員工陳士駿78、Chad Hurley、Jawed Karim 也共同 創辦了 Youtube,還有太多類似 PayPal 幫這樣的例子在矽谷隨處可見,除了像 Elon Musk 這 樣的例外,大多數在這個產業成功獲得一筆資金的人,往往都會繼續投入在這個產業中, 因為他們瞭解這個產業,知道要如何運作,而在他們上一段經歷中他們也累積了足夠的經 驗,有了相關的人脈,成功的機會也高了許多 ‧
在台灣如果要能夠發展網路產業,最困難的一個環節之一就是創投這個部份,這就有如雞 生蛋、蛋生雞的難題一般,究竟第一顆能成功開花結果的種子和養份要從哪裡來還是一個 未知數,但作者相信只有第一顆種子能開花結果,散播出去的種子很快能注入資金並帶動 整個產業往正確的成功方向前進 ‧
固定成本、高附加價值
在台灣許多人都不瞭解軟體、網路服務的特性和它最大的優勢是什麼,往往都沒辦法發揮 它真正的優勢,其實說穿了很簡單,軟體的開發成本幾乎是固定的,但是隨著規模的成長 它可以創造無限的高度附加價值,而網路服務的成本雖然會隨著使用者的規模成長,開發 給十萬人使用的網站和給一百萬人或甚至一億人使用的網站是不一樣的事情,但只要能建 立對的團隊,這其實都不是太大的問題,開發和營運成本的成長比起使用者人數的成長規 模其實是微不足道的,在技術越來越先進的當下,在歐美很常可以看見兩、三個人的團隊 就能打造上千萬甚至上億等級的服務,可惜的是在台灣從各種網站只要人數多一點就會立 刻當機這點看來,台灣的企業普遍沒有能力建立大規模的線上服務,開發軟體服務最重要 的是如何增加價值,以台灣每年賣出去的筆記型電腦來看就是很好的一個例子,如果筆電 上面能夠搭載實用的加值軟體或服務,產品自然會比較有競爭力,而軟體的加值不像是硬 體會隨著出貨的數量線性增加成本,很可惜大多數台灣的硬體廠商都沒有軟體開發的能 力,或是能力不足,平白浪費了這麼好的機會 ‧
蘋果電腦之所以能夠異軍突起, 其中一個很重要的原因就是他們除了有強大的硬體開 發能力以外,也有強大的軟體、服務開發能力,它最新推出專為 Mac 電腦設計的 OS X Mavericks,是以免費的方式提供,其中還包括了 iWork 系列類似微軟的 Office 系列套裝軟 體,這都是利用軟體來替硬體加值的最好實例,除了軟體,在其背後的iCloud79提供了所有
74http://www.inside.com.tw/2012/07/12/former- apple- employees- performances 75http://en.wikipedia.org/wiki/Elon_Musk
76http://www.teslamotors.com/
77http://www.spacex.com/
78http://zh.wikipedia.org/zh- tw/%E9%99%B3%E5%A3%AB%E9%A7%BF 79https://www.icloud.com/
￼
經營篇 54
裝置儲存同步等等各種服務,使得這些產品又增加了更多的價值,這些增值都是以降低成 本為傲的台灣廠商所無法競爭的,因為再怎樣降價都有極限,而價值的增加卻沒有上限, 在台灣的硬體廠商如果再不學會如何以軟體服務來增加產品的價值,一心只想著降價,相 信很快只會被時代淘汰。
軟體即服務
隨著網路的快速發展,軟體和服務的界線已經越來越模糊,到後來幾乎都已經是以「軟體 即服務」的形式在提供軟體,在台灣許多人的心中,對軟體的印象還留在商店架上的一個 紙盒,買回家裡面有光碟讓你安裝的套裝軟體,在歐美那都已經快成為過去式了,現今已 經有越來越多的軟體是以網路服務的形式提供,不管是記帳、資料分析、客戶服務都是如 此,現在矽谷的新創軟體公司,當他們的網站需要流量、載入速度分析,他們會訂閱New Relic80的服務,當他們需要記帳,他們會購買Xero81的服務,當他們需要客服管理,他們可 能會購買UserVoice82的服務,諸如此類,考慮到網路延遲的問題,套裝軟體依然有其需求, 只是軟體即服務的形式會越來越流行,在台灣經營軟體公司也應該重新思考軟體即服務的 可能性。
國際化與在地化
在台灣,大多數的軟體服務經營者都將市場鎖定在台灣本島,如同我們先前所提到,軟體 最大的優勢是以近乎固定的成本服務大規模的客戶,台灣的市場小而精美,除非是較為大 眾化的產品,否則很容易發現辛苦經營許久,但是陷入連開發團隊都無法養活的困境,在 台灣軟體服務要能成功,只靠本土市場一定會受到很大的限制,唯有放眼全世界走出本島 才有成功的機會,然而因為網路無國界的特性,想要走出這個地方,就得面臨來自世界各 地強者的競爭,在那裡才是真正的戰場,許多人或許會抱著無所謂的心態,認為國際的競 爭與我無關,但事實上從國際競爭對手走入台灣都只是遲早的事情,當一個網路服務如果 在各國市場開發都呈現飽和狀態,當然最後也會走到台灣來,因此如果不是台灣的業者自 己走出去,就是國外的企業殺進來兩種選擇。
一個網站和產品要國際化、在地化,最基本的就是語言上的問題,兩個程序前者是將軟體 裡的文字取出和準備支援各種語言,後者是將取出的文字翻譯成各種當地語言與針對當地 市場進行調整,不幸的是在台灣大多數軟體公司都還在使用過時的技術,對於國際化的支 援不足,或著是沒有國際化的經驗,很常可以發現台灣的網站許多都有英文選項,但是進 去後所能看到的都是殘破不全的網頁,與中文版的網頁相差甚遠,這在第一步就踩不穩了, 翻譯各種語言其實是成本低高報酬的開拓國際市場方式,一個網站因字數一般不多,找翻 譯社翻譯下來花不了多少成本,但是對於開拓使用者市場來說卻非常有幫助,因為一個非 英語係國家裡能無障礙讀懂英文的人其實只佔了一小部份 ‧
80http://newrelic.com/ 81http://www.xero.com/ 82https://www.uservoice.com/
￼
經營篇 55
想要成功的國際化一項產品,一個很重要的重點就是在產品規劃的一開始就把這點考量進 來,許多人喜歡將文字以圖片的形式在網頁上呈現,像這樣的方式就會造成國際化過程中 的困擾,因為圖片裡的文字沒辦法輕易利用程式工具取出,可能得變成針對不同的語言各 產生一張圖片,如果產品已經已在地語言發展了好一陣子,此時再來想國際化通常已經為 時已晚,得付出很大的成本和對原本產品的更動才有辦法支援各種語系,為了能夠盡早讓 產品開發適應國際化,最好以英文為主要語言進行開發,這樣做有一個好處,一來是避免 翻譯過程中英文受到中文影響而翻成中式英文,再來是英文翻成各國語言都比起中文翻各 種語言還來得容易找到人,而消除了語言障礙其實還稱不上是完整的在地化,因為每個國 家的國情文化不盡相同,好的在地化還會針對當地情況進行不同的細節調整,像是使用的 介面上、產品訂價等等,然而當服務的性質扯到實體的業務時,在地化的難度就更加提升 了,因此在產品服務的構想當初,有許多人都會把是否能輕易地國際化、在地化納入考量, 否則最終還是只能受困於島上無法向外發展 ‧
國內有一個網路服務產品Logdown83就是一個值得讀者參考的例子,它是一個針對技術部 落客開發的部落格平台,因為細心滿足這方面的需求,所以很受到技術部落客歡迎,這個 產品在一開始就以全球市場為目標,提供了多國語言的版本,目前已經有四成的使用者來 自世界各地,並且快速成長之中,同時也有不少願意付費的使用者,且已經開始獲利。
83http://logdown.com
￼
體驗篇 軟體是服務業
軟體產業雖然頂著高科技的光環,但是比起硬體產業,它其實更像是服務業,軟體和網路 服務的目的最主要都是服務人群,不同的是,一間飯店、餐廳能服務的最多不過幾百人, 但是軟體服務能夠由少數幾個工程師來服務來自全世界各地數千萬甚至上億人,這也是為 什麼軟體工程師在歐美國家能有這麼高的待遇,在台灣軟體常常只被視為是解決問題的工 具,其產生的結果只有可行和不可行,這其實是台灣的軟體產業失敗的眾多原因之一,一 個軟體服務的好壞其實是有很大的差異,並非只有二元的結果,對於消費者導向的服務而 言,最重要的莫過於使用者體驗,使用一項軟體服務就像是去一家餐廳吃飯一樣,並非只 有吃飽和吃不飽兩種感覺,一家餐廳從門口、招牌、店名開始就讓客人開始體驗,體驗的 好壞從菜色的好壞、服務的品質到各種細節都會影響到客人最終的評價,軟體其實也是一 樣的道理,一個手機 App 從商店的陳列給的第一個印象、標價、描述,到下載、學習和開 始使用,不管是使用者介面,和軟體的穩定性、功能性,每一樣都讓使用者體驗,很多時 候賣給使用者的並不是一個工具,而是一個體驗,如果兩個軟體服務都能滿足需求,使用 者自然是選擇體驗較好的那個,最重要的反而不是功能強不強大等等無關緊要的問題。
服務業在台灣發展得很好,不幸的是,在台灣軟體設計出來的體驗往往都是很糟糕的,在 使用的過程中都可以感受到設計者對於使用者的不在乎與不尊重,舉例來說從一個網站使 用者的註冊開始就可以感受到濃烈的敵意,在台灣設計者往往為了市場調查等等需求,喜 歡在註冊時要求使用者輸入一大堆無關緊要的資料,看過最誇張的是使用者必需輸入血型 才能完成註冊,這就好比進如一家餐廳前還得經過身家調查一樣離譜,除此之外也很常見 到許多電子商務網站的設計停留在數年前從未有任何改進,甚至有些搜尋功能形同虛設, 同樣的商品標題站內搜尋找不到反而要到 Google 才找得到的誇張情況,許多網站在使用 者人數過多時服務會停擺也都已經是家常便飯,數年過去同樣的問題一再發生也未見任何 改進,這些都顯示出業者對於使用者的體驗毫不在乎,就好像方圓百里內就此一間客棧似 的。
在台灣軟體之所以不重視體驗,最主要是因為現有的產業幾乎都是以業務為導向,不管是 電子商務,軟體開發承包商,對於這些服務來說很多都是在低度競爭或壟斷的環境下所生 存,外包的專案完成後,不管好用與否,都與成敗無關,自然沒有人會在意使用者的體驗, 在桃花源的太平時代確實無所謂,然而當全球化的競爭越來越激烈,國外的市場都開發成 熟時,這些人進軍時很可能就是不求改進者的末日。
專注做好一件事
專注做好一件事,講起來簡單做起來難,常見的軟體開發者犯的錯誤,就是過於貪心,一 口氣在軟體上增加各種各式各樣的功能,期待使用者會喜歡,但其實使用者平常大部份時
體驗篇 57
間會使用的可能只有這些所有功能中的百分之二十,因為軟體增加了過多的功能,原本使 得應該簡單可以使用的介面變得過於複雜,對使用者的體驗會有負面的影響,近來設計的 理念有了很大改變,對於設計,從前有人說過這樣一句話
多即好(More is better)
但後來人們發現,太多選擇其實並不一定是好事,很多時候過多的選擇反而是一種負擔, 舉一個誇張一點的例子,當你走進牛排館,當服務生問你要加什麼醬時提供了一百種選擇, 難道客人會因此而覺得開心嗎?在選擇這些醬的過程,光是看完一百個選擇就花掉了不少 時間,從名字或菜單上的資訊想像醬的味道又是另一個費時的過程,當你花了這麼多心力 去做出選擇,你期望它應該會物超所值,然而結果的改善往往都沒有多少,心理學家 Barry Schwartz 就曾在 TED 發表標題為談選擇的癱瘓84的演講,講的就是這樣的概念,他說沒有 選擇是痛苦的,但太多選擇也是痛苦的,對軟體來說這些多餘的選擇的本質都只是負擔而 已,不只是對於使用者的負擔,對於開發者更是,不必要的多餘功能造成更多的開發成本 浪費,更增加了專案失敗的風險,後來就有人提出了不一樣的設計理念
少即多(Less is more)
少即多的意思就是透過取捨,盡量刪減不必要的設計來增進使用者的體驗,蘋果電腦的產 品就可以看到這樣的想法,很少的按鈕、很簡單的介面,設計的本質就是取捨,做為設計 者都想盡可能滿足所有的人,但是那是不切實際的事情,好的設計者,能夠刪減許多不必 要的元素,但又能同時考慮到各種使用情境,這才是設計困難的所在,毫無節制地增加人 人都會做,但是取捨並非所有人都能做好。
在規劃上過於貪心不懂得節制,不只發生在台灣,也發生在國外,不久前曾有一家新創事 業 Do.com,他們的產品希望能夠一口氣整合雲端硬碟、筆記、即時聊天等等各種功能,這 個事業存活了兩年後隨即宣告結束經營85,原因不外乎就是過於貪心而讓產品失去了焦點, 同樣的錯誤不只是新創的事業會犯,Google 也曾推出 Wave,號稱整合社群網路、檔案分 享等等各種強大的功能,這樣失去焦點的產品,即使資本雄厚、菁英如雲的網路巨頭公司 也是以失敗收場,更不用說是一般的公司,同樣的錯誤也很常見於遊戲、電影等等產業, 常常可以看見有些作品號稱做了數年、耗資數億元,但成果品質差強人意、市場反應冷淡, 最後以失敗收場,這些實例都顯示出了「專注做好一件事情」的重要性。
惡魔都在細節裡
如同很多產業,軟體開發的惡魔也都在細節裡,特別是使用者經驗,把經營軟體服務當成 經營一間餐廳,端上來的菜餚裡有一根頭髮可能之前辛苦經營的體驗都毀於一旦,使用者 體驗的競爭也都是在細節之中,以購物網站來說好了,網站的載入速度影響到使用者購買 的機率,購買的流程簡單與否也影響其結果,使用者體驗在主要的項目都滿足使用者之後,
84http://www.ted.com/talks/lang/zh- tw/barry_schwartz_on_the_paradox_of_choice.html 85http://www.inside.com.tw/2013/10/28/its- hard- to- keep- it- simple
￼
體驗篇 58
其實還有很多小細節可以改善,舉個例子,當一個網站的表單裡面有一個國家的選項,一 般國家列出來都有一百多個,當國家的名稱是英文,使用者可以按英文字母 T 來快速跳到 T 開頭的國家,以方便找到「Taiwan」,然而有許多網站在進行中文化以後,國家的名稱 都顯示成了中文,因此當使用者想按 T 來快速找到「台灣」這個選項就沒辦法做到了,依 字母開頭尋找也不是那麼容易,使用者被迫在一百多個國家的中文名稱之中找到台灣兩個 字,這事實上是一件討人厭的事情,如果使用者有足夠的耐心,他終究可以找到並選擇, 然而像這樣的小地方正體現出了服務的開發者是否有真正用心站在使用者的角度思考,處 處替使用者著想,這樣的細節其實有一個簡單並且可以解決問題的辦法,在顯示中文的同 時,於選項的開頭也顯示英文名稱「Taiwan - 台灣」,這樣一來選項照字典順序排列,使用 者可以按 T 或快速找到 T 開頭的國家。
這只是一個對於使用者體驗的不起眼小細節,許多人往往會因為認為是細節所以不重要, 當時間很有限確實應該以更重要的體驗改善做為優先處理的項目,但是當有餘力時,應該 想盡辦法去滿足使用者,令使用者滿意的體驗不只是主要的改善,還有很大一部份其實是 透過各個小小細節積沙成塔累積而成,很多時候兩個網站一比較,使用者自己也說不上來, 某個網站就是比較好用,就是來自連對於小細節都不放過的用心。
被忽視的視覺設計
比起操作上的使用者體驗,其實使用者更早接觸到的是視覺的體驗,一個網頁開啟第一眼 看到、一個 App 的圖示在列表上被看見,這些都是屬於視覺上的體驗,人類確實是以貌取 人的生物,比方說在選購筆電時,如果所有選項規格都差不了多少,但其中一台特別好看, 自然會贏得消費者的購買,甚至規格上較差,許多人還是會選擇外形較好看的那一台,因 為當你在外面拿出筆電來使用時,這台筆電的外表就好像是在告訴大家你是什麼樣的人, 蘋果電腦的產品之所以成功,其中有一個很重要的因素之一就是他們花了非常大的心力在 於改善這些產品的視覺體驗,對於軟體產業來說視覺體驗也是兵家必爭之地,頂尖的視覺 設計師在歐美的待遇並不會比軟體工程師還要差,然而軟體的視覺設計和一般的平面設計 差異在於軟體是被使用的,設計者除了在考量好不好看的因素以外,還得一併考慮使用性 的好壞,人機介面和使用者體驗的設計在國外很多公司已經獨立專門的職位,在台灣視覺 上的設計許多還停留在十幾二十年前的時代,可以看出許多人還是在用平面廣告等等的設 計經驗直接套用在軟體的設上,其實光是一個字型在印刷品和螢幕上就有不同的差異,放 在公共場所的指示板上也有不同的考量,桃園機場就因為在指示板上使用新細明體86造成 體驗不佳的情況,由這些小地方都可以看見普遍都缺少對於細節的追求。
台灣總體視覺設計的能力其實並不差,但是要運用在軟體的開發上,最困難的是設計師得 瞭解軟體,舉例來說,當一個設計師設計網頁時他可以在 Photoshop、Illustrator 繪圖軟體 上天馬行空,畫出任何他想要的畫面,然而網頁並非像是一張畫布,可以輕易地畫出任何 你想要的東西,一個網頁必需考量到使用性的好壞,還得考量到技術的限制,像是載入的 速度、螢幕的大小、瀏覽器的支援程度,現今行動裝置的普及使得HTML587、CSS388成為了 主流的技術,如果一個視覺設計師缺乏對於軟體方面技術的認知,縱使再有天份和經驗也
86http://blog.justfont.com/2013/10/airport- pminliu/
87http://zh.wikipedia.org/zh- tw/HTML5 88http://zh.wikipedia.org/wiki/%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8#CSS3
￼
體驗篇 59
很難百分之一百發揮在軟體開發上,一個退而求其次的方法就是由視覺設計和軟體技術人 員緊密合作,然而視覺設計師在不瞭解技術限制的情況下,加上溝通上的隔閡,除了沒效 率以外,最終呈現的結果無疑的會因此而打折扣,因此同時有視覺設計能力又有相關的軟 體技術能力的設計師在這個產業裡是非常搶手的人才,在台灣最缺少的就是像這樣的設計 師,想要增加這方面的人才供給,或許可以嘗試增加視覺設計和技術領域的交流。
聆聽來自使用者的聲音
對於一個成功的軟體或網路服務來說,很重要的環節就是去聆聽來自使用者的聲音,在高 級的餐廳用餐,當客人對餐點或服務態度不滿時,都會向餐廳抱怨,軟體和服務的使用者 也是一樣,但不一樣的是他們不能招手找來服務生說「我要見你們的經理」,軟體的意見 回饋對許多使用者來說並非是很直覺的事情,他們首先得找到反應的管道,在台灣有很多 網站似乎很不喜歡看到來自使用者的意見,都將反應的管道藏得很好,甚至有些根本沒有 任何管道,當使用者有怨言或建議時,他們自然不可能花這麼大的心力只為了抱怨,要知 道願意花時間反應的使用者其實是很珍貴的,大部份人都會默默地投向服務品質較好的競 爭對手陣營去,除非使用者別無選擇,因此一個好的軟體服務提供者,應該要想辦法讓意 見反應變成一件很簡單的事情,並且用心去聆聽使用者的聲音,除了聽取意見之外,恰當 的回覆也是對於使用者一種尊重的表現,如果使用者花時間寄了一封信告訴你們應該改善 的缺陷,寄出後音訊全無,使用者會認為他的意見一點都不受到重視,相反的,當你用以 客為尊的態度回覆來信的使用者,告訴他們你們怎樣看待這樣的意見,會如何進行改善, 最後致上由衷的感謝,雖然只是不起眼的一封回信,但對使用者來說他們感受到了你的誠 意,也自然願意幫忙推廣你的產品。
聽取使用者的方法有很多,最簡單的可以提供電子信箱,或一個簡單的表單讓使用者填寫 意見,如果需要更進一步的意見追縱和管理系統,可以考慮使用一些現成的客服系統服務, 例如UserVoice89、Zendesk90,每個月只要付出一些租金就可以免去自己打造一套客服系統 的成本,何樂不為?
89https://www.uservoice.com/ 90http://www.zendesk.com/
￼
尾聲
知名的軟體工程開發的經典書籍人月神話曾提出一個觀點
  沒有銀彈
他所想表達的是沒有任何一個技術或方法可以保證軟體開發的成功,軟體開發是困難的, 在此書提到的各種技術與方法也只是當下眾多選擇之一,並不一定可以適用於所有團隊和 所有情況,再者電腦才經過半個世紀的歷史,各種想法與技術仍在快速改變中,或許在此 刻這些看起來還算跟得上時代的東西不久後都已經過時,盡信書不如無書,比起照本宣科, 對讀者更重要的是自己思量什麼才是對的,在台灣其實有許多優秀的團隊,他們做法與思 維甚至可能比本書提到的這些還要先進,也有不錯的成績,在這樣的環境能建立頂尖的團 隊實在令人佩服,就像是在荒漠裡栽出樹苗一般驚豔,只是令人擔憂的是普遍所見到的情 況是非常落後且原始的,電腦書店裡的書架似乎就是少了這樣一本書,探討產業裡的各種 問題,相信在這產業裡其實臥虎藏龍,還有更多人能提出更有幫助的見解,用加法思維來 改善這惡劣的環境,這裡的人可以選擇矇上雙眼假裝看不見世界的潮流,繼續沉溺在先前 的美夢,亦或是承認自己的弱點,思考如何改進,這本書講的不是什麼先進的知識,對許 多人而言早已是常識,但就像是中國大陸的工程師喜歡講的
拋磚引玉
如同網路改變一切產業,它也徹底改變了出版業的生態,在以往一本書從編寫、編輯、校 閱、印刷、上架要花漫長的時間,現在都可以一個人完成,而且可以盡早發佈,在寫書 的早期就獲得讀者的回響,像是「精實創業」裡所寫的「最小可行產品(Minimum Viable Product)」,這本書從開始寫到出版不到數週時間,而且在上架之後還可以持續擴增與改進, 這在不久之前還是難已想像的事情,如果讀者有興趣,也可以自行透過Leanpub91出版,相 關的經驗可以參考「電子出版 Rails 101 的兩年來的一些數據92」這篇文章。
此著作參考了許多來自各種不同書籍的想法與概念,讀者如果有興趣可以自行閱讀,像 是「人月神話」,是關於軟體工程的經典書籍,雖然已經有二十年的歷史,但是歷久彌 新;「Peopleware:腦力密集產業的人才管理之道」此書講述軟體開發對於人才的管理,不 能理解軟體工程師到底在想什麼,他們想要怎樣被對待,如何找到對的人,這本都是值得 一讀的好書;「約耳趣談軟體」,是 Joel 談論關於軟體開發的各種面向的書籍,本書也受到 不少的啟發與影響;「深入淺出軟體開發」一書用淺顯易懂的方式告訴你如何進行軟體開 發,也是值得一讀的好書;「REWORK」是美國的知名生產力軟體服務公司37Signals93的著
91http://blog.xdite.net/posts/2013/06/03/rails- 101- some- data 92http://blog.xdite.net/posts/2013/06/03/rails- 101- some- data 93https://37signals.com
￼
尾聲 61
作,這間公司人數不多,但是生產的網路服務產品大多都很成功,書中的許多與思想都對 於中小型的軟體開發團隊有很大的幫助;「精實創業」一書透介紹務實的方法循序漸進地 一步一步開發打造成功的產品,是對於大型企業想進行創新或是創業者、領導者值得一讀 的好書;「Venture Deals: Be Smarter Than Your Lawyer and Venture Capitalist」這本書告訴你 歐美的風險投資公司到底是怎麼運作的,告訴你如何從創投那裡募到資金,並打造成功的 事業。
有的思想除了來自親身體驗,也來自網路上不同的文章,不勝繁舉,無法一一列出,但 這顯示出了大量閱讀的重要,讀者如果想跟上國際網路業界的新鮮事,可以閱讀Hacker News94,國內也有許多不錯的部落格,像是Inside95、TechNews96、有物報告97。
最後,在未來軟體和網路會改變所有的產業,這樣的改變只會越來越快速、越來越劇烈, 當軟體滲入生活中的每個角落時,不能改變者只有被淘汰,你是打算被巨浪淹沒,亦或是 當一個乘浪者呢?是時候做出決擇了。
￼94https://news.ycombinator.com 95http://www.inside.com.tw 96http://technews.tw 97http://yowureport.com
