# 第一章：一定要懂的 HTML5 技術

HTML5 不只是技術，它是 Mobile + Cloud 的全新時代。HTML5 重新發明了 Web，現在的 Web 已不同以往。對完全不懂 HTML5 的創業人，本章內容將對您有很大的幫助。  

做為行動裝置第二時代的軟體人或創業家，HTML5 技術是不能不懂的名詞。本章由技術層面切入，解讀 HTML5 的技術概念。特別是非技術本科系的讀者，本章的內容，以及本書接下來的內容，將會帶給您許多的啟發。

## HTML5 的 Runtime 是瀏覽器

廣議上的HTML5必須搭配許多技術來綜合應用，所以HTML5倒底怎麼跟這些技術搭配、HTML5的軟體開發思想是什麼，以及HTML5應用程式的設計原則為何？

HTML5 來了。什麼最重要：Browser 最重要。因為所有 HTML5 App 都在 Browser 環境裡執行，所以，HTML5 App 的 Runtime 就是瀏覽器。

Runtime 是執行環境。過去應用程式都是在作業系統平臺上執行，並且採用 C/C++ 程式語言編寫，我們便將這類型的應用程式稱為 Native Application，即主動式應用程式，代表應用程式被編譯後（Compile）就是一個可主動執行的執行檔。

接下來 Android 出現後，帶動一個以 Java程式語言來開發App的風潮。Java 程式語言早在 Android 問世前就已經被發明出來，雖後在 Android App 的年代人氣達到頂峰。利用 Java 程式語言編寫的應用程式，都需要 Java 虛擬機（Virtual Machine）才能執行；Android 的 Java 虛擬機稱為 Dalvik VM。所有以 Java 撰寫的 Android App 都在 Dalvik VM 上執行，它是由虛擬器來管理並直譯，不能主動執行。

可以這樣想，第一代的 App 使用 OS 做為 Runtime。第二代的 App 使用 Java Virtual Machine 做為 Runtime，例如：Android。第三代的 App 將使用 Browser 做為 Runtime。所以，Runtime 就是個關鍵技術。以前沒有掌握好 OS 沒關係，過去沒掌握好 VM 沒關係，現在還是沒掌握好 Browser 技術，就很有關係了。

同時，過去桌面電腦(PC)的瀏覽器，正快速往手機裝置移動。 各家軟體大廠無不加碼研發人才，努力打造一個能完全相容 HTML5 的瀏覽器，在 2012 年10月份現身的 Windows 8 Mobile Phone，也在 HTML5 做了很大的改進。2012 年，更傳出 [Facebook 有意購併老字號的瀏覽器開發商 Opera][1]，這個傳言最後沒有成真，但顯示了瀏覽器在行動裝置產業的重要性。

[1]: http://www.techbang.com/posts/9559-facebook-to-buy-opera-browser "Facebook 要買下 Opera 瀏覽器，為自家瀏覽器預做準備？"

HTML5 成為移動網路的標準已經是既定的事實了，唯一的關鍵是它的普及性。而行動瀏覽器技術，直接決定了 HTML5 的普及速度。這會是科技業的大盛宴，當行動瀏覽器成熟，並且安裝到每一台行動裝置上時，HTML5 將開始展現它的強大影響力。這個的影響力的層面相當廣，它會普及到各行各業。

所有的行業，都需要雲端做為媒體，將資訊與服務Web化，Web化後都能整合到行動裝置上。在行動裝置上，可以使用瀏覽器來使用這些資訊與服務。很明顯地，HTML5 的影響力將遠超過當年的 Android。

當年的 Android 作業系統，還不算是各行各業的事情。但是，HTML5 將影響到科技業、銀行業、出版業、遊戲業等等，數都數不清的行業別都將因 HTML5 起變化。將透過雲端將資訊與服務，傳遞到手機上的行業，都需要 HTML5。

所以，從產業的角度來看，「HTML5 = Mobile + Cloud」，這很簡單地說明了一切。從技術上來看，瀏覽器也是非常重要的「通路」，因為掌握了瀏覽器，等於控制了使用者的手機。瀏覽器開發廠，可以在瀏覽器「內置」一些資訊與服務。在瀏覽器內置服務，這一想就知道是多麼可怕的一件事情，這比起當初微軟在其作業系統裡內建IE瀏覽器還可怕。

接下來的幾年，科技業的主流發展趨勢，幾乎正式抵定了，就是「手機、行動瀏覽器與雲端應用」。各大瀏覽器與 HTML5 的相容性，成為相當重要的指標。因運而生的網站 html5test.com 可以幫助我們了解瀏覽器的 HTML5 相容性。

根據 html5test.com 的測試報告，桌面瀏覽器 (Desktop) 平均分數仍然領先行動 (Mobile) 瀏覽器，可見 HTML5 行動瀏覽器，仍有很大的發展空間。

目前在桌面瀏覽器的部份，來自北京的 [Maxthon 瀏覽器以 476 分取得第一][2]，領先第二名的 Chrome 29。在行動瀏覽器方面，Opera 目前是市佔率的龍頭，在 html5test 上的分數也佔於領先地位。不過，尚未正式發表的 Tizen 目前也突破了 400 分大關，是值得留意的潛力股。

[2]: http://html5test.com/results/desktop.html "2013 年 10 月份的數據"

## 從 Chrome 瀏覽器談起

Android 版的 Chrome 瀏覽器出現了，Chrome 是 HTML5 發展史的一個重要指標。預計今年 HTML5（Chrome）將全面走入各式產品，這宣告純硬體時代正式結束了。未來的產品，少了軟體與雲端的加持，將顯得平傭而無奇。純硬體能走進市場的機會，只會越來越少。手機肯定首當其衝。特別是 Android 版的 Chrome 瀏覽器現身了，它將引發新軟體革命嗎？

我們知道，雲端應用目前有二大龍頭：Google 與 Facebook。Google 老大哥的 Gmail、相簿、位置服務等，儼然成為一項民生必須品。Facebook 則是在社交網路（Social Networking）領域獨佔鰲頭。他們都是網路巨擎，也都是以平臺（Platform）的概念經營。平臺的概念是什麼？簡單說，就是提供開發者 API 服務。

## 理解平臺的概念

平臺是一個很容易理解的概念，就像大家手上的手機，裡頭安裝了許多使用到 Google 以及 Facebook API 的 App；這些 App 都會透過「雲端」，存取其服務。iPhone 與 Android手機裡的這些「雲端 App」，所使用到的核心技術，就是 HTML5。這代表著，[只要 HTML5 的規格能開始推出草案][3]（Draft），並且手機上的 HTML5 瀏覽器技術更加成熟，手機行業將會展開一場 HTML5 大戰。

[3]: http://www.jollen.org/blog/2012/02/html5-evolution.html "該來的終於來了：HTML5大戰拉開序幕"

HTML5 大戰就是雲端運算的戰爭，這肯定是新一波的軟體革命。以 HTML5 技術，結合網路服務、開發 App，並整合至手機，將成為顯學。

所以，筆者認為，Android 版 Chrome的到來，從產業的角度來看，肯定是一個重要指標，具有特別的意義。它將帶領 HTML5 往前衝刺。其實，Chrome 很早就是 HTML5 的領頭羊了，例如：早在 2010 年，Google 就宣佈以 [HTML5 取代 Google Gear 技術][4]，從這裡可見一斑。

[4]: http://www.ithome.com.tw/itadm/article.php?c=66509 "Chrome 12將正式以HTML5取代Google Gear"

我們可以這樣假設：有了 Chrome，雲（Cloud Computing）就更容易放進裝置裡。正因為如此，所以 Chrome 的出現，有了 HTML5 大戰的煙焇味。Chrome 將加速雲端應用走進手機 App，所以手機不能只有硬體功能，硬體廠將面臨新的一波挑戰。

## 從 Web Page 到 Web App

現在，我們可以使用 HTML5+JavaScript 來編寫應用程式，並且以瀏覽器來瀏覽。因此，HTML5 應用程式，說白了就是一種 Web 應用程式，透過瀏覽器來「瀏覽」它。這種使用案例已經存在已久，例如：用瀏覽器打開 Gmail 應用程式，收發郵件。所以，HTML5 應用程式並不是新鮮技術，就是我們所熟悉的 Web 應用程式。

Web 應用程式的執行環境就是瀏覽器。以 Web 技術來製作應用程式的概念、價值與優點就不必多說了，例如：跨平臺、跨裝置等等，就是大家熟悉的優點。試想，不管我是用個人電腦、手機或平板電腦，甚致是電視，只要有瀏覽器、有網路，就可以隨時隨地收發 Gmail。正因為這樣的優點，Web 應用程式有相當大的優點，以及潛在的商業價值。而 HTML5 就是 Web 應用程式的標準，這就是為什麼 HTML5 將成為主流技術、為什麼 HTML5 會走紅，以及為什麼各行各業的每個人，都要學習 HTML5 的原因。

## HTML5 時代來臨

HTML5 的前身，其實是一份稱為 [Web Applications 1.0][5] 的網路標準草案，HTML5 的用途，不言而諭。HTML5 的身世說來可憐，在 HTML5 標準制定將近七年的時間，不太被網路界重視。還好，蘋果已故執行長 Steve Jobs 的高膽遠矚，讓 HTML5 在 2010 年有了強出頭的機會。這是大家知道的知名事件，Apple 官方宣佈不支援 Adobe Flash。

[5]: http://www.whatwg.org/specs/web-apps/2005-09-01/ "Web Applications 1.0"

HTML5 希望未來網路世界，有更加豐富的 Web Applications，這個願景即將成真。有二個原因。第一、HTML5 第一個正式的候選草案版本，將在今年，也就是2012年推出，這代表所有的瀏覽器 (Broswer) 軟體製造商，將會有一份可共同依循的開發標準。這就是業界的鐵則，任何技術標準化後，都能成為「產業標準」。科技業不用懷擬，HTML5 時代來了。

第二個原因、手機。HTML5 是標準的乞丐命、皇帝運，當初提出 HTML5 建議的 Opera Software 萬萬沒想到，2010 年 Steve Jobs 公開支持 HTML5，2011 年智慧型手機又大爆發，這些 iOS & Android 手機對於 Web 的熱切需求，促使 HTML5 有了大躍進的發展。我們不用再懷擬，這一切來的很突然，不過都是真的。

另一波的手機與網路革命展開了，產業生態巨變，一波未平、一波又起。前一波，被來勢兇兇的 Android 作業系統敲得頭昏腦漲嗎？還來不及反應過來的話，繫好安全帶，因為 HTML5 來了。

### All in JavaScript 的時代

歡迎來到「All in JavaScript」的程式樂園。JavaScript 過去曾經在動態網頁製作上紅極一時，後來有一段時間，因為開發人員重視 Server-side 技術的程度，遠勝於 Client-side，因此 JavaScript 又迅速沈寂。

2003 到 2007 年這段時間，應該是 JavaScript 最谷底的時候。而後在 2007 到 2009 年，因為Web 2.0 風格網頁，以及 jQuery 的盛行，再度得到開發者的重視。2010 到 2011 年因為 Mobile Native App 的大量流行，使得眾多開發者不再以 JavaScript 做為首選，再度走入低潮。

### 學好 JavaScript 程式語言

但是，HTML5 來了。jQuery 被大量使用在網頁設計上，不管是視覺效果、特效或使用者介面，因為 jQuery 相當便利的開發模式，讓 JavaScript 再度被重視了起來。再加上 HTML5 在後推了一把，JavaScript 儼然成為今年最受矚目的程式語言。所以，JavaScript 是「王者再臨」的最佳代言人。

現在，JavaScript 的主要用途，已經由過去的動態網頁（Dynamic Webpages），轉為開發 HTML5 App 角色；也就是 HTML5 的應用。我們不僅僅使用 JavaScript 製作有動態效果的網頁，還藉助它來開發大量的 UI interactive、使用者體驗的設計，以及最重要的雲端服務整合。

還有一個很重要的應用，就是「JavaScript in Browser」，也就是利用 JavaScript 來增強瀏覽器的功能，最為大家所熟悉的例子，就是 Google Chrome。Google Chrome 為了增強對 JavaScript 的支援與效能，開發了新的 JavaScript 引擎；在日記「HTML5 在手持裝置將開始爆發式成長」就提到了，「JavaScript 引擎的成熟度是關鍵」。

所以，測試 JavaScript 的使用案例（Use Cases）在各大瀏覽器的效能，更為一項重要的工程工作。更進一步地，由於 JavaScript 現在搭配 HTML5 來開發「軟體」，而不只是用來製作動態網頁，所以研究 JavaScript 的軟體設計模式，當然也就變成一門顯學；目前被廣為推薦的就是「Essential JavaScript Design Patterns」一書。

## JavaScript 也能開發雲端服務

時間到了 2012 年，在 HTML5 時代正式啟動的今天，JavaScript 成為軟體工程師的必修語言，也是程式設計初學者的最佳選擇。從去年大約 1.5％ 的使用率，飆升到這個月的 3.3％ 左右的使用率。再者，被熱烈炒作的「雲端運算」概念，現在也可以使用 JavaScript 來開發 Server-side 的雲端服務；這就是近二年爆起的新技術「NodeJS」。

所以，不管是 Client-side 或 Server-side，無論是網頁或雲端服務，都可以使用 JavaScript 一統天下了，接下來「All in JavaScript」將成為軟體開發的主流。雖然 JavaScript 還不是當今最受歡迎的程式語言，但是在「Browser & Cloud」的領域，頗有王者的感覺。JavaScript 無疑是王者再臨的代表。

### HTML5 + CSS3 + JavaScript

JavaScript 之所以在網頁設計上佔有重要地位，很重要一個原因是 jQuery 的流行。jQuery 是一個以 JavaScript 技術開發的框架（JS Framework)，並且簡單易學、又易用。使用 jQuery 讓網頁變得活潑、美觀、又具備高度互動性，是簡單不過的事情了。jQuery 是一個框架，網路上有眾多 JavaScript 程式設計師，為它編寫了數以萬計的插件（Plugings），這是 jQuery 能成功的重要原因。

例如，我想要設計一個有「淡入淺出」效果的「投影片撥放」網頁，利用 jQuery 以及相關插件，就可以在幾分鐘內完成。現在，瀏覽網頁就好像在使用應用程式一樣，就像我們瀏覽 Gmail 時，使用經驗跟應用程式已經不向上下了。所以，網頁不再只是網頁（Web pages），網頁是應用程式了；這就是 Web 應用程式。

## 為 HTML 加入應用程式特性

有哪些技術是 Web 應用程式的主要元素？首先，當然是 HTML 標籤。「以前」，最新版本的 HTML 標準是 HTML 4.0，但是它沒有「Web 應用程式」的特性，意思是說，HTML 4.0 其實不包含應用程式方面的標籤。然而，HTML 5.0 把這部份加入了，所以，HTML 5.0 是真正能支援應用程式特性的 HTML 標籤，HTML 5.0 是支援 Web 應用程式的第一個 HTML 版本。事實上，HTML5 完全就是朝 Web 應用程式的方向去制定。

HTML5 本身是標籤。標籤的核心精神是描述資料（Data），例如：文字內容、圖形、顏色等等，要有互動的 UI、要有動態效果，或是進行計算等「程式語言」的工作，就要在網頁裡加上程式碼，這個程式碼就是 JavaScript。如果覺得寫 JavaScript 很麻煩，jQuery 提供更簡便的方式，讓我們在網頁裡加上這些功能。

所以，要製作 HTML5 應用程式，除了 HTML5 標籤外，也要使用 jQuery，並且也要學習 JavaScript 程式設計。另外，我們也知道，HTML 將外觀樣式（Style）分開了，外觀樣式以 CSS 描述；目前 CSS 的最新標準是 3.0 版。

總結來說，HTML5+CSS3+JavaScript 就是 HTML5 應用程式的靈魂。初學者，就是要先掌握這三大技術元素。

## 經理人要懂的 HTML5 技術名詞

HTML5 不只是一個標準，也不只是一個技術。我們要把它的價值，上升到商業層面。現在的專業經理人，可以不需要學 Coding，但一定要懂這些 HTML5 的名詞，以及這些名詞背後的技術義意。認識這些 HTML5 技術，可以幫助專業經理人，製作出更好的商業計畫書。

### 技術面看雲端

雲端運算（Cloud）也是 HTML5 應用程式的一大重點，沒有了雲端技術，HTML5 應用程式就好像缺了手腳一樣。雲端運算的核心精神，就是把計算放在 Server 端。所以，Server 必須提供「Interface」讓 Client 端存取運算結果。技術上，雲端運算是一種 Client/Server 架構。

不過，筆者認為，傳統的 Client/Server 架構，並不能完全呈現 Cloud 的優點。Cloud 的技術架構，應該是 Device/Server 的概念，而不是 Client/Server。

在 Web 的世界裡，Client/Server 是採用 CGI 或 API 方式溝通。所以Server 提供的外面 Interface，可以有二種方式：

- CGI（Common Gateway Interface）：用於表單資料（Form）的傳送
- API：用來呼叫 Server 的功能

上述二種方式，都是基於HTTP協定來完成。我們可以把網站視為是一個平臺(Platform)，這個平臺提供了 API 讓 Client 呼叫，這就有點像是網站本身就是一個程式庫（Library），而最簡單的 API 形式就是 URL，也就是網址列。例如，Google 本身就是一個平臺，它提供了 Google Search API，如果要呼叫 Google 來搜尋關鍵字「html5」，早期的做法如下：

http://www.google.com/?q=html5&(其它參數...)

只要透過上述的網址列，就可以得到搜尋結果，當然這個結果會是一個 HTML5 的文件(網頁)。行銷界想了一個名詞，來表示以上的概念，這個名稱就是PaaS（Platform as a Service），平臺即服務的概念。

### 重要的資訊交換格式：JSON

筆者借用了 PaaS 行銷名詞，來介紹一個技術：JSON。PaaS 是一個很棒的概念，這就是一種雲端技術。然而，傳統做法，Client 端得到的是一個 HTML5 文件，而不是格式化後的資料（Formatted），這是一個缺點。

如果 Server 回傳的是格式化後的資料，Client 端就可以更有效率地利用這些資料。試想，如果 Google 傳回的搜尋結果是一堆 HTML5，那我們不就還要再去 Parse 這份文件，才能取出真正的結果，然後才能再次利用這些資料（例如：再儲存為 CVS 格式）。

為了解決這個問題，必須要有一個標準，不能大家都用自已的 HTML5 文件，或是自定的格式。軟體工程師設計了一些標準。一開始提出的做法，是制定標準的XML標籤，這樣大家就可以統一文件格式了。但是還有一個問題，就是「資料量太大」。

試想，Server 要回傳二筆資料，這二筆資料都是電話號碼：

- 0911-111-111
- 0900-000-000

然後用XML來表示，就變成：

~~~~~~~~
<Telephone>
   <Item>0911-111-111</Item>
   <Item>0900-000-000</Item>
</Telephone>
~~~~~~~~

這種把資料打腫了才回傳的做法，大大浪費網路頻寬。上面只是一個簡單的例子，現實環境，要回傳的資料可能是一個 10MB 的 XML 文件，結果原始資料可能只有 1MB。這就像，一個好端端的人，硬是被塞進了 9 公斤的肥肉。

要解決這個問題，就要有一個輕量級（Light-weight）的資料交換格式，這項技術就是 JSON。所以，JSON 是 Client/Server 交換資料的一種格式，一種Light-weight data exchange 技術。

還有一些不可不知的 HTML5 技術：

- PhoneGap：Device API 的標準，使用 JavaScript 呼叫 Device API 的好技術，Nitobi 公司是 PhoneGap 的開發商，這家公司現已被 Adobe Systems收購

- WebSocket：HTML5 標準裡的一個技術

- NodeJS：開發專用 Web Service 的技術，採用 JavaScript 語言。專用 Web 服務器是 Cloud 的重要領域。Apache Web Server 是普用型 Web Server，Cloud 需要專用的 Web Service

現在開發專用的 Web Service 非常重要，這是 PaaS 的靈魂。例如，開發股票報價專用 Web Server。過去常聽到的 Web Server，例如：Apache，都是一般用途的 Web Server，用來「host webpages」。

現在 Client 端的網頁是用 JavaScript，Server 端的開發也可以用 JavaScript，Client/Server 通通都用 JavaScript，這是一個「All in JavaScript」的時代。

## HTML5 的概念圖

圖 1.1 等於是把截至目前為止所介紹的內容，做了結論，這就是 HTML5 的世界。圖 1.1 同時也是HTML5軟體開發的起點，這是一張「系統」架構，而不是「應用程式」架構。因為廣意的HTML5包含用戶端與伺服器端；目前的用戶端，大多是行動裝置。所以 Mobile + Cloud 正好表達了 HTML5 中心哲學。

![圖 1.1：HTML5 技術世界的總體概念圖](images/1-1.png)

HTML5 系統架構屬於 Web application 的做法，技術上來說，這是Web導向架構(WOA, Web-Oriented Architect)。圖 1.1 的重點整理如下：

- Presentation 就是 View，也就是 App UI 的部份。用戶端使用 HTML5/CSS/JS 來打造 UI。
- UI 可以透過瀏覽器，來呼叫底層的 Device API。目前這個部份，需要在瀏覽器引擎裡，整合額外的軟體。目前最知名的 Device API 就是：PhoneGap。
- PhoneGap 技術，讓 JavaScript 可以呼叫到 Device API，HTML5 App 使用 JavaScript 就可以控制硬體。可以想像成：透過網頁來控制硬體。
- 最重要的軟體是瀏覽器，它是應用程式的 Runtime。
- 伺服器端以 NodeJS 打造專用的 Application Server。
- NodeJS Application Server 提供 API：即 Web Service。這些 API 採用 URL 的形式呈現，也稱為 Open API、HTTP API 或 Platform API。技術上，正式的名稱為 RESTful API。
- 用戶端呼叫 Server 的 RESTful API 來存取服務。
- NodeJS 使用 JavaScript，但能存取 I/O，例如：資料庫、檔案等。這是NodeJS 的主要特點之一。
- 用戶端使用 JavaScript，伺服器也用 JavaScript，所以開發者，都用 JavaScript 程式語言：這是一個 All in JavaScript 的時代。
- 以 JSON 格式來交換資料，降低頻寬的使用。

### Over HTTP

用戶端與服務器是透過 [HTTP][6] 協定溝通，圖中的所以 RESTful API（圖 1.2）的形式就是 URL。又如以下的例子：

http://www.moko365.com/send?m=hello&u=jollen

伺服器以 RESTful API 形式提供服務，供用戶端呼叫使用。在上述例子裡，URL 包含了 API 名稱（亦稱 Pathname）以及傳遞給 API 的參數，圖 1.2 是這個例子的說明。前面的部份是 API，問號後接的就是 API 的參數，稱為 Query String。

![圖 1.2：API 與 Query String 的說明](images/1-2.png)

一串 Query String 裡包含多個參數，以這個例子來說，用戶端在呼叫此 API 時，傳遞給服務器的參數為：

- m=hello 表示變數 m 的值為 hello，我把變數 m 的用途定義為 "message"
- u=jollen 表示變數 u 的值為 jollen，我把變數 u 的用途定義為 "username"

不過，標準的 RESTful API 並不是採用上述的 URL 格式，而是另有 URL 寫作的標準；這是過去在開發者在學習 CGI 時，所學到的觀念，也是典型（或較為式）的 API 格式。

NodeJS 的重要技術之一，就是解析並且處理 API 與 Query string。NodeJS 使用了非常巧妙的機制來實作 API 與 Query String。

[6]: http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol "Hypertext Transfer Protocol (HTTP)"

## Web-Oriented Architect

Web導向架構（WOA、Web-Oriented Architect）的精神一張圖就能講明白了。參考圖 1.1，Web 導向架構，幾個重要觀念整理如下：

- Device-Server 設計模式
- Device 端使用 Browser，以 Browser 做為執行環境（Runtime）
- Server 端提供 APIs，即 PaaS 概念
- Device-Server 採用非同步通訊（Asynchronous communication）

事實上，非同步通訊大家都使用過，就是 AJAX；AJAX 的第一個 A 就是 Asynchronous。但是考量 Server 端的負載（Loading），以及百萬連線（Millions requests）等級的處理能力需求，AJAX 應該儘量少用。這就是 Device-Server 與 Client-Server 的差別，大家可能還不太明白。所以，將二者的差別簡單整理如下：

- Client-Server 做法：在瀏覽器裡（Client）主動向 Server 請求內容，Client 定時(如：每隔 1 分鐘)發出請求，持續更新內容。
- Device-Server 做法：在裝置端（Device）和 Server 建立連線，Server 主動將更新內容推送（Push）給裝置端，更明確地說，裝置裡的瀏覽器，瀏覽器再將新內容刷新。

這樣就很清楚了，傳統的 Client-Server 做法是「Data Pull」，即主動去拉資料；Device-Server 的做法是「Data Push」，即推送資料，由 Server 在必要時才將資料推送給 Device。Data push 的經典代表作就是 BlackBerry（黑莓機）的郵件服務。

為什麼 AJAX 不好用？因為 Server 要冒著「不知道有多少 Client、不知道同時有多少 Requests」的風險。畢竟，主動權在 Client 端，突然一個時間，幾十萬個 Client 來請求資料，每個人又是發瘋似地，每隔一秒來要一次，Server 豈不掛點了。

要達成 Data Push 的目的，有解決二個技術問題：

- Device 端要與 Server 建立永續性（Persistent）連線，也就是 Socket connection
- Server 推送出去的資料，格式要有統一標準，且輕量化（Light weight）

要解決這二個問題，就是要使用先前所介紹到的二項技術：WebSocket 與 JSON。所以，總結目前為止的說明，原來 HTML5 不只是 HTML5 標準本身。廣義的 HTML5 應用程式，是由眾多技術交互形成。

並且，Web 導向架構是 Client-Server 或 Device-Server。哪一種架構會是主流？這並沒有肯定的答案，不過大略可以區分如下：

- 從 Web 角度來看，以 Client-Server 為主，這像是傳統PC時代的使用案例
- 從 Mobile 角度來看，將 Device-Server 為主

再次總結這二種模式的重點，Client-Server 是 Data pull 的概念，而 Device-Server 是 Data push。Data push 也稱為 Client pull，表示用戶端主動更新（Refresh）資料；Data push 則是 Server push，由伺服器主動推送資料。

## Data Push

Server 透過 WebSocket 找到裝置，並以 JSON 格式將資料推送給裝置，這就是 Data Push 的觀念，如圖 1.3。

![圖 1.3：Data Push 架構圖](images/1-3.png)

此外，Server 端應該以什麼技術來實作呢？看來看去，現在最實際的技術就是 NodeJS。以 NodeJS 技術開發一個專用的 Web Server，透過這個 Web Server 將資料包裝成 JSON 後，經由 WebSocket 送出。

## AJAX Refresh 重要性漸低

AJAX本質上是一種 Data pull 模式，也就是由用戶端（Client）來拉取資料（因此也稱為Data pull）。過去，開發者經常使用 AJAX 來實作 Refresh 功能。但是 AJAX Refresh 有以下的技術缺點：

- 可能造成 Server 的負載
- 不夠即時

即便 AJAX 可以不斷更新（Refresh）資料，但還是不夠即時。要打造「Real-time Web Application」不使用 Data push 模式是辦不到。因為用戶端，也就是瀏覽器，是以「Refresh」方式向 Web server 要求資料。例如：每隔 1 秒鐘請求一次資料。

使用 AJAX 與 Refresh 的模式，會讓伺服器端很難預期同時會有多少請求進來。可能在一些熱門時間，忽然有巨量請求，就會讓伺服器負載量提高，甚致有服務中斷的風險。

AJAX 也不夠即時，當伺服器有新內容時，必須依賴用戶端來主動要求，因此會造成一段「Latency」時間。傳統的「聊天室」網站就是這樣設計：必須更新網頁，才能看到新的聊天訊息。

從這個角度來看，NodeJS 的 Data push 方式，才是好的做法。不過，AJAX 也不是全然沒有用處了。一些「Non refreshing」的設計需求，AJAX 仍然非常有用，例如：設計「註冊表單」時，當使用者輸入帳號後，以使用AJAX向伺服器查詢「使用者帳號是否可用」。

這裡的重點是：使用 NodeJS 與 Data push 方式，才能實作真正的 Real-time web application。AJAX 搭配 Refresh 方式，顯然重要性不若以往。

## WOA 設計模式：Data Push

Data Push 的優點之一，就是：處理百萬連線請求。原因很簡單。因為採用的是 Data Push 機制，所以伺服器可以控制用戶數；如果要處理用戶端超過 10 萬個（假設），就可以將工作分散到其它伺服器。反之，Data Pull 的做法，難處在於，我們很難了解有多少使用者、在什麼時間，同時進行 Refresh。

圖 1.3 其實就是一種 Data Push 的設計模式。其觀念整理如下：

- Client 建立與 Server 的 persistent connection，方式是使用 WebSocket 技術
- Server 保存此連線
-Server 有新的資料時，將 Data push 給所有的 Client
- Client 收到資料，並更新 HTML 文件

上述的步驟並不是什麼學問，因為是很典型的機制。不過，HTML5 已經制定標準做法了，就是 WebSocket。WebSocket 是 HTML5 技術的重要靈魂。

## Device API 革命時代

HTML5 應用程式大致可分為：We b以及 Mobile。HTML5 本來就是「Web Application」的概念，這是它的核心思想。當然，在手機上使用瀏覽器也能執行（瀏覽）Web 應用程式；開發者可以將瀏覽器做適度的封裝，例如：去除網址列，這會讓使用者「好像在使用 Native 應用程式」一樣。沒錯，HTML5 在 Mobile 應用程式的價值，就是提供與 Native 應用程式「相同」的體驗。

要讓 HTML5 Mobile 應用程式，在手機上表現出 Native 應用程式的體驗，有一個很重要的條件，就是：HTML5 能存取 Device API。更簡單一點，要想辦法使 JavaScript 呼叫底層的手機 API。例如，在 Android 手機上，透過 JavaScript 去呼叫作業系統的 Java API，即 Device API。

這是頭一遭，能使用「做網頁的方式」來做出「手機應用程式」。使用 JavaScript 呼叫 Device API 的技術，幾年前出現了，它叫做 PhoneGap。PhoneGap 技術的概念，就是填補瀏覽器與手機間的隔闔（Gap）。

這一定是一場革命，如果能用做網頁的方式來做出手機應用程式，代表不久的未來，設計師也能輕易開發手機應用程式。做技術的人來做應用程式，和設計師來做應用程式，不需要多加思考，也能知道設計師比技術人員更適合做出絕佳的應用程式，因為這是UI與UX當道的時代。

HTML5+JavaScript+PhoneGap 讓這場革命成形了。Adobe Systems 公司看出了 PhoneGap 的未來價值，所以它在 2011 年底，收購了 PhoneGap 的開發商，並且將 PhoneGap 整合至 DreamWaver 軟體裡。從 DreamWaver 5.5 開始，用 HTML5 製作手機應用程式，變得簡單不過了。

### Open Web Devices 計畫

PhoneGap 提供許多「API」給 JavaScript 開發者使用，透過這些 API，JavaScript 就可以呼叫 Device API。所以，這些 JavaScript API 就要有標準，這是很容易了解的概念。PhoneGap 就自已定義了 API 標準。

還有另外一個開放源碼的作業系統，也擁有與 PhoneGap 一樣的概念與技術，這個作業系統就是 B2G（Boot-to-Gecko）。B2G 也要一套這種 API 標準。然而，B2G 並不採用 PhoneGap 的 API 標準，而是結盟電信營運商，成立一個開放標準計畫，來定義 API 標準。這個計畫就是 Open Web Devices（OWD）。

### Build My Own

使用 PhoneGap 或追隨 OWD 計畫，從商業面來看，並不是一個好主意。不過是 PhoneGap 或 OWD，多少都隱含了一些商業企圖，以及競爭策略。身為設備製造商，「Build My Own」也是我的聰明選擇。

以 Android 作業系統為例，要做出 PhoneGap 技術，並不是很難，事實上，對熟悉 Android 技術的開發者來說，這是沒有技術難度的工作。

以 Android 作業系統為例，Android 作業系統內建的瀏覽器，採用的 HTML 引擎稱為 Webkit，這是由蘋果公司（Apple Inc）所貢獻的開源項目。Android 收錄了 Webkit 做為主要的 HTML 與 [JavaScript 引擎][7]，並且將 Webkit 封裝成 [WebView 元件][8]，整合至 Android 框架內部。

[7]: 後來 Google 開始開發自已的 JavaScript 引擎，稱為 V8。
[8]: WebView 元件提供一個稱之為 addJavaScriptInterface() 的 API，這個 API 就是 PhoneGap 的核心。

## DOM

DOM（Documtnt-Object Model）是 JavaScript 存取 HTML 文件的物件模型，簡單來說，透過 DOM，JavaScript 便能存取網頁裡的物件。addJavaScriptInterface() 的原理，就是在 HTML 的 DOM 裡加入一個新物件，並且讓這個物件「Binding」到 Java 程式碼裡。

意思是說，這裡有一個連接 DOM 與 Java 層的物件，JavaScript 透過這個物件，就可以存取到 Java 層。addJavaScriptInterface() 是 DOM-to-Java 的 binding 實作。

同樣的原理也可以應用在其它作業系統，例如：iOS、BlackBerry、Bada、Symbian、Window Mobile 等。所以，使用 PhoneGap 來開發手機應用程式，可以很輕易達到「Write once, run anywhere」的目標。「寫一次、到處都能執行」是 PhoneGap 的主要價值，因為應用程式是使用 HTML5+JavaScript 來製作，在任何有搭載瀏覽器與 PhoneGap 的裝置上都能執行，並不受制於作業系統。# 第二章：借鏡三星的開放創新經驗

從半導體開始到智能手機，從硬體技術到開放源碼，三星，以硬體廠的身份經營軟體，堪稱史上最成功的典範，台灣的硬體產業都要向三星學習。企業經理人閱讀三星，來了解什麼是開放源碼、什麼是軟體，這不只技術或程式碼，還是一種世界文化與公司治理的思想哲學。

## 從光點到強大的競爭對手

會這麼說，可能一開始多少都輕忽了對手。

從 DRAM、NAND Flash、面板到 LED，台灣的每一項產業都面臨強大的「三星競爭力」。有一個很鮮明的感受，其實就是整個台灣產業在對抗一個三星集團。從 2011 年開始，更可以感受到台灣晶圓代工產業，有一種被侵門踏戶的感覺。侵門踏戶之說真是一點都不假，三星非常地拉攏台灣的半導體人材；這種借敵兵之將，打擊敵營的作法，不知道該說是正常的產業競爭關係，還是兵術之運用，只能靠大家自已的判斷了。

這是我們透過媒體所認識的三星。三星競爭力來自確實有效的戰略，先講求戰略有效，再述求策略確實，不斷重擊台灣各大產業。以這種行軍速度來推測，2012年會是台灣晶圓代工業必須考慮正面迎戰的一年。

透過沙盤推演，最差情況如下：三星競爭力的效率，有一個是我們不願意看到的事情，那就是，大約二到三年內，打下晶圓代工、Smart TV，以及汽車三大灘頭堡後，三星很有機會統一整個資訊科技業。
三星下一個關鍵的競爭力就是軟體。

董事長李健熙在 2012 年 1 月初，接受媒體訪問時說過：「三星集團必須擴大投資、聘請人才，繼續開放與創新，才能在低成長的環境中繼續擴張…，三星的未來決定於新業務、新產品與新科技，必須將公司文化變得更為開放、富有彈性並勇於創新...。」

看了報導，如果你認為三星才正要起步，那就大錯特錯了。關於軟體這檔事，三星佈局將近十年，筆者將為大家解開這骨子裡的密祕。

## 三星的軟體經營策略

三星的晶圓代工，固然起步較晚，經驗與技術尚不完備，但如果從應用處理器與系統整合的角度來看，現在的情勢，已經逼近和台灣晶圓代工產業一決勝負的臨界點了。 同樣的，三星佈局晶圓代工，也有一段歷史了。骨子裡的三星和我們想的不一樣。三星每一個上抬面的產業，抬面下都有又長又遠又精密的佈局。

軟體佈局也是，你看不到的，三星佈局近十年，而且更憾動產業的第三代軟體三星，才開始要走到起漲點。

三星即將完成三大技術佈建：應用處理器、軟硬整合、社群與軟體。台灣產業，再也不能以不變應萬變，坐以待斃了。向三星學習如何建立軟體競爭力，已是我們必修的一門課。現在，筆者匯整過去的觀察，鎖定軟體，為大家解析「三星軟體競爭力」。

另外，也將深入分析「軟體」這檔事，借鏡三星，研究更深層次的企業經營思想。期許能達到一種自我修煉的效果。

大量生產 = 勝利方程式，嗎？這個問題的答案是：雙面刃。即使不是 DRAM 領域的科技人，也都知道 DRAM 基本上是一個拼產能、比成本的產業，誰有產能，誰的成本比報價低，就是贏家。

看規模，看產能，看量，是台灣科技業的黃金法則，什麼都要比出貨量。三星對「量」的態度呢？印象中，大家都認為台灣的DRAM曾經是世界頂尖的產業，然後因為面臨三星各種手段的競爭，被打趴。事實是如此嗎？恐怕要還給三星一個公道。

雖說三星是公認最好的追隨者、學習者與超越者，但三星其實並不是一直都是老二哲學；過去在一些產業，三星都是龍頭的位置。最具代表性的就是DRAM產業。了解三星如何崛起的人都知道，三星在 1974 年收購韓國半導體公司，等於「一支腳」踩進了半導體業，另外一支腳，就是在1983年時，李健熙會長發表了著名的「東京宣言」後，雙腳都踏進了半導體業。東京宣言，讓三星完全撩落去。三十年下來，無論在 DRAM、FLASH 或 AP（Application Processor），都有令人敬畏的成績。

所以，三星進入半導體業的時間很早，第一個重要的里程碑就是 DRAM。三星發展 DRAM 已經有二十年的歷史了。三星在 1992 年推出首款 DRAM 晶片（64M）後，保持了二十年的龍頭地位，到現在一直都還是 DRAM 產業的龍頭。

一九九九年開始，全球 DRAM 產業進入大戰國時代，盛況空前。台灣的 DRAM 廠也扮演舉足輕重的角色；而當時正值台股大多頭的時期，像是茂矽等 DRAM 概念股，可是號子裡的搶手的標地。

三星的 DRAM 歷史就不必多說了。同樣是擴廠，三星一手是拼產能，另一手則是緊抓著技術。這就是三星的另一個經營之道，追求卓越的技術，以及建立自有技術。

這就是這個問題的答案，在追求重要的產能之餘，三星更建立了自有的 DRAM 技術。產能的背後，三星技術自主，這就是差別。台灣 DRAM 產業主要是採取技術合作的模式，缺乏足夠的自有技術。

台灣的硬體產業，在 Intel 的協助與帶動下，以大量生產創造經濟規模。這個模式，過去是殺手鐧，但現在反而深受其害。然而，三星的態度是，在創造經濟規模的同時，更加地重視技術與品質。

## 半導體後的三星：開放軟體的三星

三星進入開放源碼社群的時間很早，並不是因為 Android 才開始。過去三星在打造自有處理器時，就曾經將所謂的「參考設計」開放給開放源碼社群。最知名的參考設計，就是 SMDK2410，大約在 2004 年左右。

SMDK2410 不但開放了軟體，也開放了硬體。這使得許多社群，甚致是廠商，都可以自由取得三星的 SMDK2410 參考設計，且自行量產銷售。由於軟體也是開放原始碼，且一切技術文件都是公開的，所以想要修改軟體，或是客製化 SMDK2410 硬體，都不成問題。

三星的開放政策相當成功，SMDK2410 很快就席卷了開放源碼社群，以及教育市場。特別是在大陸，SMDK2410 受歡迎的程度，與今天的 Android 有過之而無不及。

筆者在這段時間，卸下了正職的軟體工程師職務，改行當顧問，和幾位朋友創辦了一家顧問公司；這段時間在業界看到的參考設計，幾乎都是三星的平臺，相信業界的朋友一定不莫生。在學校以及教育訓練市場也是如此，幾乎都是三星 SMDK2410 的天下。

SMDK2410 之後，三星也陸續推出新版本的應用處理器，其參考設計以及軟體，同樣是採取非常開放的經營政策。時至今日，三星的開放政策，及其帶來的商業回饋，在業界是A段班的範模生。

這是三星第一階段的開放軟體革命，時間大約是 2003 年到 2009 年。2010 年開始，三星的開放軟體革命，有了更成熟的策略，也更貼近商業面，例如：三星參與 Linaro 基金會的成立與資助。2010 年開始，三星有了更嚴謹且成熟的開放軟體策略。

## 開放軟體的人才政策

台灣業產應當加緊腳步，思索開放軟體以及自有競爭力之間的關係。
開放軟體的抽象層面，是社會文化，是一個觀念。開放軟體的具體面，第一個要落實的層面，就是人才政策。在台灣，大多被稱為是人力資源的一環。人才政策與人力資源，不管是目的或責，皆有所不同。

筆者所談的人才政策，是指如何網羅頂級人才，借助他們打造企業的新競爭力。例如，如何製作具有國際觀的手機軟體？應當網羅怎麼樣的人才？或是在哪裡可以找到此類天才？這和人力資源普遍在談的員工關係、教育訓練、招募、挖角等，是不同的思想。

筆者認為，在台灣，人才政策應和人力資源管理應分開經營，因為人才政策偏向於公司冶理。筆者長期為台灣企業進行軟體方面的訓練工作，所見所得，更是這麼認為。打造開放軟體的企業文化，相當需要合適的人才從旁政策配合，否則難有效果。三星的人才政策一向做得很好，他是硬體與半導體業，擁抱開放軟體政策的學習典範。

中國人講過幾句話：「舜發於畎畝之中，傅說舉於版築之間，膠鬲舉於魚鹽之中，管夷吾舉於士，孫叔敖舉於海，百里奚舉於市。」出自《孟子‧告子下》。這就是三星軟體人才政策的最佳寫照。

開放源碼社群上的高手、駭客、天才、名人等等，很多沒有接受過正規的職業訓練，有些人更沒有受高等教育。然而，他們是公認的高手、天才。三星深知「生於憂患、死於安樂」的道理，所以經常保持高度的警覺心，對人才也特別重視。三星以海納百川的心胸，去挖掘、去吸納這群天才，因為三星相信，「天才可以拯救一家公司」。這就舜發於畎畝之中的道理。

三星從 1999 年開始，就全面實行這種人才政策，無怪乎，三星的面板、DRAM、手機與軟體等，都有驚人的技術成果。

### 三星啟示：開放軟體、人才政策

終於，三星幫我們上了一堂。台灣IT產業的下一個競爭力，要從開放軟體的角度去想。從開放軟體的角度出發，開放軟體是一種文化，它有駭客，有開放源碼社群，有網路與雲端等等。台灣IT產業的人才政策，可以看看三星的成功，想想舜發於畎畝之中的道理；筆者建議，更應該與傳統的人力資源，區隔清楚；人才政策談的是公司冶理，而不是員工招募或挖角。

## 史上最有效率的軟體大軍

近代三星叫半導體三星，因為它靠半導體打下半片江山；新一代的三星，應該叫軟體三星，因為靠軟體，三星可能再取得另一片江山。所以，要看三星接下來的競爭力，從「軟體」的角度出發，也就夠了。

根據筆者的觀察，三星的軟體發展，將在 2012 年進入第二個時期，這將是三星進入半導體後，第二次的重要體質改造。三星將來所建立起的軟體競爭力，絕對比過去的 DRAM、面板或是現在的晶圓代工更可怕。如果說三星過去是拿大炮在產業打戰，三星用軟體建立起的競爭力，可說是核武。

另一個現象，可能連三星自已都意想不到的是，他們對「開放與自由軟體」與「社群」有著巨大的影響力。這個影響力將是三星軟體的重要資源，但是它很難具體數字化，沒有經濟學的公式可以計算，沒辦法用規模來呈現，因此很不受台灣產業的重視。或者說，「很無感」。現在，終於有機會幫大家慢慢解密。

### FLOSS & Open Platform：改造製造軟體的方法

大約在二零零九年左右，三星在軟體發展方面，有了更重要的戰略，簡單說，就是更開放、更創新；先來談談「開放」的部份。

開放與創新的軟體戰略中的「開放」，指的是以下二種思惟。第一、就是我們所熟知的自由與開放源碼軟體，我們將其稱為 FLOSS（Free and Libre Open Source Software）。第二、一種以開放平臺（Open platform）為主的經營策略，開放平臺最常見的形式就是 SDK（軟體開發套件）。

三星的 FLOSS 戰略，相當重要的成功，而且是不可思議地有效率；三星的 FLOSS 戰略，是無形的競爭力，它很難用產值、規模與資本支出來衡量；三星的開放軟體戰略，慢慢在啃食所有產業的競爭力。

先前提到，李健熙說過：「三星集團必須繼續開放與創新…公司文化變得更為開放、富有彈性並勇於創新…。」他所提到的「開放」，就是以 FLOSS 與 Open platform 為核心，去改變集團的觀念、心態，並調整戰略、產品策略，以及最重要的，「改造製造軟體的方法」；如此一來，公司便可以更有彈性，也更創新。

例如：以 Open platform 方式，接受外部的創造想法。這就是不同的軟體製造思惟。所以，Open platform 乃至於 FLOSS，是不是改變了公司的文化，並且讓公司更創新呢？

這過去幾年見報的三星報導，幾乎不曾提到這點；開放軟體，正好是筆者從事十年的領域，對三星在這個領域的活動也有長久的觀察，這就是我想寫三星的理由。告訴大家，並分享這不為人知的一面。

經過二年的練兵後，三星將用其有效地的 FLOSS 策略，在手機、平板、Smart TV 與汽車等領域，開始攻城掠地。現在，我們應該抱持向對手學習的態度，深入了解三星軟體競爭力的內涵。台灣中小企業強大的競爭力舉世聞名，快速的應變能力也是一絕，現在最大的問題在於，觀念還沒有導入。

沒有開放的中心思想，就沒有打掉舊觀念、建立新思惟的機會，沒有新思惟，就享受不到開放帶來的價值，那就沒有辦法建立一個以開放與創新為核心的新體質。再把問題說得更清楚，台灣的企業不是沒有能力，而是沒有觀念，有了觀念，台灣企業想建立新的競爭力，絕對不是問題。

三星軟體大軍的效率，很大一部份是歸功於「巨人的肩膀」，三星善於使用開放源碼軟體，更能善用開源資源與社群人才。讓三星取得驚人成績的關鍵是軟體，而軟體開發，絕對不是從零做起。

台灣產業的問題，並不是不曉得開放源碼這件事，而是把有價值的事看小了：誤解開放源碼（Open source）只是將原始程式碼公開。

## 開放與創新的中心價值

為了方便起見，接下來，筆者將以「開放軟體」來表示 FLOSS & Open platform。

開放軟體，以及它的中心價值「開放與創新」，讓產業生態巨變。「開放」的意思不是把原始程式碼公開，而是一種「打造以開放為中心思想的經營策略」。把程式碼公開，只是經營策略中的一個小環節而已。還是不明白？舉一個例子：透過與開放社群協作的方式，來發展 Linux 作業系統核心。這一點，三星做得確實好極了。

產業生態在巨變，而大破大立是面臨生態快速變化的一個有效方法。有一句俚語形容得更傳神，「打斷手骨顛倒勇」。不過，白話文的意思更簡單，就是「打掉重練」。

三星能面臨這場生態巨變嗎？一定可以。因為他骨子裡滿是革命精神，這也不是他第一次的大破大立。

從 2008 年開始，三星面臨強烈的開放軟體洪流，這個開放軟體就是 Android。Android 開放軟體帶來的相當大的產業生態，以及文化上的改變。三星的做法與台廠完全不同，三星採取的是內部革命的作法，因為三星知道，打掉重練是建立新競爭力的唯一方法。

Android 不但是 FLOSS，也是 Open platform。

三星集團的第一次革命是在 1993 年時，這時三星在 DRAM 
幾乎是世界霸主的角色了。當時的台灣科技業，將「量」奉為至高原則，一切講求量產規模。

然而，當時三星的會長李健熙發動了「新經營」運動，簡單說，李健熙認為質與量的比例應該是 9:1，三星很清楚，他要替自已的未來十年或二十年做準備。三星應該要忘記什麼是量這件事，應該要注重質的提昇。三星也很清楚知道，技術是品質之母，這也是三星特別重視的環節，「自有技術」。

新經營運動，打掉了以量為上的經營思想。當時的新經營運動，李健熙講出了一句大家都聽過的名言：「除了老婆孩子不變之外，一切都要變」，撼動人心。

這就是三星教我們的一課，當企業面臨產業生態改變時，一切都要變，全部都要重新練一遍。當時的新經營運動，建立了現在我們所看到的三星集團。

## 三星專長又細又長的佈局

回顧現在的台灣產業。經過了幾次像三星這樣的改變？離三星的新經營運動近二十年後的今天，有量才有一切，無量免談，這樣的惡習還在台灣的科技業流竄。即使是這二年來，面對 Android 所帶來的產業生態巨變，仍舊是以不變應萬變，倒是令人擔心。

原來，真正的霸主，是在得到霸主地位時，連一刻鐘的享樂都不願意，而是把危機意識指數加到滿，繼續思考下一個霸主之路。

佈局，就是三星骨子裡的精䯝。他不是大家想像中的一味模仿。三星在 1974 年進入半導體業時，就展開了 DRAM與面板產的佈局。還原真相，三星並不是等到台灣的二兆雙星把 DRAM 與面板產業做起來後，再進來與台灣競爭。

以 DRAM 產業來說，若以「單一公司」為單位，而不是以地區產業來計算，台灣並沒有任何一家公司在過去三十年的 DRAM 產業，擠進前三大。過去大家所知道的 DRAM 排名，都是以台灣的總產值做計算。

Linux 作業系統核心，還有整個開放平臺、開放源碼以及社群經營的佈局，早在 2005 年以前就能看到三星的身影了。

又細又長的佈局，背後代表的是經營者的遠見。不管是DRAM還是軟體，從佈局的角度來看，不是台灣產業被打敗了，而是三星早就贏了。

筆者在這裡進行的分析，不是為了去證明三星的強大，而是希望適當地還原真相。前面說過，台灣中小企的競爭力全球聞名，三星發展半導體的早期，把台灣產業視為可怕的競爭對手；一名近距離觀察過三星的韓國媒體記者，在他的一本著作裡提到這點。

現在，三星打斷腳骨的機會來了。一下打斷手骨，一下打斷腳骨，這不修煉成仙也難。這次的機會是軟體，更明確地講，叫做開放軟體。

開放軟體，是觀念，不是技術，更不是單純地公開原始碼。它是一個可以影響經營哲學的觀念。

## 開放軟體：Open platform 與 FLOSS

將開放軟體細分為開放平臺與開放源碼。開放平臺 (Open Platform) 訴求是提供應用程式開發界面，稱為 API (Application Programming Interface，廠商可以將 API 打包成應用程式開發套件，稱為 SDK (Software Development Kit)；SDK 的目的是提供撰寫應用程式(App)的工具箱(Kit)。最成功的 SDK 就是大家所熟知的 iPhone SDK 與 Android SDK。

意思是說，SDK 本身不一定要公開原始碼，只要有整合良好的 SDK 即可。
開放源碼 (Open Source) 其實應該正命為開放與自由軟體 (Free & Libre Open Source Software)，在網路上被玩家們簡稱為 FLOSS。開放源碼嚴格來說是一項運動，起源於八零年代。

FLOSS 本質上，是希望公眾(Publics)都可以取得軟體的原始程式碼。最成功的開放原始碼軟體呢？答案不是Android，而是Linux作業系統核心(Linux kernel)。

因此，Open Platform 與 FLOSS 是二件事情，在商業上更有不同的意義。大家都說 Apple的iOS是一個封閉的作業系統，因為它不提供原始程式碼。意思並沒有錯，iOS不提供原始程式碼，所以它不是FLOSS；但是iOS有提供API，Apple也將這些API打包並整合一些開發工具，成為iPhone SDK。

所以，iPhone SDK 雖然不是 FLOSS，但卻是不折不扣的 Open Platform，一個可讓大家開發 iPhone/iPad App 的開放平臺。

三星的開放策略很清楚，開放平臺就是開放平臺，FLOSS 就是 FLOSS。台灣的科技業深切了解這二者的差別嗎？# 第三章：開放源碼的商業層面

筆者想說的是，智能手機市場過去享受的需求紅利，已經在 2012 年結束。

## 手機業黃金五年結束

2008 到 2012 年是智能手機的黃金五年，因為今年可能劃下休止符。 存貨反應一個行業的經營體質，而手機行業目前面臨較沈重的庫存問題。當存貨天數過高，營業利益率會有很大的影響。而一些品牌手機商正面臨這個困境。

我們都全程見證了智能手機(觸控手機)的大崛起，許多大事件現在說來作歷歷在目。2008 年 9 月 15 日雷曼兄弟宣佈破產，引發金融海嘯。當年智能手機業的營業利益率大約 18%~23% 之間，金融海嘯襲捲後還能維持在 16% 以上。

這個數字在 2012 年 Q1 下滑到約 9% 左右，已經很接近 PCB 行業了。以銷售硬體為主要商業模式的手機業者，未來將面臨巨大挑戰，Apple 早已跳出硬體銷售的模式，因此 iPhone提早免役。市場變化太快，智能手機席捲全球，以功能型手機起家並稱霸手機業多年的 Nokia 最早落難。繁華過後，高速的成長，反讓智能手機自已面臨成長困境。

2008 年開始，手機業的存貨天數不超過 40 天，最高大約是 37~38 天。但是今年（2012）第一季的存貨數字來到 51~52 天，創下新高。台灣某品牌的營業利益率則是在今年跌破 10%。這些數字得到一個總結，智能手機不再是新興科技，它是傳統產業。營業利益率方面，賣手機的和作 PCB 的人差不了多少。高速成長的榮景不復再見，回不去了。

## 開放軟體是一種文化運動

在黃金五年的尾聲，毫無疑問，三星與蘋果是贏家。以 Android 作業系統手機來說，三星後來居上，登上王座。三星在這黃金五年裡，以「開放軟體」為戰略，建立了一個相當有競爭力的技術研發結構。

反觀許多智能手機商，似乎並沒有利用過去這寶貴的黃金五年，建立公司的軟體研發結構。台灣某手機大廠，似乎也是如此。黃金五年很寶貴，而且機會一去不復返。一般來看，行業的黃金時期都是甜蜜時間，大部份的人都能吃到糖；行業裡的所有人都是享受激情式的成長。

投資大師巴非特說：「當浪潮退去之後，便知道誰在裸泳。」這個比喻很傳神，我們也把它拿來這裡用。手機黃金五年是一股巨浪，直接把你往前推。有時，公司不需要建立嚴密的研發結構，衝浪就是了。最典型的代表就是山寨機行業。行業內用白話文說：「躺著賺錢。」

總結來說，你可能並不是完全靠自已，而是佔「天時」的便宜。有些手機品牌廠只知衝浪、太過於得意忘形，所以沒有利用寶貴時間，好好建立公司的技術研發結構。當浪潮退去，一切都要回歸本質。

本質不佳的手機公司，現在都將打出原形，也就是研發結構的體質問題。研發能力，最終都反應在產品面上。產品面是殘酷的，例如「市佔率的節節衰退」以及「產品競爭力的急速下滑」。所以，現在是誰在祼泳？

三星的智能手機，嚴格來說，從 2010 年才開始。這段時間，三星建立了一個以開放軟體為中心的軟體研發結構。三星不是祼泳者，因為它在開放軟體戰略方面，做得很成功。

以開放軟體為戰略的研發結構，將幫助三星進入另一個境界。開放軟體是一個概念，它就是前所提及的 FLOSS 以及 Open platform。比起其它玩「當衝」的手機業者，三星花更多時間做長期佈局的工作。

做為執行者，現在應該去思考如何以開放軟體建立一個精緻的研發結構，為未來做好準備。然而，這是一個需要文化革命的經營運動，是否能落實執行，就是個未知數了。

## 開放軟體是文化革命？

智能手機的黃金五年結束了，第二階段的手機市場即將開始。在這個時間點，經營者需要進行一場文化革命，改變經營文化。開放軟體，FLOSS 與 Open platform，過去經常被誤解成「公開程式碼」。然而，這是一個文化革命，它的社會影響力等同於「文藝復興運動」。

先來談談FLOSS，也就是自由與開放軟體。FLOSS經常被大家理解成是開放原始碼(Open source)，但其實是先有自由軟體(Free software)而後有Open source。Free software指的是「一個可被自由與修改的軟體」，本質上就是軟體。

Open source則是後續出現的一個「運動」，本質上它只是一個movement，一種社會運動，你可以把它當成是一種文藝復興運動。

## 自由軟體(Free software)

七零年代初期至八零代年早期的十年間，有非常多的電腦愛好者，組成一些俱樂部，自已DIY電腦，也自已寫程式碼，像Steve Jobs就是這些愛好者之一。因為有太多程式玩家，喜歡分享，或稱為共享，自已的程式碼，於是形成了早期的 Hacker 文化。當然，商業化軟體，像Microsoft也在這個時期出現。這些樂於DIY，更樂於分享的電腦好手，被稱為是Hacker。Hacker指的是精通某個領域的非正規專家或好手；這些好手對於自已的領域，非常的著迷，甚致到出神入化的著魔境界。

過了十年，來到了八零年代，這是網際網路開始急速發展的開始。Hacker 終於可以透過網路集結，並分享自已的軟體；其中有一個相當有代表性的人物，叫做Richard M. Stallman。他特別喜歡讓大家「自由地」使用或修改他的軟體，例如：GCC (Linux 與 Android 使用的編譯器)、GDB (Linux 與 Android 使用的除錯器) 等。

Richard Stallman 的理念得到 Hacker 們的熱烈迴響。於是為了保障「使用與修改軟體」的「自由」，他成立了一個基金會，稱為「自由軟體基金會 (FSF, Free Software Foundation)」。FSF 組成了一個律師團，擬定了一份保障「軟體使用與修改自由」的授權合約，供取得這些軟體的個人或廠商共同遵守，這份合約就是名聞遐邇的公眾授權條款 GPL (General Public License)。

自由軟體的影響力呢？幾年後，一個符合自由軟體精神的計畫出現了，那就是 Linux 作業系統核心。

## 開放軟體：軟體界的文藝復興運動

開放原始碼（Open source）的起源帶點商業色彩，或說是商業意圖，所以我們不談論這個部份。總之，我們可以得到這樣的結論：Open source 改變的不是技術，而是社會文化。

Rinascimento(中譯：文藝復興運動)，改變的是整個社會的文化，以至於整個世界。所以，我們必須以「文化」的角度來思考開放軟體這個議題。 Open source 的運動一樣改造了世界。如果還很難想像，可以深入文藝復興運動來思考。

在 13 世紀晚期，義大利中產階段因為生活上的富足，開始尋求更優雅與時尚的生活，於是萠生「脫離神權」的想法。知名詩人「但丁（1265-1321）」的出現，被認為是義大利文藝復興時代的開始。在神權時間，一切的思考都是封閉的。
但，Rinascimento把封閉變開放了。

神權至上的時期，被稱為「黑暗時期」，在 14 世紀興起的「文藝復興」運動，打破這個現象。也就是說，黑暗時代，神權至上，可能有很多像是「魔法」的東西，或是很多霍格華茲魔法學校（註：哈利波特的學校）；文藝復興後，很多近代科學開始發展，例如：數學、物理、天文學等；生活在此時期後的人類，哈利波特稱之為麻瓜（Muggle，指沒有魔法的人）。

「個人主義」，也就是文藝復興運動的重要產物之一，開始發展。許多耳熟能詳的「大師」，也在文藝復興時期開始出現，例如：米開朗基羅；天文學、物理學、數學、生物學等，被稱之為近代科學的知識，有了重要的發展。

用近代的網路現象來比喻，文藝復興運動很像是 Web 2.0。出現很多新現象，例如：個人主義的興起，每個人都可以自由創作，發表成果，這裡的「個人主義」指的是「好的」個人主義，例如：分享、討論、知識交換，而不是自私的這種個人主義。

文藝復興時期，經典創作「聖彼得大教堂」花了 120 年的時間建造，由多位大師共同創作而成，很像是 Web 2.0 時代的「共筆」或是「協作」。Linux kernel 是網際網路時代，社群協作的重要創作之一。今天我們使用的 Android 手機，都是運行於 Linux kernel 軟體之上。

聖彼得大教堂，肯定是背包客必定點名的景點，這是天主教最神聖的地方。聖彼得大教堂花了這麼久的時間才完工，當然不可能是由同一位建築師獨立完成，參與聖彼得大教堂設計的建築師有勃拉芒特、拉斐爾、米開朗基羅、小莎迦洛，這也是聖彼得大教堂的特色；現今，自由軟體界，稱重要且具代表性的 developer 為「大神」。感謝以上四位大神的共同協作，讓我們在 700 年後的今天，能親眼目睹這個偉大的建築，能欣賞到令人嘆為觀止的繪畫與雕刻。

Open source 形成一種「個人+集體創作」的新網路文化，Linux作業系統就是這樣產生的。 另一個集體創作的典型成功案例則是「維基百科」。

## Open source能賺錢嗎？

台灣科技業的專業經理人，一直以來有一個誤解，所以一直以來，都在問一個問題：Open source能賺錢嗎？把原始程式碼公開，對手不是也能拿到程式碼。

這個問題對Open source一詞，有很大的誤解。

從筆者的角度來看，台灣產業存在一個嚴重的問題，就是缺乏真正了解軟體的專業經理人。或是說，現在的專業經理人，並不具備軟體的世界觀，已經和現實的軟體文化脫節。

Open source當然不能賺錢，因為它是一項運動。這個誤解，有點像是「文藝復興能賺錢嗎」的問題。台灣企業必須學習，如何去融入這項運動，試著去了解它的文化，然後調整自已的商業模式，以及企業文化，必要時甚至要革命。

這是彼得杜拉克沒有教我們的一堂課：從企業經營的角度來看，Open source不是把程式碼公開，而是讓我們去調整公司文化，並建立新的商業模式。

台灣的中小企業都已經有一定規模，這是可行的想法嗎？筆者認為，這根本不需要擔心，因為已經有二隻會跳舞的大象。

第一隻是 IBM，大家都知道，IBM發明了PC，也放棄了PC。但是大家比較不知道的是，IBM在Open source運動上有著舉足輕重的地位。最成功的故事就是IBM贊助成立了Apache基金會。

第二隻是三星，三星在 Open source 這上做得相當好，可以說是繼 IBM 之後的第二個模範生。

因為 Open source，三星的軟體策略，有了非常大的調整。三星和其他一些國際大廠，共同贊助成立了一個非營利組織，稱為Linaro。但很諷刺的是，台灣科技圏對Linaro的反應異常冷淡，Linaro的成立記者會現場，大家沒有太大的迴響。
但是 Linaro 至今已幫三星取得軟體上的一些成功。關於 Apache 基金會、Linaro，以及二隻大家為什麼能跳舞，我們後續揭曉。

還有一個故事。

筆者曾經在好幾年前，遇過一個好玩的想法。在某一個研發會議上，一個工程師提到，Linux 作業系統核心的影響力與技術性；當時 Microsoft Windows 與 Linux 二大作業系統，可是戰火四射。當時的會議主管，提出一個令人不知所措的想法，他說：「如果 Linux 這麼有潛力，是不是把這家公司買下來。」

原本想以「老師」的心態，解釋為這麼這是個離奇的想法，但當時還是菜鳥的我，沒有太多發言權，只能作罷。不能怪當時主管的這個想法，因為大家對這種 Open source 的文化了解不多。

現在，Linux 作業系統核心，有著大量的三星程式碼。你用的 HTC 手機，使用的也是 Linux 作業系統核心。更簡單一點，HTC 手機裡有三星的程式碼。這是怎麼辦到到？這要從 Linux 的文化說起。

不管是Open source、IBM、Linaro等，台灣科技業，在這個部份的觀念，落後國際間大約十年左右。

## 打造開放軟體的經營思想

Linux 作業系統核心的發展，大約從 1971 年開始。

第一個 UNIX 作業系統，在 1971-11-03 正式現身，就在第一版的UNIX作業系統出現後二年，也就是 1973 年，Dr. Dennis 發表了非常重要的技術，那就是 C 語言。 

1973 年這段時間，還有很多重要的事件，例如：最早的網際網路。又如：1973年 Dr. Neo，也就是後來 Motorola 公司總裁，發明了手機。

1990 年代，也就是第一個 UNIX 作業系統出現後的 20 年後，有一個非常重要的玩家（Hacker），名字叫做 Linus Torvolds。他就是 Linux 作業系統核心的原始創作者。

大家不需要了解 Linux 作業系統核心的技術細節，但是，我們手上的每一支 Android 手機，都是使用 Linux 作業系統核心。在 Linux 作業系統核心之上的，才是 Android 軟體。簡單說，要把 Android 手機做好，掌握好 Linux 作業系統核心的技術是關鍵。

## Linux 作業系統心是聖彼得大教堂

Linux 作業系統核心是開放原始碼「文化」下的代表性產物，它的重要性等同於聖彼得大教堂。透過網路的連結，Linux kernel 由超過五十萬個開發者共同「集體創作」而成，這也是現今我們所熟知的「社群文化」。

所以，Linux 作業系統核心不屬於任何一家公司，不是某一家公司的產品。問題來了，如果今天我們想使用 Linux 作業系統核心來開發產品，應該採取什麼樣的方式？三星很明顯地，已經學到這一點了。

文藝復興運動，就像 Internet/WWW 的出現，以及後來的 Web 2.0 與開放源碼運動（Open Source Movement）一樣，影響全人類的生活與文化發展。

近年來，手機也從封閉走向開放，以及「個人創作手機軟體」的運動發展。不得不承認，個人創作軟體的文化，幾乎徹底改變資訊科技業了。因此，正確的心態是了解這個文化的本質，商業上應如何因應，還有新文化帶來的新商業模式；關於這個部份，不得不再承認，三星確實是值得學習的典範。

因為Linux作業系統核心是社群文化下的集體創作，企業欲使用 Linux 來開發產品時，軟體發展的策略與方法，非常的不同。後續筆者將大家分析三星的做法。

三星沒有搭上Linux開放原始碼的第一班列車？

三星一向是最佳的追隨者與模仿者。這個評論的背後隱含了三星最可敬的能力：模仿後超越。我們把範圍縮小到 Open source 的議題上，模仿後超越的成功故事，再添一剸。

事實上，三星根本沒有趕上前面討論過的「Linux」第一班列車。另一個令人驚訝的事實是，在有了 Open source 的意識後，三星跌跌撞撞，也花了近十年的時間模索。讓我們來回答二個問題：

- 這「十年」的時間點為何？答案是 1999 年至 2008 年之間
- 這「十年」在模索什麼事情？答案是什麼是 Open source。

根據筆者的觀察，從 2008 到 2011 年這三年間，三星在「Open source 結合商業模式」有了相當的突破，這可以從三星的手機策略得到印證。

Linux 作業系統核心發展初期，三星沒有參與，實際上也不曾出現在 Linux 的貢獻榜上。

現在，在台灣，有極少數具有軟體國際觀的公司，已經試著將 Open source 文化融入公司。但大部份台灣企業，可能還在模索前面討論過的問題：Open source 能賺錢嗎？為什麼要公開原始碼？等等問題。

筆者相信，三星完全了解什麼是 Open source 了。因為他做得很好，現在，Linux 3.0 核心，裡頭有大量的三星程式碼。

目前為止，我們提到 Open platform、Open source、FLOSS、Linux、Apache基金會、Linaro，現在，我們再加上 SD K與 Android。
關於這些部份，IBM 與三星可說是近代企業管理，最精采的示範。

## 提供應用開發 SDK：集結自由開發者

1986 年的一個故事，這段故事跟 Steve Jobs 有關係。八零年代後期，是物件導向軟體技術萌芽的時期。這個時期，出現了一個知名的「物件導向式」作業系統，那就是 NeXTSTEP。 因為物件導向技術的出現，改變了軟體工程師設計 App（應用程式, Application）的方法，這個技術一直影響接下來的軟體產業發展，一直到今天都還是。

大家都知道，Steve Jobs 在這一年離開了自已創辦的蘋果電腦公司。在他離開後，Jobs 創立了另一家公司 NeXT，這家公司發揮出一個稱為 NeXTSTEP 的作業系統。NeXT 公司後來被蘋果收購，NeXTSTEP 作業系統也成為了現今 MacOS/iOS 作業系統的核心。

NeXTSTEP 率先提供 SDK 供電腦玩家撰寫應用程式。NeXTSTEP 的設計充份考量「如何提供好用的應用程式開發模式」給開發者使用。SDK 是一套工具，如果可以把工具設計的簡單又好用，使用者就可以使用這套工具，可以很有效率地做出很棒的作品。

怎麼樣才是好的應用程式開發模式？NeXTSTEP 作業系統提出以「物件導向技術」來設計這套工具。沒有錯，NeXTSTEP 是成功提出第一個物件導向式 SDK 的作業系統；NeXTSTEP 證明了物件導向式的App開發模式，是最佳做法。

大家可以不需要了解物件導向技術（OO, Object-Oriented）的技術細節，但是這個觀念與技術，一直被使用到現在。Android SDK 也是一個提供物件導向式 App 開發的工具箱。算算這個時間點，Steve Jobs 盤算 SDK 的計畫，早在二十多年前就開始了。

## Android 開放軟體潮流最大贏家

第一波開放軟體潮流，代表性作品是 Linux 作業系統核心。第二波開放軟體運動，代表作性品就是 iPhone SDK 與 Android SDK。Google 很成功地在三年裡，經營出 Android App 的開發者社群，每個人都在創作自已的 App，無論是 Play Store 上的 App數量，或是下載次數，都取得相當大的成功。

iPhone SDK 是開發 App 的工具箱，Apple 並沒有將 iOS 平臺開放給硬體製造商，因此硬體製造商在這個地方亳無發揮的空間。

Android 就不同了。除了 Android SDK 可供開發者創作 App 外，Google 更開放了 Android 平臺，Google 公開了絕大部份的 Android 平臺程式碼，這個平臺被 Google稱為 AOSP（Android Open Source Project），它是一個開放原始碼的軟體。有了 AOSP，硬體製造商便能自行打造 Android 手機。

在 Android 早期，也就是 2007 至 2008 年時，最有代表性的 Android 手機製造商就是 HTC。不過現在三星很明確地取代了 HTC 的位置。沒有搭上第一波開放軟體潮流的三星，這次很不一樣了。

由於 Google 開放了 Android 作業系統平臺，硬體製造商便能建立自已的「軟硬整合」技術，並推出且銷售自有的 Android 手機產品。硬體製造商可以在 AOSP 裡加入一些「增強功能」或「自有特色的功能」，這些功能雖然都是存在於 AOSP 裡，但 Google 保留了一個彈性，就是可以讓製造商把這些額外的功能，包裝成我們提過的 API，並且加入到 Google 發佈的 Android SDK 裡。Google 把這些由廠商提供的 API，統稱為附加元件（Add-ons）。

製造商將自有的 API 加到 Android SDK 後，App 開發者便能使用這些 API 為製造商的裝置，創作專屬的 App。這才是完整又有影響力的開放軟體做法，它協助製造商，連結了廣大的 Android App 開發者。

在開放軟體界練兵十年的三星，了解這個觀念。

在這波 Android 開放軟體潮流裡，第一個提出 Android SDK 附加元件，並且被 Google 整合到 Android SDK 裡的廠商，沒有別人，就是三星。

這次的開放軟體巨變，真正搭上第一班列車的是三星。在這個部份，三星領先了所有同業，包含 HTC。這次三星不再是追隨著，而是真正的先鋒。

2010 年 12 月，Google 發佈 Android SDK 2.3 版，此時，三星的附加元件也被整合至 Android SDK 裡。

## 開放源碼的戰略地位

義大利軍事學家杜黑提出「制空權」理論，制空權的精神是在戰爭中，設法取得控制空中的優勢。現代戰爭依賴工業技術以及科技，因此現代化的戰爭，講求能迅速摧毀敵人的現代化基礎建設，並消滅敵軍的後勤補足能力，使敵軍失去發動戰爭的能力。這就是為什麼戰爭時，必須先設法摧毀敵軍機場的原因。

制空權是當今非常重要的戰略理論，開放源碼的道理就是這樣。開放源碼有著相當重要的制高戰略，能深入開放源碼，並在開源社群發生影響力，就享有制空優勢。

從商業的角度看來，最重要的開放源碼計畫莫過於 Linux 作業系統核心，它具有相當重要的戰略意義。從商業的層面來看，取得 Linux 作業系統核心的制高權，就可以掌控產品的影響力，以及價值。Linux 作業系統核制高權，談的是參與，以及貢獻。

Linux 作業系統的發展開始於 1990 年代，不出五年的時間，Linux 作業系統就進入商業領域了。Linux 作業系統在商業上的成功，有二個知名的案例，一個是 RedHat，另一個是 IBM 公司。RedHat 與 IBM 的產品，均使用了 Linux作業系統，為了掌握 Linux 的制空權，二家公司不約而同，積極參與Linux開放源碼計畫。

IBM 公司後來參與了 Apache 基金會，更取得了另一個開放源碼計畫的制空權。參與 Apache 基金會的決定，讓 IBM 的伺服器事業，在商業層面取得了新的勝利。

## Apache 基金會

就在 2011 年 10 月 14 日，Apache Software Foundation 在官方博客上發表一則訊息：Oracle 將 OpenOffice.org 提交給 Apache 基金會，並且己被接受。簡單來說，就是知名的開源辦公室軟體套件 OpenOffice.org 加入 Apache 基金會了。Oracle 讓 OpenOffice.org 嫁進 Apache 基金會。從此開始，OpenOffice.org 改名為 Apache OpenOffice.org，等於冠上了夫姓。

這個故事，點出了幾個問題。

Apache 基金會是一個非營利組織，它的影響力有多大，可以從 Java 7 規格制定的事件得到證明。Apache  基金會的董事會，決定投票不同意 Java 7 的規格，簡單說，就是 Apache 基金會並不認同 Java 7 的技術規格。Apache 基金會不認同 Java 7，等於 Java 7 走入商業並成為標準的機會是零。此舉完全是 Apache 基金會為了抗議 Oracle 公司在商業上一些另人爭議的作為。Java 之父是 Sun Microsystem 公司，但 Java 技術現在是屬是 Oracle 公司的財產，也就是 Java 7 技術規格是由 Oracle 主導制定。

Apache 基金會的決定，等於否決了 Oracle 的新版 Java 技術規格。Apache 基金會在開源世界的影響力與地位，可見一斑。

非營利組織的影響力，大到足以推翻商業力量的決策。

與 Apache 基金會同樣具有此等地位，甚至具有決定性地位的非營利組織，就是 Linux Foundation。自由軟體基金會、Apache基金會與Linux基金會，是現今開放軟體社會中的三大非營利組織。

Apache 基金會是這三天基金會裡，最有商業色彩的組織。事實上，Apache 基金會的開源項目，很大一部份都是為了商業考量。商業化並不是壞事，反之，更應該鼓勵自由或開放軟體，能與商業結合，才能永續經營。單純是教義上的開放源碼計畫，非常多都成為死計畫，意思是這些計畫的活動都停止了，成為冰凍狀態。

Apache 基金會與商業公司之間的運作模式，是開放軟體與商業結合的絕佳案例。企業管理的學說，更應該將這個部份納入成為教材。

另一個重要的開源計畫稱為 PhoneGap，PhoneGap 目前己正式成為 Apache 軟體基金會的一員，並接受 IBM 的贊助。PhoneGap 也被整合至三星的 Bada 作業系統，PhoneGap 在 HTML5 具有非常大的影響力。這個事實，足以說明三星未來在手機，在 HTML5，在開放軟體社會等，都將有大競爭力。不知台灣的廠商們，是否能理解其嚴重性。

可以這樣說，台灣廠商在未來的手機、雲端與 HTML5 戰爭中，失去了制空權。我的感覺是，台灣不是不能做，而是缺乏大戰略方向。我認為，有二個政策，是政府目前能做的：

- 第一、協助品牌廠商參與 HTML5 或其它標準的制定。這裡談的是參與標準制定，參與的意義是針對HTML5提出建議，或提案，並不是要求納入自有的標準。

- 第二、扶植新創事業，取代人才培養。透過政策與租稅優惠，協助台灣優秀人才建立事業。這是以政府高度該做的事情，環境對了，優秀人才自然會朝正確的方向走去，例如：HTML5。
總結來說，政府不用給方向，而是要給方針(政策)。方向的事情，就交給產業的專業人士。

## 戰略在取得制空權

了解開源社會文化，以及這些非營利組織運作的人都曉得，能直接參與標準制定的機會並不高。但是只要能先從提供建言，或提出提案的「淺參與」做起，讓公眾看到具體的「貢獻」，將來能「深度參與」的機會就會很高。分別主次、緩急有序，這是參與非營利組織活動的原則。

中國古代的軍事哲學提到的「地緣戰略」，很適合應用在當今以開放軟體為主的商業策略上。三星的一些開源軟體活動，很符合地緣戰略的思想，也是三星開放軟體影響力崛起的關鍵。

分別主次、緩急有序，講究細緻的行動，每個行動都要能達到設定的目標。敵強我弱的格局，要採取地緣戰略，唐代建國之初，採取這種戰略，奠定後來的強盛基礎。厚植台灣的軟體實力，不單只是培養軟體人才，開發創新軟體產品，在開放軟體社會，以及像是 HTML5 等的重要標準制定上，都要能做出影響力。

以開放軟體與 HTML5 來說，從制高點的角度來看，台灣廠商明顯是處於絕對弱勢。從戰略角度來看，參與非營利組織活動、全面了解開放軟體的文化、培養具開放軟體商業思惟的人才、參與開放源碼的軟體開發、重新組織大專院校課程、訓練大學師資等，都是主要且急迫的工作。

另外，筆者大膽提出一個建議，就是是參與三星的 Bada 開放源碼計畫。例如：使用三星的Bada作業系統開發產品，並參與 PhoneGap+Bada 的開發計畫。除了 Google 的 Android 作業系統外，台灣廠商甚至可以與三星鍗結盟約，採用其 Bada 作業系統。此外，也能在 Android 作業系統外，擁有另一個選擇。

有了 PhoneGap 這個利器，三星未來在智慧型手機的第二個戰場「HTML5」將無往不利。

## 第一波 Android 競爭的得勝者

正如同我們在新聞媒體上所看到的消息，2007 到 2011 年底， 是 Android 萌芽時期，在這第一波的 Android 競賽中，三星是最大的贏家。三星憑藉著獨家的 AMOLED 硬體技術，以及他的開放軟體上觀念，後發先至，成功贏得了勝利。

開放軟體，成功打造了新的三星；人才政策，讓三星的手機，幾乎攻無不克，好像是一種奇蹟。所以，台灣產業不能再忽視開放軟體的議題了。

## 台灣產業隱憂：只談產品策略、不談戰略

正如本文所提，開放軟體是一種文化，是一個觀念，這個觀念用來打造新的企業文化。這就是戰略。

2007 年到 2011 年底，是 Android 手機發展的第一階段。這將近五年的時間，是人類資訊科技史上非常重要的一個時間，這不只是 Android 手機的崛起，而是全球智慧型手機的戰爭。這五年的時間裡，靠著 Google 強大資源的協助，以及駭客文化下的開發者社群，Android 迅速走紅。Android 的快速竄起，也連帶讓 hTC 品牌快速進向全世界。

這五年的時間，智慧型手機很快地侵食掉功能型手機的市場，似乎是不敗神話的Nokia，也是以不可思議的時間退去光環。所以，這五年不只是 Android 手機的戰爭，更是智慧型手機的戰爭。這一切的爆起與爆落，都與開放軟體脫離不了關係，開放軟體背後的駭客文化，才是真正改變並影響產業文化的人。
向它山之石可以攻玉

Android 智慧型手機的爆起，最裡面也是最深層的因素有二個，一個是開放軟體，一個是駭客文化。不管是開放軟體或是駭客文化，都是社會文化上的改變，也就是 Android 手機的成功，並不是產品策略上的成功，也不是產品定位上的成功，更不只是市場需求面的問題。這一切，都不是產品問題，而是文化問題。

如果能透析這是開放軟體與駭客文化的問題，就能在一開始，就擬定正確的戰略，制定正確的產品策略；如果公司文化在未來無法適應開放軟體與駭客文化，一開始就能做出一些調整。如果這只是市場面需求的問題，大量製造，以及滿足消費者多樣化選擇的機海戰術，就是好辦法；但是，這僅只是產品策略層面，無法擴大影響到公司文化的調整，更無法擬定更長更久的戰略。

如果一家公司，只看最大量的市場需求，只談產品策略，很可能脫離不了爆起爆落的宿命。在 2009 年到 2010 年的這段時間，我也參與了 Android 山寨市場的經營，結論是相同的，大量的山寨機只是去滿足市場的需求，公司本身沒有永續經營的政策，爆起爆落就是它的結局。

三星的成功並不只是「產品在市場上」的成功，他的成功非常的深入。希望台灣的企業經理人，都能看到這篇文章，筆者在經營上的學習對象之一，就是三星。它山之石，可以攻玉，從中能學習到一些磨玉石的好技術。

開放軟體的思惟，以及吸引開發者，也就是建立與駭客社群的關係。這就是戰略。這是台灣產業一直以來都缺乏的思想。
# 第四章：Android 大興時代與影響力

軟體帶來新的競爭者，也改變了產業生態，台灣企業正面臨這波衝擊。如果要做些什麼改變來因應，思考開放軟體與人才政策，正是一個不錯的起點。

影響產業生態的軟體運動有二大波。第一波是Open source，第一波就是正在影響我們的App運動。App運動就是一種個人創作軟體的運動，而這項運動，已經從個人延伸到有小公司。

Android 來了，它帶來了人們最耳熟能詳的現象「App 運動」。實際上，「以 App 運動打造新的商業模式」，始祖是 Apple。而且，App 文化的歷史比我們想像中還悠久。

## App文化歷史攸久

App運動的起源相當早。1990年代撥接網路(Dail-up)曾經風光一時，當時透過家裡的電話線與數據機(Modem)串連起第一個真正的全球網路，當時的網路站點稱為是BBS。許多對撰寫程式碼有興趣，或是有軟體開發專長的玩家，便透過「Fidonet」這樣的傳遞網路來免費分享或販售軟體。

當時還是高中生的我，也利用來自俄羅斯的一套架站軟體(RemoteAccess)在家裡開設了一個BBS站，也利用C語言撰寫了一套BBS的留言板，並且也透過類似的Fidonet的傳遞網路進行販售。這大概是6年級生對「網路」的第一印象。

當時筆者開發的留言板軟體，提供「免費」或「試用」版供各大站長使用。在留言畫面的下方會出現一個「UNREGISTERED」的未註冊字樣，如果站長想把這個字樣換成類似「Registered to Jollen Chen」的已註冊訊息，只需要以現金袋的方式附上註冊費用，郵寄給筆者即可。

提供未註冊版本的軟體，使用者在試用後，可以支付少許的費用，取得功能更多的註冊版，這樣的軟體統稱為 Freeware 或Public domain。請注意，Freeware是試用版的意思，意義上不等於免付費軟體。Free Software指的是「自由」軟體。FSF(自由軟體基金會)在1986年時，就正式定義了「Free Software」，並且希望大家能區分它和Freeware的差別。

在BBS時代大量興起的Freeware文化，被一直保存到現在。現在，大家仍然可以在網路上，找到許多先試用後註冊的軟體，這些大多是獨立軟體開發商，我們稱之為ISV(Independent Software Vendor)。這是最早期的「App運動」。

## Apple創造手機App神話

接下來是大家最熟悉的App運動，那就是Apple的App Store。憤怒鳥是App運動的代表性故事。只要提到憤怒鳥，什麼是App就不需要多說了。

Apple的App Store以及緊接著的Android App，是真正落實「全民App運動」的關鍵。除了Google成功經營App開發者外，Android裝置的高市佔率，才是真正功不可沒的關鍵推手。

筆者認為，App開發者並不是Android App的引爆點，真正的引爆點是Android裝置的高市佔率。Android裝置的第一波成長，是在2008~2010年；當時，有相當多的Android手機被銷售到消費者手上，但還不算是App大成長的時期。因此，2008~2010年只能說是Android手機的播種與灌溉期。這個時期的代表性品牌商就是台灣的hTC。

到了2011年，進入了Android發展的第二個時間。這個時間的代表性品牌商，從hTC轉變為三星。這個時期的三星，最有代表性的產品就是Galaxy以及緊接著的Galaxy S2。三星在2011年開始，成為Android手機發展史的一匹大黑馬。三星成為大黑馬靠的就是他在開放軟體策略上的成功。

沒有hTC與三星這二大品牌商，Android手機不會有今這樣的榮景。大量的Android裝置，透過電信商，銷售到每一個人的手上。而Android App的全球下載數，在2011年也以不可思議的速度，達到一個重要的里程碑－10B(100億次下載)。

## 短短五年、歷經三個大時期

由於時間點並不是很好切割，而且產業的改變快速，拿捏精準的時間點不是一個好主意了，所以我把2007到2011年切為三等分：前期(大約2007~2009)、中期(大約2009~2010)與後期(大約2010~2011)。

Android發展前期，Google、Qualcomm與hTC是代表性三巨頭，雖然hTC在Android的角色在後期被三星取代，但是，沒有hTC沒有今天的Android，是很好的寫照。當時併購Android公司後的Google，需要一個硬體製造的伙伴，當然來到了台灣，找上了hTC。Google並非打算一肩扛起Android的開發，實際上，這是一個不理智的做法，別忘了，這世上還有「駭客文化」。Google希望大家都能參與，於是將Android變成一個開放原始碼的計畫，稱為Android Open Source Project(AOSP)。

AOSP是一個廠商與個人都可以參與的計畫。廠商可以貢獻程式碼，個人當然也可以貢獻自已的程式碼給AOSP。

Google又登一呼，成立了OHA(Open Handset Alliance)，這是一個開發Android的商業聯盟，聯盟裡的廠商有硬體製造廠、有晶片設計商、有電信商...等等。hTC是OHA的一員，他的工作專注在裝置開發上。Google希望OHA的成員，能對AOSP進行貢獻，齊心協心，一起把Android打造得更好用。

Google一開始就是以開放原始碼的方式來經營Android。技術上，AOSP本身是「平臺」的部份，能提供硬體製造廠一個作業系統平臺，可用來打造產品，簡而言之，AOSP是底層系統。Google本身，則是官方維護了Android SDK，供App開發者使用。技術上，Android SDK是AOSP的一部份，從AOSP裡抽離出來，打包成開發工具箱，專門用來給開發者撰寫應用程式。

所以，Android分為二個部份，一個是AOSP，另一個則是Android SDK。

全球第一支Android手機發表了，對駭客來說，這可是一件大事。G1(Dev Phone)，身為全球第一支Android手機，它自然擔負起一個重要的任務，那就是「開發者專用機」。G1的下一代是Nexus One，它是Android發展史上的第二支開發者手機。
不過，對於G1或Nexus One，台灣有些媒體對它們卻有錯誤的解讀。

## 開發者手機G1

Nexus One 是針對開發者推出的 Android 手機。Nexus One 只透過 Google 的網站銷售，並且在不久後，Nexus One下架。媒體以「放棄線上通路」結論，但個人一些有看法在此提出。

Nexus One的出現，普遍被認為是一個高級的「真機實作展示」，用來向手機製造商說明Android手機「就是要這樣做」，並且已達到了一些效果。在 Google I/O大會前夕，Nexus One正式從線上商店下架，媒體都是以「放棄線上通路」的標題做結論。不過，有一些個人看法，在此提出，希望大家不吝指。

Nexus One除了是一個高級的展示品外，它還有一個任務，就是提供好用的手機給「開發者」。在一些技術研討會上，甚致被當作高級禮品贈送。事實上，銷售開發者版本的 Android 手機，Nexus One並不是第一遭。早在 G1 手機上市之時，Google 就曾經透過網路直接銷售「Dev Phone」給開發者。Dev Phone 與 G1 是同一款手機，同樣由宏達電製造。

Dev Phone 很明確就是只銷售給開發者，開發者只能透過網路登記的方式購買，並且每人限量一台。如果你想要一台可以更新 Android 作業系統，或是一個能當技術玩具的 Android 手機，Dev Phone 確實是一個令人興奮的產品。Nexus One 同樣也達到了這個效果。Nexus One 提供一個令 Android 開發者興奮的硬體平臺。

另外一個讓開發者興奮的產品是 Milestone，不虧是「milestone」，自從它出現後，Android Market 上的應用程式數量有明顯的增長。Nexus One 的出現也一樣，這點可以從 Android Market 應用程式的增長數量來觀察。因此，從這個角度來看，Google 確實是一個「稱職的社群與 Android 品牌經營者」。

## Nexus One 的未來

Android是個開放平臺，它能讓每一個開發者都為 Android 手機製作應用程式。早先，當 Android 出現時，「開發者社群的經營」就被認為是 Android 能否能成功的重要關鍵。從打賞重金的開發者大賽，到直接銷售 Dev Phone 與 Nexus One，確實不難看出 Google 經營開發者社群的用心與努力。這能讓手機製造商更放心製造 Android 手機。

因此，不仿這麼想。Google 仍會持續並且專注地發展開發者社群，並且提供更好用的 Android SDK 給開發者。接著再透過一些策略與活動，達到一些另人意想不到的效果。Nexus One 下架，讓「Nexus Two」有了很大的可能性。所以，我們應該更期待的應該是更多的「意外」，並且繼續專注在 Android 的技術與產品領域。

此外，製造廠或系統廠，過去投注許多精神在建立「自有分支」，也就是發展自已的 Android 程式碼。自有分支達到的是百花齊放的效果，我們所擔心，因為大量版本所造成的程式碼分裂問題，實際上並沒有出現。主要的原因是，自有分支可以是封閉原始碼的版本；事實上，自有分支，都不是開放源碼的軟體。自有分支的建立，將使 AOSP 版本（Android Open Source Project）的發展變慢。雖著自有版本的成熟度提昇，可能使 AOSP 的程式碼發展速度持續變慢。

Android OS 以及 Android Market 近期確實得到很大的建設成果，產品也不例外，Android 手機的市佔率是大家有目共睹的成績。從一開始的 Dev Phone，到 Nexus One；如果真的有 Nexus 第二代，再從 Nexus One 到 Nexus Two，它除了繼承第一代的成果外，最可能開啟什麼新頁。可以猜想的是，屆時，線上商店的經營與建設，可能有重大的發展。

## G2手機現身

G2 傳承 G1，它依然是一隻開發者的手機。

2009年初開始，有關Android的消息開始在網路傳開。根據無法證實的消息指出，T-Mobile 即將在五月份(2009)開始銷售 G2 手機，對 Android 平臺來說，這是一個具實質意義的里程碑，代表者 Android 手機的氣勢與話題將再延續。從現在看過去，T-Mobile 的 G1 手機帶來的意義，它並不只是全球第一支 Google 手機，更成功扮演了開路者（帶路者）的角色。

回顧過去，一開始，大家都在謠傳 Google 即將推出自己的手機，並進軍行動通訊產業，但後來 Google 在一場正式的記者會上宣佈成立 OHA 並釋出 Android 平臺後，大家才又恍然大悟，原來 Google 推的一個開放平臺，而不是 Google 手機。

針對開放開放平臺來說，開發者社群期待的是一個開放源始碼（open source）的平臺，因此一開始非完全開放源始碼的 Android 便開始受到一些質疑。Google 的反應夠快，在去年（二零零八年）的6月2日便發表了一則聲明，宣稱「Android 將會 100% 開放源碼」，果然，在10月22日，Google 便正式公開了 Android 的完整原始碼。

Google 的策略相當靈活。Android 雖然是一個開放源碼的平臺，但是卻採取有別於傳統 Linux 手機平臺的授權策略。簡單來說，以 Apache 2.0 授權授出的 Android 平臺，允許電信商（carrier）與 OEM 保留原始碼，也就是 Google 不能保證這些廠商也會公開自己的 Android 版本原始碼，對應用程式來說也相同，「不保證應用程式開發商也會公佈其原始程式碼」。這樣的授權策略無疑是比過去的 GPL 授權更加「商業友善」。

分食 Android 商機似乎成為一個全球運動，在 Android 平臺上開發應用程式，以及電信服務的客制化，成為一個很好的商業模式。從過去的 Android Developer Challenge 大賽作品來分析，Google 與 OHA 從 1788 個參賽者，挑選出 50 個決選者，而大部份的決選作品，都是基於 GPS 與 Google Maps 開發應用程式，其次則是 social networking。顯見大家的看法有很高的共同點。

獨立軟體開發商（ISV）也開始推出 Android 平臺的軟體，或是軟體開發套件（SDK），例如一家名叫 Skyhook Wireless 便推出了移植到 Android 上的定位軟體開發套件（geo-positioning）。從這些現象觀察到，過去開發者所專注的平臺（middleware）技術開發，現在己經被 Android 轉移到應用程式（application）與服務整合開發上了。

從近來的報導或是分析報告來看，各界對 Android 手機的商機都是看好的，這與大家過去對 Android 抱持許多不確定性的看法，己經有了很大的不同。做為領頭羊的角色的 G1 手機功不可沒，G1 為大家做了很好的心理建設。因為它的成功，讓大家對 Android 手機充滿信心，也看到了許多商業機會。G2 若能再交出漂亮成績單，所產生的心理效應想必相當驚人。

## Nexus 7

Google 幾年來不斷與 ODM 合作推出 Android 展示機，除了可以向消費者展示 Android 作業系統的優點，也提供開發者好用的開發機。如果你需要一部硬體好用，軟體資源也多的手機，Google 一系列的手機與平板顯然是最好的選擇。透過這些開發機 Google 也想促進開發者社群投入 Android 開發的意願，而且成果也不錯。最好的例子，就是 CyanogenMod 社群所發展的一系列 Android ROM。

筆者認為，於 2012 年所推出的 Nexus 7 平板電腦，是 Google 第一次真正以消費產品的姿態所推出的硬體。Nexus 7 果然大獲好評。

## 中國市場崛起

近來讀到幾則報導二零零九年移動通信大會的新聞，提到中國在手機產業中，營造了一股崛起的氣氛，有些人更直接了當提出中國手機產業崛起的看法。從產品角度來看，中國在這次大會的產品展示，幾乎涵蓋了所有產品線，可想見中國在手機產業的研發能量頗為驚人。以中興通訊來說，其自主研發的手機產品線，己經涵蓋了各種作業系統，以及三端手機（中階、高階與低階），顯見其產品線的佈局頗為完整。

中國的華為也成功進入全球幾家主要的電信營運商，同時目前也是部份地區的主要供應商之一，可見中國手機產業也具備了電信營運商模式的能力。開放式手機平臺對中國在國際業務的拓業，也會有正向的幫助。

二零零八年全球GSM手機出貨排名，華為以24.4%的佔有率排名第二，己經超過 Nokia。華為在移動通信大會上也展示了使用 Android 平臺的手機，因此在結合網路服務與應用客製化方面，華為做足了準備，有機會透過 Android 手機拓業國際市場。

中國的禹華通信近期也推出了 Android 手機的參考設計，這個參考設計採用 Marvell PXA-310 平臺，這是除了 Qualcomm 外的另一個 Android 手機參考平臺。禹華通信的 Android 手機平臺也有客戶採用了。

現在，中國許多手機廠商陸續備齊了完整的 Android 設計平臺，只要 Android 應用程式的研發能量能到位，或是能善加利用 Android 開發者社群的資源的利用，未來中國手機製造商（ODM）在 Android 客製化手機的市場，會有一定的競爭力。

至於中國本地的 Android 手機市場機會在哪裡，以下就過去與中國業者的往來，整理一些資訊與大家分享。

目前，2G 的 Android 手機（GPRS/EDGE）在中國市場部份，短期還是會有不錯的市場需求，特別與業者合作的客製化手機部份，特別被看好。支援 Android 的 2G 手機參考平臺也相對完善，例如上述提及，禹華通信推出的參考設計，就是屬於 GPRS/EDGE 的規格。

在 3G 手機部份，許多人認為 3G 在幾年內勢必成為市場主流，屆時 2G 手機將會進一步降價，因此 2G 手機本身的利潤空間也會比較壓縮。Android 手機在 3G 的市場，則是需要比較多的資源整合，以及可行的商業模式，這是 Android 手機研發業者的主要挑戰。

針對 Android 平臺的 3G 手機，中國本土的市場機會之一是 TD-SCDMA 系統。原因是，TD-SCDMA 雖是 4 大 3G 標準之一，但起步較晚，成熟度也較低。以這個角度來看，TD-SCDMA 系統的 Android 3G 手機，仍有待研發資源的投入，因此有一個切入的機會點。以市場角度來看，中國最大電信商中國移動也投入不少研發資金在 TD-SCDMA 的手機研發；TD-SCDMA 

目前的主要問題之一就是終端裝置，由此來看，終端裝置開發商會有許多取得中國移動支持的機會。二年後，誰是中國市場的贏家？令人跌破眼鏡，是三星。

## 創建自有版本 打開你的競爭力

過去品牌商面臨的一個問題是沒有自已的軟體。所謂的「自已的軟體」並不是拿別人的軟體來使用，或是將網路上能取得的開放源碼軟體，「誤做為」自有軟體。Android 是一個作業系統，微軟的Windows Mobile也是一個作業系統，他們二者的「本質」上有什麼不同？

Windows Mobile是由微軟所「擁有」的軟體，無法「自由」取得；而Android是開放源碼的軟體，每個人都可以透過網路自由取得，但是你擁有它嗎？

取得不代表擁有。建立自已的版本，能控制並掌握整個框架的開發，才叫做擁有。擁有了自已的Android軟體，你就能修改它，並做出任何你想要的版本，取得(get)與擁有(own)意義上有很大的不同。

過去Linux以及開放源碼給人的迷思是，由於軟體能自由取得，並做修改，因此不需要付費購買微軟的產品。下載Linux核心與開源軟體，故事才正要開始，首先要面臨到的便是工程的部份。沒有自有的Linux技術團隊，只要假以他手，將專案外包，而工程化後的Linux系統，自已仍無法掌握，照著自已的意思儘情地修改。

## 開放源碼軟體的管理觀念

如何擁有自已的軟體，以下是個人建議，請您指教。擁有自有Android軟體的第一個步驟是：建立Android進化版本、即自已的分支。將 Android框架的原始(original)原始碼(source code)建立一個新分支，也就是自已名字的版本。

Google所提供的Android作業系統是「原生版本」，而自有的分支則是「進化版本」。例如：調整Android框架的實作，以加入自有的特性(features)，讓自有的進化版與原生版有所差異。

試想，當我的Android進化版可以提供更炫麗的操作介面(UI)時，使用原生版本的產品便失去了市場性。最佳典範就是 HTC Sense。HTC Sense是HTC手機的專用UI，針對Android手機，HTC Sense能提供更棒的使用性(usability)。

第二、建立商標。Android作業系統採用Apache授權(Linux kernel除外)，而不是較為普及的GPL授權，所以Android作業系統對於商標(trademark)的建立是相當有助益的。商標是企業的一項價值，商標代表「這是我的東西」。當有差異性的Android版本能關閉原始碼，並建立註冊商標時，代表的是一個重要的里程碑：「這是屬於我的 Android版本」。最佳典範，一樣是HTC Sense(tm)。

第三、適度貢獻與關閉原始碼。Android作業系統是開放平臺，開放平臺技術開發講求貢獻。OHA聯盟也是如此。廠商要能持續對OHA聯盟有所貢獻，而提交Android框架的程式碼是一個做法。

OHA聯盟發給會員的門票並非終身有效，因為仍有被趕出大門的例子。另外，基於自有版本提供一套SDK 是非常不錯的做法，例如OMS SDK就是一個典範。

第四、建立應用程式。基於市場與產品建立應用程式，以搭配產品，這是Android作業系統帶來的絕佳機會。是否自創品牌，當然也是一個考量，端看應用程式的價值以及特殊性。進化版Android目前來看，可以有二個發展題目。第一是結合服務的客製化版本，例如：OMS針對China Mobile服務做大量的客製化。第二個是針對UI與使用性做客製化版本，例如上述的HTC Sense。

廠商欲採用Android作業系統，並開發產品，但若不思考如何建立自有的能力，以及創造自有的Android進化版本，是非常可惜的一件事情。最大的盲點在於「外包能解決所有問題」的思維；反之，專案外包(out sourcing)不會是Android能帶來的商業價值，解決方案(solution)才是。

針對個人開發者的部份，Android作業系統給開發者 (developers)最好的舞臺是Android Marketing，因為越多的拷貝數量(即下載數)代表軟體越有價值。

## Android Netbook 的插曲

社群開發者將 Android 移植到 EeePC 後，興起一股「Android 小筆電」討論風潮。Android 小筆電的概念就是這樣來的；由開發者給市場的一個考題。市場上一陣 Android 小筆電產品的新聞，幾家品牌大廠，對 Android小筆電市場更是磨刀霍霍。對於這陣 Android 小筆電的風潮要如何解讀？在此分享個人的觀察與想法，請不吝指教。

Android 小筆電的熱潮，起之於玩家對技術的好奇心；對於 Android 小筆電產品的討論，則是廠商與使用者的期待與想像。從技面的角度來看，Android 小筆電仍有使用介面（UI）上的疑慮，尚不足以產品化。

由於 Android 介面的設計預設對象為手機，因此在小筆電上的畫面表現較不理想，操作方面亦同。Android 小筆電上仍有技術缺口。

基於「應用程式」概念的小筆電，因是「使用習性」的問題，使用者還是喜歡微軟的作業系統，Linux 小筆電還是佔不到便宜。

使用者免不了將 Linux 小筆電與微軟系統的小筆電拿來相提並論。Linux 上有 OpenOffice 辦公軟體，但微軟系統有使用者更習慣的 Office套裝軟體；Linux 上有 Thunderbird 電子郵件軟體，但微軟系統有使用者更習慣的Outlook軟體；無論是上網、電子郵件還是即時通訊，Linux 小筆電上的「應用程式」都讓使用者操作得很沒有安全感。

從另外一個角度來思考。

基於「網路服務」概念的 Android 平臺，因為與微軟系統的小筆電有很大的差異性，因此似乎存在不錯的機會。Android 平臺不基於 Linux 桌面技術，我們沒有辦法將 OpenOffice 軟體，或是 Firefox 瀏覽器安裝在 Android 小筆電上，正好與現有的小筆電有很大的差異性，也給了新產品定位的大空間。

產品定位方面，把 Android 做為取代微軟系統或Linux桌面的想法，反而讓 Android 小筆電失去了這個差異性；當大家開始討論Android小筆電上能不能執行辦公室軟體時，誰知道，會不會又像 Linux 小筆電產品般的結果。

Android 平臺的產品可以擁有更多的區隔性，因此機會之一是尋找或創造不同的產品「使用概念」。現階段 Android 小筆電仍處於技術玩票性質，這是由玩家帶起的概念。要讓 Android 小筆電產品化仍要補齊技術上的不足。

## 機海戰術好嗎

軟體開發是一門很複雜的管理學科，做軟體不是在寫程式碼，當中還涉及許多繁鎖的研究工作，以及程式碼管理工作。軟體研發管理，簡單來說，就是想辦法，把公司打造成像一台軟體開發機器，這個道理，就像是治理人民的機器叫做政府一樣。一但這部機器成形，就代表每個運作環節都已經固定、定型了，意圖改變機器的結構，都可能引發災難。

這告訴我們二個道理。第一、公司的軟體研發模式，一開始就要選對。第二、改變軟體研發模式時，是一家公司體質最虛弱的時候。這又告訴我們一個硬道理：怎麼樣才能把敵人一槍斃命？就是趁它在調整軟體研發模式時。

這道理很簡單，因為調整研發模式時，通常都是產品空窗期，或是盡做出一些死胡同產品。又，為什麼要調整研發模式呢？國父提出的思想，把人分為三種：先知先覺者、不知不覺者與後知後覺者。當產業生態改變，或遊戲規則改變，導致經營者不得不做改變，這屬於後知後覺者。另一種是，有遠見的經營者提早預做準備，這屬於先知先覺者。

不知不覺者，這很好解釋。例如，電人電腦搭載微軟作業系統，這是屬於一種軟體授權模式的研發，但是 Android 手機本質上是一種開放源碼的研發模式。所以，用開發微軟產品的軟體模式，去做 Android 的產品。結果如何，這需要一點運氣。這通常是第一波出局者。

從 2009 到 2011 年這三年間，從 Android 生態系統出局的廠商，幾乎都是屬於這個類型。這些類型的廠商，幾乎因為有過去的一些包袱，觀念一時難以轉變者。

## 機王戰術

台灣商業周刊曾經寫過一篇報導。這則報導出刊後，引發大震撼，網路上有熱烈的討論，甚至有點引起反韓情緒。根據報導，宏達電手機之所以被「打趴」，主要受限於三星的獨家技術 AMOLED。由於三星斷貨，導至宏達電手機出貨不順。

大家都相信這是主要的原因，但是如果沒有三星長久以來所積累的軟體實力，也很難達到王者天下的效果。只能說，時機正好。以機王搭配一些商業策略，著實成功。

因此，筆者認為，AMOLED 僅只是一個層面的原因。另一個層面，仍要看三星的軟實力。三星的軟實力，才是造就機王的幕後功臣。當時的時空背後，是功能型手機切換到智慧型手機的超級過渡期，智慧型手機講究硬體工法，也講究軟體功能。我們相信，沒有軟體，是無法造就機王的。

除了看 AMOLED 的成功，更要看三星當時如何成功打造機王軟體。

從三星的人才政策，到打造三星手機王國的機王戰術，我們可以看出三星有著「救世主」的中心思想。三星認為，對的人才，可以解救一家公司。靠一個「王者產品」就可以建立一個王國，似乎是正確的思想。

不只是三星，蘋果也證明了這個思想是對的。

## 宏碁的阿里雲事件

另外，台灣硬體廠在 Android 的生態中，不斷的犯錯，除了開發方式與人才策略沒跟上外（詳見第六章：台灣硬體產業的技術缺口），在觀念上，誤解 Android 的商業意義也是一個致命傷。

Android 的生態系統，可分為二個部份：

- Trademark
- AOSP

AOSP 單純是為了開發社群而生，這是提供給開源社群的計畫，Google 開放了 Android 代碼與眾人分享。當然，廠商也可以下載這份程式碼，並打造自已的 Android 裝置。在這個階段，並不涉及商業議題。

然而，Android，這是 Google 的註冊商標（Trademark），要讓自有的 Android 裝置上市，而且要使用「Android」的話，就要取得 Google 的授權。所以，這份授權，授與的是商標與其他商業上的權力（如：專利），而不是取得代碼的授權。AOSP 採用 Apache 2 License 釋出，每個人都可以自已地使用這份代碼。

一些廠商誤解 Android 代碼本身是需要授權的，這其實是錯誤的觀念：AOSP 使用 Apache 公眾授權釋出，你只要確實遵守該授權條款即可。

台灣的宏碁電腦，在 Android 的策略上，就發生過這樣的錯誤。

宏碁與阿里雲事件的核心是 Google 要求 Android 的硬體裝置都要通過 CTS 測試要求。CTS (Compatibility Test Suite) 的目的是維護建全的 Android 生態系統。

簡單來說，CTS 相容的硬體，理論上能運行所有 Play 商店上的軟體；Play 商店上的應用軟體，當然是由遍佈全球的開發者或開發商所製作。Google 的理念是希望讓所有開發者的軟體，[都能在所有 Android 的裝置上運行無礙][1]。

[1]: http://www.jollen.org/blog/2012/09/asus-aliyun-cts-issue.html "宏碁與阿里雲事件附錄：到底，哪裡出錯了？從根本的 CTS 談起。"

### CTS 相容性測試

因此，[Google 會對 Android 生態系統裡的製造商做出一些要求][2]。最基本的要求就是上述的 CTS。所有裝載 Android 作業系統的裝置，都必須通過 CTS 測試。CTS 完全是技術問題，這裡面包含了近數萬條（沒錯、單位是萬）的測試案例 (Test case)。這些案例的目的，是為了確保手機的實作品質、實作完成度、用戶體驗的一致性等等。

[2]: http://www.inside.com.tw/2012/09/15/google-stops-acer-with-alibaba "Google 阻止宏碁與阿里雲合作的真實原因"

通過 CTS 測試後，Google 就會把你的硬體加入到「CTS 相容硬體列表」。理論上，必須成為 CTS 相容硬體，才能讓產品上市銷售。問題是，Android 不是一個號稱人人皆可自由使用的開放系統嗎？市面上不是也銷售許多沒有通過 CTS 測試的 Android 裝置嗎？

這個問題又是另一個層次了 (商標授權)，目前先暫不做討論。CTS 是單純的技術問題，我認為一些媒體報導把 CTS 相容性與 Google 的商業戰略牽扯在一起，略有不妥。CTS 是為了幫助硬體廠，它是對大家都有益的必要過程。

Play 商店眾多軟體，你不知道使用者今天會下載哪個應用軟體，如果 Android 裝置在研發時，出了一丁點差錯，可能有些軟體在這個硬體上，會發生運行失敗的問題。CTS 是為了幫助硬體廠，提升產品質量，避開這些技術問題。

我們必須把 CTS 做到 100% Pass，也就是上述 17,000 個測試案例都能通過，再將報告提交給 cts@android.com。然後，你的硬體就成為 CTS 相容設備了。這是 Google 對 Android 裝置做授權的第一個等級。

### GMS 套件與授權

成為 CTS 相容設備後，上面是沒有 GMS 套件的。GMS 套件包含許多 Google 官方的應用軟體，例如：Play 商店、Gmail、Google Map、Youtube、Google Calendar、Google Talk 等等。要取得 GMS，我們就要向 Google 申請授權；有難度的地方就是在這裡。

因為一些考量，Google 的授權合約裡，不一定會授權 GMS 裡的所有軟體。Google 會針對申請者的「基本條件」來客製化授權合約。這些條件並沒有很特定的項目，像是品牌知名度、工業設計、產品相互競爭關係、銷售地區等等，都會被列入考慮。

但不管如何，GMS 裡一個天字第一號的軟體「Play 商店」通常都會授權給申請者。所以，申請者可能只能拿到 GMS 的部份授權，而且也不能使用 Google 商標；這是 Google 對 Android 裝置做授權的第二個等級。

第三個等級就是取得全套的 GMS 授權。根據我過去所參與過的專案來看，這個等級的難度比想像中更高，目前能取得全套授權的廠商並不多。這個等級的授權，能使用 Google 商標，簡單說，就是手機上能打上 Google 的字樣。所以，要知道有哪些廠商取得這個等級的授權，是很容易的。

### Android 的授權等級

Google 針對 Android 裝置的授權：

1. 通過 CTS，授與 Android 商標使用權，但沒有 GMS 授權。
2. 通過 CTS，授與 Android 商標使用權，取得部份的 GMS 授權，但沒有 Google 商標使用權。
3. 通過 CTS，授與 Android 商標使用權，取得完整的 GMS 授權，有 Google 商標使用權。

另外，還有幾點要注意的是：

1. Android 確實是開放平臺，這和上述的說明沒有衝突。將宏碁與阿里雲事件與「Android 邁向封閉」做關聯，是有失專業的報導。

2. Android 的開放有二個層面。第一、開放框架與虛擬機的原始碼，稱為 Android Open Source Project (AOSP)。第二、開放 API，即 Android SDK，人人都可以為 Android 開發應用軟體。

3. Android 的開放性是一個層面，Android 的 Ecosystem 又是另一個層面。Google 以最基本的 CTS 來維持 Android 生態系統的健全。

最後，阿里雲事件來說，不是上述的 (1)，也不是 (2) 或 (3)，這又是另外一個層次的問題。阿里雲，或是其它客製化的 Android ROM，可能都不考慮 CTS，也沒有通過 CTS 測試。如果把這些 ROM 放到宏碁的硬體上，可能真的不行，原因是宏碁或許和 Google 簽訂了 GMS 方面的合約，當中可能包含業界所稱的「反 Android 分裂條款」；不過詳情我們當然無從得知。

犯了這麼明顯的錯誤，顯然是專業經理人的專業度應當受到質疑。

至於，如果把阿里雲放到白牌硬體上，是否就可行？理論上，是。但沒有通過 CTS 測試的話，因為沒有 Android 商標使用權，所以使用上要注意 trademark 的法律問題。此外，也不會有 GMS 授權，如果手機上內置了 GMS 套件的軟體，例如：「Play 商店」，那就可能會被視為盜版。此外，這個情況，也要注意 Apache License 條款裡的 Copyright 與 Patent 等法律問題。

## 訂製 Android ROM 的文化

2012 年，中國興起一陣「定製 ROM」的刷機文化。定製 Android ROM 在中國已經是一個熱門的研發項目。定製 ROM 的目的無疑是為了搶佔互聯網的商機。在不違反 Apache License 與 Android 商標權的前提下，廠商可以自由地移除 Google 服務，並且加入自已的訂製服務。

這是網路版的圈地活動。訂製 Android ROM 是 AOSP (Android Open Source Project) 的分支 (Branch)，同時也以刷機方式，提供用戶自由替換硬體上的操作系統。例如，不喜歡官方 Sense UI 的用戶，可以將手上的 HTC 手機刷成 MIUI。

用戶刷機，到底刷上誰的 ROM，這件事情真的很重要。因為這是一種渠道 (通路)。能否掌握刷機渠道，影響網路圈地競爭成敗。例如：我們可以想辦法讓所有 HTC 手機的用戶，都刷上我的 ROM。當然，我的 ROM 裡面，都可以把別人 (Google) 的服務拿掉，換成自已的服務。

除了新聞上曝光的阿里雲外，在[中國還有哪些訂製的 Android ROM 呢][3]？讓我們來總覽一下。

[3]: http://www.jollen.org/blog/2012/09/most-popular-android-rom-china.html "宏碁與阿里雲事件附錄：除了阿里雲，中國還有哪些 Android ROM？"

一、CyanogenMod (CM)：這是由 Cyanogen 社群所製作的 Android ROM，普遍受到中國社群與開發者的喜愛。Cyanogen 可以說是 Android ROM 之父。目前筆者所開發的多核心 Android ROM 也是建構在 CM 的基礎之上。所以，CM 是巨人，大家都站在他的肩膀上。

二、阿里雲：由阿里巴巴所推出的版本，主打雲計算，提供像是雲儲存等服務。阿里雲當然也把阿里巴巴的消費服務整合進去了，並且也替換掉通訊錄、日曆、搜尋引擎、郵件服等服務。這也難怪 Google 有話要說。

三、百度雲：最新加入戰局的 Android ROM。百度雲於 2012 年 6 月 4 日推出，不用介紹也知道百度雲整合了自家的搜索服務。Dell 百度雲手機就採用了這款 Android ROM。

四、樂OS (LeOS)：聯想推出的 Android ROM。

五、TITA。這也是最近加入戰局的 Android ROM，發佈於 2012 年 4 月份，開發者是騰訊。

六、樂蛙OS：針對千元以下雙卡雙待智能手機開發的 Android ROM。這樣一說就很明顯了，這是專門針對聯發科平臺所訂製的 Android ROM。

介紹到這裡，大家應該可以知道，為什麼低價手機的 Design house (過去被大家稱為山寨商) 只要專心做好「品牌硬體」即可。中國的低價智能手機市場需求，都還沒走到山腰，接下來的需求量會呈現很陡峭的向上趨勢。但是很可惜，過去二年缺乏佈局的台灣供應鍊，將完全沾不到好處，原因是中國供應鍊已經能 100% 自製自足，並且競爭規則也改變了。

七、點心OS：這是在創新工場裡誔生的 Android ROM，可以說是中國訂製 Android ROM 的第一家，出現時間較早。開發商北京風靈創景科技是創新工場投資的第一家公司。點心OS團隊過去也拜訪過台灣的硬體廠，不過台灣的硬體廠對這個項目反應似乎較冷淡。目前合作廠商名單裡也有宏碁。

八、MIUI：把 MIUI 放在最後當壓軸，這就是小米公司所推出的 ROM，目前小米手機就是搭配 MIUI 出貨。MIUI 也是基於 CyanogenMod ROM 所訂製的版本。MIUI 支援的機型較多，你可以把三星、HTC 或 Moto 等眾多手機硬體，刷成 MIUI。

小米手機的高知名度真的不必多說了，它的 MIUI 確實得到許多用戶的支持與肯定。刷機文化將讓傳統的手機市佔率計算公式失真。原因很簡單，例如：每賣出的 10 支 HTC 手機裡，就有 3 個用戶把機器刷成 MIUI，這 3 支手機到底要算 HTC 品牌還是算 MIUI 品牌。

所以說，市佔率以後要分為硬體市佔率，以及互聯網裝置市佔率二個數字。以上述的例子來說，被刷掉的 3 支 HTC 手機還是要算在 HTC 的硬體市佔率裡，但是卻要加到 MIUI 的互聯網裝置市佔率上。結論是，Android ROM 以及刷機文化，會「刷」掉傳統品牌的互聯網價值。當然，這些廠商都意識到這個現象了，也正設法擁抱中國的互聯網。

「刷機」，這是由開發者社群所帶起的文化，這個議題在第六章：開放軟體改變社會文化，還有更進一步的探討。# 第五章：開放創新管理

Open Innovation，開放創新。University of California, Berkeley 的 Henry Chesbrough 教授在他的著作 Open Innovation: The new imperative for creating and profiting from technology 裡提出了開放創新 (Open Innovation) 一詞。

Henry Chesbrough 教授目前是 University of California, Berkeley 的開放創新中心 (Center for Open Innovation) 總監。開放創新從多個面象來探討研究與發展 (RD) 的新現象，當中最為人津津樂道的就是開放源碼 (Open Source) 文化。開放創新探討「創新」的新模式，其中最基本的課題就是，分析產業如何取得創新的泉源。

## 外部的創新力量

在 Chesbrough 教授的開放創新著作裡，特別討論到典型的內部 RD 團隊，不再是公司重要的策略資產，為什麼呢？主要的原因是網路與社群的興起，讓很大比例的創新是來自於公司外部，而不是公司內部。Hacker 文化則是主要的一個原因。

八零年代開始，網際網路急速地發展。被稱為 Hacker 的軟體高手，透過網路集結並分享自已的軟體；其中有一個相當有代表性的人物，叫做Richard M. Stallman。他特別喜歡讓大家「自由地」使用或修改他的軟體，例如：GCC (Linux 與 Android 使用的編譯器)、GDB (Linux 與 Android 使用的除錯器) 等。

Richard Stallman的理念得到Hacker們的熱烈迴響。於是為了保障「使用與修改軟體」的「自由」，他成立了一個基金會，稱為「自由軟體基金會 (FSF, Free Software Foundation)」。FSF組成了一個律師團，擬定了一份保障「軟體使用與修改自由」的授權合約，供取得這些軟體的個人或廠商共同遵守，這份合約就是名聞遐邇的公眾授權條款 GPL (General Public License)。

在開放創新的討論裡，GPLv2 成為重要的議題，包括隨後而至的 Apache 授權條款，都是開放創新的源動力。Hacker、社群、GPLv2 與 Apache、自由軟體與開放源碼，都是開放創新的元素。以 GPL 授權釋出的開放源碼軟體，最知名的就是 Linux 作業系統核心。

這是 Hacker 文化下的代表性產物。透過網路的連結，Linux kernel由超過五十萬個開發者共同「集體創作」而成，這也是現今我們所熟知的「社群文化」。許多新技術與新概念，就在這個社群裡產生了，所以，許多大公司便開始參與 Linux 作業系統核心的開發社群，這些公司也 Donate 社群。

Chesbrough 教授在他的著作裡也提到，在開放創新的模式下，創新想法與 IP 的取得方式更為多樣化，其中一個方式便是透過 donation 的模式來取得。另一個知名的開放創新模式，稱為 Hackathon。1999 年開始了第一次的 Hackathon 活動，這是開發者的聚會，一些開發者聚集在一起，在很短的時間內，把想法撰寫成實際可執行的程式碼。

知名的 PhoneGap 專案，就是在某一次的 Hackathon 活動中誕生。PhoneGap 是開放式創新的代表性專案之一，IBM 曾贊助 PhoneGap 開發一段時間。PhoneGap 的開發團隊後來也成立公司，這家專門開發 PhoneGap 的開發商，後來被 Adobe 併購。

從 Dreamwaver 5.5 版開始，設計師可以利用網頁的模式來開發手機 App，這完全是 PhoneGap 專案的功勞。拜開放創新模式下產生的 PhoneGap 之賜，Adobe 的 Dreamwaver 產品線，取得了一些創新。從 Linux kernel 開始，到現在的 PhoneGap，這都不是任何一家公司的成果，這些都來自於外部的力量。難怪 Chesbrough 教授會這麼強調「外部的力量」。

近期筆者與幾家科技廠的高階主管，討論到開放創新的管理模式時，他們會認為這是一個有待證明的管理模式，並且因為這種模式過於鬆散，這種無法集中管理的專案，是不會成功的。可見這些傳統核板的管理思惟，已經成為台灣硬體產業轉型的障礙了。

## 引進精實軟體開發

Lean Software Development，精實軟體開發。另一個開放創新與管理的支柱就是 Lean Software Development。Lean Sfotware Development 的概念源自日本 Toyota 的生產系統，後由 Agile 社群將之導入軟體工程領域，成為敏捷開發模式的重要思想基礎。

在敏捷開發模式的發展過程中，Lean Software Development 的觀念不斷被討論；不久後，便由 Mary Poppendieck 與 Tom Poppendieck 將其發展成一套系統化的模式，Mary 與 Tom 同時也提出了 22 套工具，以落實 Lean Development。這是 Lean Software Development 的起源。

直至今日，App 產業的成形，以及大量的創新網路服務被發展出來，又再強化了 Lean Software Development 的重要的。現在軟體產業，已由技術導向的行業，轉變為文化與創意的產業。因此，Lean Software Development 方法論，結合 Lean Startup 創業模式，成為重要的管理思想。

今日的軟體開發，講究精實模式（Lean Software Development），敏捷開發方法的 Kanban 方法論，部份相當符合精實模式的精神。Kanban 方法論追求打造一個自我組織型（Self-Organized）的研發團隊，且主要以外部開發者為主要資源。這一點與Chesbrough的理念不謀而合（Chesbrough 2006）。這個部份的管理經驗，是台灣各大硬體廠所久缺的重要元素。

Lean Software Development 的其中一個法則（Lean Principles）就是：滅少不必要的浪費，這點與精實創業（Lean Startup） 的觀念一致，也和原始 Toyota 的精實生產系統一致。這個觀念在許多討論 Lean Startup 的文章都有提到。對於新創團隊來說，所謂減少不必要的浪費，可以先以下二個角度開始。
creativeLabs Office

第一、避免不必要的內部溝通成本。Lean Startup 要表達的深層精神應該是：「先推出最有用的功能」，並專注服務固定的幾位使用者，讓第一批使用者滿足你所推出的產品。敏捷開發與 Lean Software Development 都提出實際的工具（有些工具指的是一套系統化方法），來幫助團隊解決這個問題。

第二、善用外部資源。以筆者近期的一個 Startup 計畫為例，將這個網站上線的硬體成本，大約只要美金300元左右；這與12年前的環境相差百倍以上。當時，我可能需要一個小型機房，或是 Co-Location 服務，加上頻寬費用，初期資金可不止要3萬塊美元。善用各種免費資源，或是付費服務（例如：Amazon EC2），都能減少不必要的浪費。另一個浪少良費與提昇效率的方式，就是使用開放源碼元件，這也是 Open Innovation 的核心觀念之一。

我看到有些現象是，新創公司盲目追求組織架構，許多傳統科技公司的新創過程，也太過於強調組織策略，這些經常埋下了日後的敗因。一個精實模式下的軟體開發，經常不需要依賴傳統的組織策略。對於經營 Startups 的團隊來說，在日後取得創投的資金浥注後，需要好好地思考這個議題。

例如，現在的組織策略，很難說明如何使用 Github 這樣的工具，創造成功的 Startup 計畫。更不用談，有些 Startup 團隊，更是以虛擬團隊的形式運作。在這裡提到的組織策略議題，並非要表達組織策略不具重要性，而是要強調如何採用新的管理方式來執行它：不能一味地 COPY 別人的組織結構與管理方法。

Lean Software Development 與 Lean Startup 同樣講求效率與消除浪費，如何善用現有的各項工具、技術與資源，以及導入新的管理方法與開發觀念，都是 Startup 團隊必須要不斷學習的新知識。到這裡就不難看出，Lean Software Developemnt 與 Open Innovation 的思考，是相輔相成的關係。

## 三星的開放創新中心

自從三星將開放源碼做為軟體經營的主要戰略後，現在又更進一步，在矽谷設立開放創新中心（Samsung Open Innovation Center），藉此打造更大的人才平臺。三星的開放源碼戰略，仍至於開放創新中心，都圍繞在「人才」的層面。

三星在 2013 年 9 月 14 日於矽谷舉辦的「創業公司如何全球化」會議中提到，三星開放創新中心的工作，主要為創業加速器（accelerator）和投資。創業加速器與投資，很明顯就是從天使投資人的角度，成為創業者早期的投資人。

三星，一家已經是世界上最大的硬體製造公司，用微觀的角度，去做宏觀的事情。開放創新，將會是開放軟體後，另一個改變世界的力量。從 2013 年開始，第一波的網路創業潮開始，這一年可說是 Startup 元年；Startup 創業風潮，是開放創新的代表性文化。

三星在成為世界的硬體巨獸後，還能保有如此膽大心細的公司文化，預見不久的未來，大約在 2013 下半年左右，第四代的新三星雛型將浮現；我們將能推斷，三星的下一波競爭力將建構在硬體結合創新的網路服務上。

軟體與硬體的整合，其戰場將更進一，延伸到軟體、硬體與服務的整合。

## 創業是開放創新的主要文化

2013 年出現大量的 Startup、天使投資機構與創業加速器，這個現象幾乎能斷定未來三年內，也就是 2014~2016 年間，將是網路產業的另一波革命。傳統的硬體製造商，面對新一波來勢兇兇的變革，要怎麼因應？筆者提出幾個建議：

1. 開放創新做為公司的經營戰略：這點與開放源碼的戰略地位相同，都在於「人才」的部份。傳統的招募制度，已經無法吸引到優秀的軟體人才；傳統的招募制度，可能完全失靈。

2. 經營開放創新業務：三星的開放創新中心，將開放創新中心做為一項業務。筆者認為這是相當可行的觀念，將「天使投資」與「收購」做為主要業務，不但能取得大量的外部創新資源，也能達到直接吸納（收編）人才的目的。

創業如果是開放創新的主要文化，我們就要把員工的觀念，提昇到創業者的層次；把專案的觀念，提昇到育成與加速器輔導的層次。最後，把收購做為是一項業務。

在開放創新的生態體系中，創業家、天使投資人與收購者，是不可或許的三個元素。如今，能做為收購者的超大型企業，或是手上握有現金，具收購實力的中大型企業，將面臨市場開發飽和的問題；收購新創公司，將可成為成長的一個動力。

關於創業家與天使投資人的議題，將在第七章說明。

## 開放創新是業務

Marc Shedroff 說：「他認為做加速器、投資和收購已經不是三星的一個選擇，而已經是一項關鍵業務。」開放創業是一項業務（Business），所以三星與創業者之間，應該是一種生意關係。筆者認為，這是很合理的，這是一個很公平的 Win-Win 關係。

目前，台灣部份企業開始經營「育成中心」，如果從資本家的角度出發，企業與育成企業的關係，比較偏向是一種交換關係。傳統的育成中心，與開放創新中心的思想，有哪些細微的差異，筆者就自已的觀察，整理如下：

### 新形態的競爭力：開放創新模式

在開放創新的生態系統中，創業家、天使投資機構與收購者，是最主要的三個角色。預計從 2013 年底開始，這會是開放創新模式的主要商業模式；並且會持續至少五年的時間。現階段看來，三星不但掌握住了未來五年的產業主流價值，而且還在這個開放創新的主流價值浪潮中，扮演天使投資機構與收購者的雙重角色。

開放創新是一種新型態的業務模式，而且將不分行業。現今的軟體產業，經過三十年的演化，已經成為一般化的知識。例如，不管哪一個行業，都在用 Mobile Apps 做行銷，或是經營客戶關係等。從這個角度來看，未來幾年，「開放創新」，將成為各行各業轉型、升級或建構新爭力的最佳模式。

### 生技領域的開放創新

## 印尼的開放創新現況

在 2013 年的九月份，筆者帶領 Moko365 團隊至印尼進行 Startup Engineering Camp 的 Workshop 活動。以下和大家分享，在這段期間的所見與所得：

- 印尼的手機市場，仍以 Feature Phone 為主，比例大約 80% 左右
- Smart Phone 市場，以 Blackberry、Nokia 與 Samsung 的大宗
- HTC 目前在印尼的知名度尚低，使用比率也不高
- 資訊行業，仍以 Microsoft 平臺為主
- Web 方面的工程師，幾乎都是以 PHP 與 Java 為主
- Startups 的風氣在大學頗為盛行

這次的教育訓練活動，Moko365 看到了幾個 Startup 團隊的作品簡報，這幾個 Startup 都是學生創業。這代表一股創新的力量，已經在向下紮根當中。根據學員的說法，他們之所以接觸 PHP 與微軟開發工具，是因為學校的關係。

不管在什麼地方，從教育層面著手，向下紮根，培養學生的思考與創造力，都是建立國家未來競爭力的根本方法。從台灣的教育現況，就可以知道台灣未來十年的國際競爭力表現了。

來檢視一些印尼的基本條件，做為日後與印尼合作的決策參考。

### 首都雅加達成長速度驚人

### 地理條件

### 手機市場現況

路透社在 2013 年 9 月 20 日的一則[新聞][1]指出，生產黑莓機的公司，即將發佈的財報，可能面臨十億美元的虧損，而且可能全球大裁員。

即使如此，黑莓機仍是印尼最受歡迎的手機之一。BlackBerry、Nokia 與 Samsung 是截至目前（2013 年 Q2）為止，在印尼使用率最高的手機。台灣生產製造的 HTC 手機，在印尼的知名度仍低。

總體來說，功能型手機（Feature Phone）仍然是印尼的主流，[大約佔有 86% 左右的份額][2]。智慧型手機之所以只佔約 14% 的份額，關鍵仍在價格。由印尼的社會結構來看，不難了解，為什麼價格低廉的功能型手機，仍是大宗的原因。

以智慧型手機市場來說，仍以追求時尚或商業需求為主。筆者曾經在印尼和一個官員的餐敘上聽到這點。三星的形象與品牌知名度，成為追求一些時尚人士的首選。

從這個故事，就可以了解品牌的重要性。經營品牌，並不只是大打知名度，也不能只靠強力放送的廣告。


## Mobile First

無論是資訊發達國家，或是資訊發展中國家，「Mobile First」已經成為一個共通點。

以印尼為例，大多數首次接觸 Internet 的用戶，都是使用手機上網。所以 Mobile First 成為一個開放創新的重要觀念。Mobile First 的概念，依據資訊發達程度而略有不同：

- 資訊發達國家，多利用手機來瀏覽資訊、收發郵件、參與社交網路以及進行電子商務
- 資訊發展中國家，以電子商務為主，其次是參與社交網路，最後才是瀏覽資訊、與收發郵件

以印尼為例，eCommerence 最視為是一塊處女地，具有巨大且尚未被開發的商機；許多印尼的 IT 公司，以及新創事業，都把 eCommerence 列為優先經營項目。在印尼，手機上網不是智慧型手機的專利，更多人是使用功能型手機上網。這也是為什麼黑莓機，早先幾年在印尼受到如此歡迎的一個原因。

印尼首都雅加達（Jakata）名列使用 Twitter 最活躍的城市。



### Responsive Design

技術上，Mobile First 指的是：「以手機閱讀界面為主的設計」；目前大部份流行的 CSS Framework，都具備跨裝置的排版能力，無論是手機、平板或個人電腦，一份 HTML5 文件，就可以在不同裝置、不同尺吋的顯示屏上，自動呈現出不同且合適的排版（Layout）方式。這種 UI 的設計，稱為 Responsive Design。


## 開放創新是一種新的合作架構

開放創新不單只是概念，更可以做為一種業務。從企業管理的角度來看，它更是一種合作架構。


[1]: http://www.reuters.com/article/2013/09/20/us-blackberry-warning-idUSBRE98J0V220130920 "BlackBerry warns of big loss, 4,500 job cuts; shares dive"

[2]: http://ansr.io/blog/indonesia-market-trends-ecommerce-mobile-social/ "Top 2013 Indonesia Market Trends Revealed: eCommerce, Mobile and Social Sectors Skyrocketing"

## 貢獻計費是一種開放創新管理法

衡量貢獻，是重要的管理方法，一般認為它是一種結果式的管理方法，但其實有別。

軟體團隊的管理，要採取貢獻式的做法，可以使用計量工具來計算軟體工程師的貢獻度。或許，這是很多專業經理人知道的觀念，但如何計算貢獻度就是個大問題。 我的看法與建議，具體來說，計量工具就是行數、報告字數、圖表數量等等。計算程式碼行數決定貢獻度，看來有點不可思議，茲分析如下。

將軟體工程師定調為知識工作。很簡單，把軟體開發歸納為知識與文創產業。軟體工程師，就是知識工作者，軟體工程師就像是一個作者。作者是最典型的知識工作者，普遍的社會價值觀，對文字工作者的計費方式，採取的是稿費。例如，我寫這篇文章是1000個字，那我就會有1000元的報酬。

如果今天我出版了一本著作，我可以收到版稅。版稅的計算是「售價*版稅比率」，例如，這本書的售價是350元，出版合約議定的版稅是10%，每售出一本書，我就可以得到35元(350*10%)的版稅。如果賣出是1000本，我可以拿到35,000元的版稅。這是用字數來計費的行業。

美術界基本上是以油畫的面積大小來計費。一張名信片的大小稱為「一號」，十張明信片的大小就是十號，畫作的價值就是以號數做為基礎。例如，某畫家的身價，一個號是十萬，十號畫作的市場價值就是一百萬(10萬*10)。稿費與版稅基本上也會考慮作者的價值，有些名作家的稿費，每個字都是比一般人多好幾倍。

程式碼也可以採取這種計費方式。一個程式員撰寫了100行程式碼，這個數字就是計費依據，也是程式員的「貢獻」。這個貢獻價值多少錢，就要考量市場價值。

對出版商來說，文字的價值，在於文字被售價到市場後才能產生。油畫的道理也一樣。一篇1000字的文章，跟一篇10,000字的文章，何者值錢？如果前者被市場買單，後者滯售，1000字就比10,000值錢。如果稿件不會接受，那就沒有計費問題。

結論是非常容易理解的，1000個字的稿件被接受後，出版商才會計費，作者得到1000元的報酬。所以是，結果管理不等於貢獻管理。因為被退稿的文章，同樣是作者的產出，這是有結果(results)的。但被接受的文章，則是貢獻，也就是原作者的文字對社會知識的一種貢獻。

所以，我把這個觀念稱為「貢獻計費」，軟體人才的管理不能採取結果管理。上述程式員的程式碼，何時有價？公司在什麼情況下，可以做計費動作呢？取決於公司產品。例如，如果程式員的100行程式碼，被收錄到即將發佈的產品，那麼這就是貢獻。至於如何計費，可以考量程式員的年資等因素。一個菜鳥程式碼的價值是每行1元的話，100行程式碼的貢獻就是100元。

沒有被放到產品上的程式碼，就不算是貢獻。從這個角度去看，結果和貢獻的層次不同。如果可以清楚執行貢獻計費政策，便能解決許多眼前的問題。例如，台灣科技業做軟體，一向有能者多勞的問題，特別這個問題是陳年宿疾。

採用貢獻計費方式管理軟體團隊，讓資深軟體工程師更有誘因在技術領域深耕，因為他每行貢獻的價值，可以是菜鳥工程師價值10倍，獲得的報酬更多。歐美優秀且資歷豐的軟體工程師，往往能取得到比高階主管更優沃的年薪，就是這個道理。

在現今的人類社會上，僱用有經驗的技工往往要付出較多的費用，也是這個道理。有經驗的技工，可以減低風險，提供質量更高的服務。有經驗的技工，往往手法更精細。

台灣科技業有一個惡習，「資深工程師未來就是要當主管」，以晉升主管職為職場最高戰略目標，而不是以提升技術品質與能力為主，這就是台灣科技業二十年來一直無法建立軟體實力的一個深層原因。有了這層的管理機制，資深軟體工程師，會更願意往技術領域前進。

在台灣，一個管理有問題的軟體團隊，經常有救火隊文化；也就是在專案接近尾聲時，不斷的拉人來解決軟體上的問題。

在這個環境裡，部門主管可能為了自己的績效，或是來自於更高層的壓力，在趕專案，趕出貨時，會指派有能力者協助解決技術問題，也就是幫忙救火。但是，往往出現問題，並不是屬於員工自已的責任，而是其他人所留下的。

臨危受命，解救一個不是自已造成的錯誤，這就是救火隊文化。在一個團隊裡，這種文化，會使得團隊出現不工平的現象。往往工作會從能力較差的員工，轉移到能力較好的員工身上，能力不好的員工，自然不會是主管眼中的救火隊成員。

但是，不這麼做也不行，因為能力優秀者必須扮演所謂的關鍵人物（key man）角色，否則產品無法順利出貨。雖然關鍵人員經常比較得到主管的喜愛，但久而久之，責任歸屬劃分不清是一會事，輕者人事問題衍生，重者有劣幣逐良幣的效應。
# 第六章：開放軟體改變社會文化

開發者社群（Developer Community）可以改造商業規則。先從教育問題，以及軟體框架的本質說起。

## 教育問題

「開發 Android」是台灣科技業的全民運動了。未來幾年，如果要尋求更大的突破，並提升整體軟體開發能力，根本的做法與策略為何？個人看法是「落實軟體工程的基本教育」。以下是個人對於「軟體人才培養」的看法與心得，請不吝指教。

提昇 Android 軟體能量，我們的當務之急是：培養一批「架構分析」的工程師。架構分析需要考量的層面較廣，包括技術面與產品面。軟硬整合的工作，幾年前訴求的是硬體驅動程式與系統軟體，主要工作是效能的提昇與優化，這是從硬體層面思考的軟硬整合。從產品層面重新思考軟硬整合，涉及的層面會放大至中間軟體（Middleware、Application Framework）、應用程式（Application）以及網路服務等。

架構分析的重點工作之一，在於了解 Application Framework 與驅動程式（硬體）間的關係，使用各種現有的技術來整合系統，並提出更好的架構設計方案。架構分析的技術屬於「軟體工程」領域，而不是硬體或系統程式領域。但具備驅動程式與硬體經驗，可以幫助工程師找出更好的架構設計方法。

Android 是軟體框架的技術。台灣廠商得天獨厚的優勢在於，過去積累大量的IC設計、硬體主板、驅動程式與系統軟體經驗，若能補足軟體框架的分析與設計能力，未來競爭力將有很大的想像空間。因此，導入架構分析技術，培養架構分析工程師，理論上能讓我們發揮這項得天獨厚的能力，建立獨特的競爭力。這也是三星（Samsung）正在積極進行的工作。

落實軟體工程教育是根本，必須從教育做起。軟體工程所討論的「軟體框架」就像資訊科學的「位元運算」一樣，屬於通識學科。軟體框架技術，重度依賴這些基礎學科：物件導向（OO）、物件導向語言（OOP）、物件導向分析與設計（OOAD）、分層架構設計、設計模式（Design Patterns）等，這些知識缺一不可。

## 軟體框架 (Software Framework ) 的四大特性

以下針對軟體框架做簡單的說明，以做為研究「軟體框架」的起步點。軟體框架具備四項特性：控制點反轉、預設行為、不可修改性與擴充性。第一、控制點反轉（Inverse of control），整體來看，控制應用程式執行流程的人，是軟體框架，而不是應用程式本身的函數呼叫關係。這與一般循序式的結構化語言（如：C語言）很不同。

第二、預設行為（default behavior），軟體框架本身都有預先設定好的行為。這些行為通常都是預先定義好後，才釋出軟體框架。所謂的「行為」範圍廣大，例如同步呼叫、非同步呼叫、阻塞式I/O等。

第三、不可修改性，這是軟體框架相當重要的觀念。以 Android 為例，其 Application Framework 的程式碼「不能」修改，開發者「不能直接改 Code」。意思是我們下載 AOSP（Android Open Source Project）程式碼後，不能直接修改框架層的程式碼。若直接修改 Android 應用框架程式碼，在編譯時期便會出現警告訊息。直接修改 Android 應用框架程式碼也會造成 API 相容性的問題，可能無法通過 CTS，導致產品無法上市，不可不重視。

最後是擴充性，在不能直接修改軟體框架的前提下，我們如何「加入自已的功能」至 Android 框架呢？正確的方法是以覆載（override）方式進行擴充（extend）。覆載是物件導向領域的基本知識，也是開發 Android 應用框架的重要技術。撰寫「應用程式」補上軟體框架所沒有的功能，也是「擴充性」的另外一個做法。現在正在進行 Android 開發工作的我們，具備這四個基本觀念了嗎？從以上的介紹便能發現，未來如果要在 Android 應用框架開發上有所突破，軟體工程教育就必須要落實，畢竟這是軟體開發的基本學科。

## 台灣硬體產業的技術缺口

教育問題，以及軟體框架的本質，到底怎麼改造了商業規則，現在來細節說明。

第一、根據我在 2007 至 2013 年間的 Android 企業訓練經驗來看，台灣的硬體廠，大多是以「直接修改代碼」的方式來做開發。但根據前面的說明，所謂的軟體「框架」，技術上是不能（或應儘量避免）直接去修改代碼的；應當是用擴充的方式，也就是「面向對象設計」的方式來進行。

第二、台灣學校教育，無法養成 Android 時代真正的軟體框架人才。原因不外乎是學校課程以及師資的問題。實際上，學校教的知識，與真正 Android 框架的開發技術，有相當大的落差。

無論是開發方法，或是學校教育、人才，都出現大空檔，這就是為什麼這六年下來（2007 ~ 2012），台灣在 Android 生態體系中，仍無法建立價值、仍處於外圍位置的重要原因。

有三個重要的原因，可能會讓全球的 Android 發展，慢慢傾向至中國大陸：

- 小米機的掘起、小米本身絕對自主的開發能力
- Google 從 Android 4.x 版本開始，略策轉向
- 2014 年將引爆第二波的智能手機市場需求，其中可能超過三成的市場集中在中國大陸，並且 Android 裝置的比重升高 

中國大陸很可能成為 Android 的主要市場與開發重鎮，台灣在 2014 年後應何去何從？

## 軟體人才搶奪戰越演越烈

軟體成為熱門搶手的職缺，可借台灣在人才政策上無法與時俱進。以「招募」為主的人才政策，以及工業化時代延續下來的管理思惟，讓台灣面臨人才的危機。

軟體人才搶奪戰不但越演越烈，而且到了快擦槍走火的程度了。2012 年底開始，近半年的時間，從事軟體開發的工程師應該可以發現，工作邀請函，或是獵人頭公司的詢問電話，有大幅增加的情況。而且，工作機會有很大一部份來自於大陸。

台灣公司留不住軟體人才，最主要的問題有二。第一、主管缺乏誠信，經常言而不實，或是畫大餅卻沒有執行力。第二、公司沒有願景，員工沒有目標。次要的問題也有二：公司給予員工的生涯規劃協助不足，以及薪資幅利未能滿足期望。最後二個問題是管理面問題，改善公司管理便能得解決。前二個問題，則是人本的問題，並不是管理制度就能解決。

根據我的觀察，主管不誠信，以及工作上失去目標感，常是內部優秀人才決定離職的主因，而這正是許多台灣企業面臨的問題，正好也加速了人才流失的速度。 去年筆者也曾經發表過人才流失的觀察文章，一年後這個問題不但未獲得解決，並且越演越烈了。台灣的企業主，勢必要做好優秀員工大量被挖角的心理準備，特別是軟體工程師。

軟體工程師已經是職場大熱門，這歸功這五年來的智慧型手機大戰。根據我在業界的實地觀察，優秀的 Android 軟體工程師需求可說是前所未見的猛烈。另一個需求旺盛的職務則是 Web 相關的研發工作。由於大陸的網路行業比台灣更為成熟，規模更大，這方面的軟體工程師，也成為獵人頭的對象。

軟體工程師真的出頭天了。台灣傳統的招募制度卻無以為繼，只做校園招募，或是掛掛人力銀行的職缺。這種過時的做法，是無法找到優秀的軟體人才的。相較起來，大陸企業的做法較為靈活。一些大企業（如：華為）有自已的培訓機制，人才從內部養成。另一些企業，則是透過微博等各種方式，來挖掘人才。

## 如何成為搶手人才？

大陸企業獵人才的方式靈活又多元，因為，我有幾個建議供學生，以及年輕軟體工程師參考，你也能成為搶手的軟體人才。

第一、主動發表技術文章。這點絕對是五星級重點。許多大陸企業的 HR，非常熱衷於探索這類的人才。如果你有一個微博，不定時發表有品質的文章，很容易就能得到企業的注意。

第二、參與開放源碼專案。開放源碼專案的開發者或貢獻者，經常能爭取到非常好的公司，以及工作條件。所以，現在許多開放源碼計畫，經常能看到主動參與的大陸軟體工程師。

第二點我認為是非常有用的履歷。不過，根據過去和台灣一些人力資源主管的交談經驗發現，對於這個部份，他們完全沒有任何概念。可見台灣廠商會鬧軟體人才荒，本身也要負很大的責任：池溏有魚，自已撈不到。

第三、發表 App。發表 Android App 到 Play Store，就有很大的機會成為被鎖定的對象。這點是我近幾個月，和部份廠商接觸得到的訊息。他們有專人在 Play Store 上尋找軟體開發者，只要是有水準的原創 App，幾乎都能得到非常優渥的錄用薪資。

第四、參與研討會或社群活動，並結交朋友。交到一個好朋友，在軟體圏子裡是很重要的事情。如果你朋友認同你的能力，在 QQ 上就能幫你介紹到好工作。有些企業有所謂的介紹制度，因此透過引薦是目前很熱門的做法。根據觀察，引薦相當有用。

無論是透過什麼方式，為自已的職涯鋪路，「專業」才是根本。不斷學習新技術，以及深化自已的專業能力，是軟體人的基本修練。有些學生進到職場後，便不再進修，僅靠著在學校得到的微薄知識，是非常單薄的，這是面對不了任何挑戰的。

軟體行業成為主流，軟體人才大缺工，以及不斷轟炸我們的高薪挖角新聞。這些講的不是別人，正是身為軟體人的我們。以上四個建議，都是相當容易的功課，練好功夫，軟體取代硬體的時代就是現在。

## 台灣真的準備好了嗎？

面對即將來勢兇兇的第二個手機時代，台灣科技業真的準備好了嗎？

第一個現象、急尋 Intel + Android 的軟體人才。大約在六個月前，筆者接觸的教育訓練客戶，已經著手在計畫 Intel + Android 平臺的內部訓練課程，這是一家知名的大陸企業。半年後，就在近期，不約而同多家台灣的代工廠，也在急尋相關人才。有關的訓練課程需求，更是以超級急件現身。筆者以服務台灣廠商的心態，也是儘量配合並提供完整的服務。只不過，平常不練兵，臨時抱佛腳的現象，在經過近五年後，仍舊持續著。面對新的軟體創新革命潮，這些廠商真的能繼續以不變應萬變嗎？

第二個現象，人力資源政策仍未改善。筆者在接受 Career 雜誌訪問時，提到台灣人力資源政策的問題。傳統的招募制度，已經不可能為企業尋得優秀的人力。這樣的現象似乎還在延續中，一個筆者的親身經歷，說明了問題的嚴重性。一家台灣知名的零件組廠商，展現建立「軟實力」的企圖心，於是經由筆者的介紹，為他們找來一位優秀的軟體開發者。在經過一翻了解後，這位開發者決定加入。他加入的原因除了理念上的認同外，也對創業有一股熱情。

第三個現象，官遼作風仍在。讓筆者繼續把故事說下去。在經過一番「公司流程」後，就在最後的「報到」關卡來臨時，該公司的人資通知讓開發者的報到手續裡，包含公司規定的教育訓練課程。雖然讓開發者不是透過招募的標準流程，不過基於尊重，還是依照招募流程配合。然而，讓人資通知參與教育訓練課程時，並未提供課表，在經過要求後，只得到「八點準時報到」的回應。原本基於對公司制度的尊重，以及「要求課表」的合理請求，最後卻是敗倒在人資單位的官遼作風。官遼作風的最大受害者，是企業本身，因為它阻礙了一家企業的進步機會，也阻斷了與人才的交流。

既然看到了問題，就要來找解決方案。從筆者的角度來說，以上三個現象其實都是同一個問題，從企業面來看，應該都屬於制度面的問題。從制度面做調整，想必能解決許多基本面的問題。

## Mozilla 基金會與 Adobe

Mozilla 基金會知道，憑藉他的強大社群，在手機作業系統領域，也能佔有一席之地。就在 2012 年的世界移動通信大會（MWC, Mobile World Congress）上，Mozilla 基金會發表了重要的消息。引述 Telefonica 與Mozilla 在 2012 MWC 上的新聞稿：

 'Adobe is pleased to see Telefonica and Mozilla launch this new initiative.We continue to invest in HTML5 products and technologies and support standards bodies like the W3C. The Open Web Devices APIs can be supported as extensions to PhoneGap, enabling developers to create rich HTML5 apps that work across these new Open Web Devices and all of the platforms supported by PhoneGap, including Android, BlackBerry, iOS and Windows Phone.'

根據這段引言，可以解讀出三個重點。

1. 開發者將能使用 OWD 的 API，在 OWD 的手機，以及所有支援 PhoneGap 的手機上，開發 HTML5 apps。PhoneGap 是目前開發 HTML5 apps 的重要技術，這個計畫目前也受到 IBM 公司的贊助。PhoneGap 能支援 Android、BlackBerry、iOS 與 Windows Phone，也就是說，以 HTML5 開發的 App，具高度的跨平台能力，能在所有的手機上執行。

2. Adobe 創造了 Flash 技術，在 PC 時代，Adobe Flash 可說是網頁多媒體製作的不二選擇。今天，Adobe 放棄了手機的 Flash 產品線，並且轉而支持 HTML5 的發展。產業環境改變很快，有些公司知道，如果不能有大破大力的決心，就沒有能力迎接新的競爭衝擊。

3. IBM 創造了 PC，並且放棄了 PC；Adobe 也是如此。在 2012 MWC 上，Adobe 的 Web Platform & Authoring 產品部門的總監 Arno Gourdol 說，Adobe 非常樂於看到 Telefonica 與 Mozillah 的合作案。實際上，Adobe 是最早表態支持 Telefonica 與 Mozillah 的 OWD 計畫者。Adobe 說，他們很願意支持 OWD 的 API 標準，因為 OWD API 能提供 PhoneGap 的擴充套件，讓開發者能創造更豐富的 HTML5 apps。

PhoneGap 是 HTML5 的關鍵技術之一，除了 IBM 很早就以贊助 PhoneGap 計畫的方式，進入 HTML5 領域外，三星當然也沒有置身事外。大家都知道三星在開發 Bada，一個三星自有的作業系統。但是大家鮮少注意到，去年（2011）年三星就己經將 PhoneGap 整合到 Bada 作業系統裡了。這表示，三星在 HTML5 方面，也做足了功課。

此外，Mozilla 在 MWC 上也宣佈它的 HTML5 商店，HTML5 app 開發者，可以將 HTML5 的 App 或內容，上架到 Mozilla 的 HTML5 商店。

MWC2012 真是一個關鍵時刻。這一刻，宣告了 LTE 以及 HTML5 時代正式來臨。面對 LTE 與 HTML5 的新商機，台灣產業接下來會如何變化？幾個根本且一樣的問題仍要解決：

- 人才問題
- 教育問題

不知道大家是否能從上述的新聞，看到一個很不一樣的地方：Mozilla 是基本會，本質上是一個開發者社群；一個非傳統的商業組織，發起了一個大規模的商業計畫。

實際上，「基金會」是一種商業結合開源資源的有效架構，而且相當有效果。目前，有四個知名的開源基金會：

- Mozilla 基金會
- Linux 基金會
- Linaro 基金會
- Apache 基金會

IBM 透過 Apache 基金會贊助 Eclipse 計畫，成就 Android 大未來。三星的人才政策之一，就是透過這種基金會的運作，來結合開放源碼的力量。

### Linaro 模式

Linaro 模式很成功地建立了一個商業與開發者社群的關係。當今企業必須借助開放資源來建立新的核心競爭力，獨立開發者 (Developers) 就是一個重要的開放資源，如何與位處全球的獨立開發者建立良好的合作關係？Linaro 模式就是一個成功的例子。

Linaro 模式將會成為一種開放與商業共生的典範模式。由 Samsung、TI、... 共同成立的 Linaro 是結合商業資源與開放資源的最佳案例。Linaro 模式是 Open Innovation 架構的一個典範。

## 嚐試內部 Lean startup 並參與國際標準化

對台灣產業的二個建言：

- 在公司內部嚐試 Lean Startup 模式，效果良好的話，可考慮全面性的導入 Open Innovation 策略，例如：三星在矽谷的 Open Innovation Center
- 參與國際標準化，例如：HTML5 標準

Lean startup 是一種在國外相當興盛的創業模式，而且特別適合軟體產業。Lean startup 被稱為「精實創業」，簡單來說，這是一種開創事業的新構想。

面對後工業時代的產業變化，企業經營的最佳策略就是 Lean startup。Lean startup 是一種「不斷實驗」、「快速改變」、「快速創造」、「適性創性」與「慢思快做」的一種經營哲學。

W3C 是制定 HTML5 組統，它的的成員結構如下。美國共 163 家位居第一，很簡單的道理，美國仍是引領網路世界標準的地區。在亞洲也區，則是以日本、印度、韓國與中國為主要的 W3C 參與者。日本有 31 家企業加入 W3C 會員，印度則是 15 家，韓國有9家，中國則是 7 家。

台灣要參與 W3C 的難度，並不像 ITU-T 組織這麼高。ITU-T 屬聯合國底下的標準組織，由於台灣並非聯合國成員，因此能參與相關國際標準工作的可能性，應該是零。因此 W3C 是一個可行性較高的選擇。

台灣數家硬體廠，因為規模夠大，在科技產業的角色夠重，因此，也只有他們有能力，以母雞帶小雞的方式，將台灣以及新創公司，帶進這個更高的戰略高度。

## 我的 H.762 標準推廣經驗


## HTML5 進軍電視領域

完全沒有意外地，在 2013 的 CES 會場上，電視取代了手機，客廳大戰取代了行動大戰，成為今年的科技業重頭戲。

### 戰場更大、機會更多：SmartTV 是 App 產業的延續

電視大戰，將會演變為客廳大戰。電視將不再只是電視機，它會走手機發展的路，從只是看電視頻道，到能連接網路。這樣的電視機就叫做 IPTV 或 SmartTV。就像過去手機，從單純的通話功能，演變成現在的 SmartPhone。

IPTV 與 SmartTV 以模糊概念來說，都是「可以連到網路」的電視。不過就定義來看，這分屬於二種不同的產品概念。傳統的電視採用類比訊號方式傳送節目，而 IPTV 則是以數位方式傳送節目。所以，IPTV 是我們經常聽到的數位電視。IPTV 透過數位機上盒（Set-top-box）來接收節目。

SmartTV 則是另一個概念。SmartTV 也稱做 Connected TV，即連網電視。SmartTV 本身內建一個作業系統（OS），這讓電視機本身很像是一台電腦。就像 SmartPhone 也內建作業系統，本身就是一台小型電腦一樣。根據 Wikpedia 上的定義，SmartTV 等於 SmartPhone。從這個角度來看，SmartTV 是 SmartPhone 的延伸。

透過 IPTV 無法觀看網路電視（例如：PPS.TV），因為機上盒可能不支持。但透過 SmartTV，只要安裝 PPS.TV 的 App，就可以連上網路看影片。這個情境又表達了 IPTV 與 SmartTV 的另外一個差異：SmartTV 有 SDK，可以撰寫 App。這意謂著「TV App programming」的時代悄然而至。

TV App 會是引燃客廳大戰的火苗。從產業觀點，電視已經不再只是單純的硬體製造業，也不單單只是供應鍊的問題。新的電視產業就像是這五年的 SmartPhone 產業，也有 App、也有社群、也有服務等等。台灣的硬體產業，勢必要儘快從這個新的角度去看 SmartTV，而不是在過去的製造與成本問題來看這個新機會。

另一方面，TV App 的開發，也多了另一個選擇，它就是 HTML5。簡單說，電視內建一個瀏覽器（TV Browser）來執行 HTML5 App，並存取網路服務。以 HTML5 來開發 TV App 或 TV Service，雖然說這不一定是強制的標準，但可能是最能創造商業價值的標準。

因此，ITU Telecommunication 標準組織，便制定了 H.760 系列的標準供電視行業使用。以 H.762 來說，這是一個多媒體互動 App 的標準，而 H.762 便是採用了 HTML5 技術。 ITU Telecommunication 過去所制定的 H.264 標準，現在也成為重要的影音編解碼標準。

過去在手機 App 與網路奮戰的創業家們，SmartTV 來臨了，這不是一個新的戰場，而是我們所熟悉的 App 與網路的老戰場。SmartTV 讓軟體創業家的戰場更大了。過去做好的一些準備，或許在未來的 SmartTV 行業就可以開始收割了。

SmartPhone 有了 SDK 後，手機大戰開始。SmartTV 也有 SDK，可以安裝 App。一家人坐在客廳沙發上，將不只是對著 SmartTV 看節目。人類的客廳與居家生活形態也將產生很大的變化。SDK 與開發者，又將成為客廳大戰的催手。

### 鴻海「八屏一雲」計畫：導入 HTML5 與技術關鍵

八屏一雲是鴻海科技集團擎畫的技術藍圖。鴻海科技集團協助 Moko365 舉辦 HTML5 相關課程，筆者有幸擔任系列課程的主要講師，在整理相關技術的過程中，得到了一些心得。使用 HTML5 做為八屏裝置的核心技術時，有什麼關鍵的地方要特別注意？筆者整理了幾個議題，在此與大家分享。

第一、跨裝置。這是第一個「八屏一雲」的重要技術工作。從技術的角度來說，「八屏一雲」，要能跨裝置（cross-device），而好的技術莫過於 HTML5。HTML5 是一個標準，透過此標準來開發 Web App；Web App 必須透過瀏覽器來執行。我們說，Web App 的執行環境（runtime）是瀏覽器。

第二、跨瀏覽器。 第二次瀏覽器大戰開始於2010年左右，大概是 HTML5 標準即將發佈，以及智慧型手機發展進入最高峰，二個時間的交匯點。現今，在 HTML5 世界裡，較具代表性的瀏覽器是 Firefox、Safari 以及 Chrome。

由於每一個瀏覽器實作 HTML5 標準的程度不一，並且實作上還會有一些小差異，因此，讓 Web App 能做到跨瀏覽器（cross-browser）成為另一個重要任務。還好，這個工作是階段性的，不過倒是能讓開發者忙碌很長一段時間。

第三、善用 Media Query。這是 CSS3 裡的標準，簡單說，它可以幫助開發者自動偵測目前的裝置屬性，並且依不同的屬性來套用不同的 CSS 設計。為不同裝置撰寫不同的 CSS 樣式，並依裝置的不同來選取套用，這就是 Media Query 的功能。

很麻煩的是，現今的瀏覽器仍有 Media Query 支援不足的問題。例如：rem 單位在 Media Query 的區域裡可能失效。這是瀏覽器的不足，理論上未來的實作將會解決這些問題。目前，可以使用 JavaScript media query 的暫時替代方案。

第四、用對 UI Framework。在「八屏一雲時代來臨 教你HTML5六小時打通」課程裡，筆者整理了不只 20 種 UI Framework。以「cross device」做為題目，較廣為流行的是 Less Framework 4，它極為簡單易用。Less Framework 4 能幫助開發者生成支援不同裝置的 CSS Media Query。

但這些 UI Framework 在支援跨裝置方面仍有不足之處。以鴻海的八屏一雲理念來說，仍沒有一個 UI Framework 真正具備「跨八屏」的能力。這裡仍有許多技術工作，若鴻海能在這個部份投入資源，補足這個基礎建設，將會是很有價值的事情。

第五、瀏覽器作業系統化。從 Chrome 到 Firefox OS（前身為 Boot to Gecko），瀏覽器作業系統的發展，從沒有停滯過。Gecko 是 Firefox 的 HTML5/CSS 引擎，因此「Boot to Gecko」就是「一開始就是瀏覽器環境」的概念。

從工程的角度來看，Webkit 是一個很值得投資的瀏覽器引擎，它的發展始於 KDE 計畫，並吸引像是 Apple 這類型的知名企業加入。現在，Webkit 是一個很活躍的 Open source 計畫。許多知名的瀏覽器，例如：Safari，都採用 Webkit 做為其核心。

或許「Boot to Webkit」會是一個很好的創新研發題目，不管如何，具備維護 Webkit 引擎的能力，將可能是八屏一雲計畫的技術核心。

Moko365 與鴻海科技集團，從贊助免費 HTML5 課程開始，希望能逐步推廣 HTML5 技術與八屏一雲觀念。最後，八屏指的是哪八種不同的屏？手機屏、平板電腦、NB、AIO、Portable TV、TV、電子白板、LED顯示屏。

## 中國手機市場將在 2013 年進入第二發展階段

中國在智能手機市場，一直扮演很重要的角色。

自從2011年中國殺出小米手機後，整個中國手機市場啟了一點微妙的變化。走「皇家式品牌行銷」路線的中國或國際大品牌，對於走「土製品牌行銷」的小品牌廠，似乎有種招架不住的感覺。我們可以從小米大戰 360 的事件得到一些印證。

對於中國手機市場的發展，可以從刷機這件小事情來觀察。刷機文化的興起，它的影響力將如同開源運動一樣。如果說開放源碼是軟體界的文藝復興運動，那麼刷機文化是手機界的文藝復興。

2012 年是中國手機市場的轉折點（Turning Point），讓我們從刷機文化的角度來觀察這個轉折點。

### 刷機文化或將成為 HTC 進軍中國的障礙

在 2009 年初，Android 掀起的波瀾，傳遞到了中國。從 2009 年開始，到 2012 年初，正好滿滿的三年時間裡，是中國智能手機市場的第一個發展時期。在這三個整年裡，山寨機、中國品牌與小米機，是最精采的三個故事。

山寨行業最早也最快吃到甜頭。山寨行業具有高度的商業嗅覺，自然不會放過這個機會。這三年裡，山寨商無不大顯身手，並依賴其特殊的「商業模式」，提供快速且高度客製化的手機，在競爭激烈的手機行業裡，找到一個利基市場。

除了山寨市場的改變與進步外，中國的品牌手機也有很大的進展。例如，中興與華為的崛起正是代表。根據IDC 的研究，中興 (ZTE) 目前是全球第四大手機製造商。HTC 市佔率目前滑落至 2% 左右，位居全球第八。

小米機的故事就不必多說了，其「社群導向」的經營模式，將成為經典。不久前發表的「小米機二代」，也被外資券商形容為「HTC 在中國的可怕敵人」。小米手機，一家軟體公司的作品，在分析師眼裡，已經和 HTC 平起平坐了。

上述提及的「山寨特殊的商業模式」代表案例之一，就是深度 Android 愛好者的「刷機文化」。這和小米手機有著相當高度的交集。簡單來說，就是經由社群來開發並提供 ROM，讓愛好者刷機，並經營「品牌硬體」。

刷機文化，從產品的角度來看，就是一種「客製化手機」的服務。客製化，並不只是訂製硬體，更重要的是訂製軟體。刷機文化正是一種軟體訂製機制，它的運作模式是，由社群開發者扮演 ROM 製造商的角色，整合並提供很多好用的 Android ROM。

小米手機成功的關鍵之一，就是它扮演很好的 ROM 製造商角色。 筆者曾經在Android Day大會上提到，「開源是一種文藝復興運動」，意思是開放源碼是一種文化，深植在開發者的圏子裡。刷機文化，也是如此，將成為一種使用者習慣。一家專營「刷機精靈軟件」的公司，也得到華為的投資。

刷機文化發源自重度使用者與開發者社群，所以這種文化應該是全球性的。事實上正是如此。舉一個例子，CyanogenMod (CM)，是國外相當知名的 Android ROM 開發者社群。在這裡，你可以找到很多「非官方」的 Android ROM，幫助你讓手機改頭換面。

不要小看這些「非官方」的 ROM，許多 ROM 擁有很高的技術水平，並且經常能提供比「原廠」更快的更新速度。例如，你可以找到針對 HTC One X 所製作的 Jelly Bean ROM。而且，根據該開發者表示，「HTC 實在應該儘速升級至 Jelly Bean」，「Jelly Bean 解決了 HTC 過去的技術問題」。

所以，「社群」是一個重要的發展方向。硬體製商如果認為這不能創造成功的企業，那麼應該看看小米手機的故事，再重下定論。

從 Android 作業系統的角度來觀察，中國手機市場，正進入第二個發展時期。而這裡正好構成一個巨大的交集：大量的山寨商正在和這些 ROM 製造商合作。品牌商也搶著經營刷機市場。山寨機、中國品牌與小米機，都要邁向新的發展格局了。

從目前社群與使用者論壇上的反應來看，「HTC 很難刷機」是一個議題。相對的，也造成開發者社群，不願意為 HTC 的硬體製作 ROM。想刷機的使用者，也因為流通的 HTC ROM 太少，或更新太慢，而逐漸遠離 HTC。這是惡性循環。

刷機是一種文化，HTC 似乎正脫離這個文化圏，中國手機市場新的發展時期來臨了，結果新的機會沒能把握住，反而有被邊緣化的感覺。最終，這或將成為 HTC 在中國的障礙。HTC 的最大敵人不是市場，而是比市場更可怕的魔鬼：一場刷機的文化運動。

手機的文藝復興運動，在中國敲然而至。以上的言論僅只是推測，我們都不希望它成為事實。然而，我們相信，官方仍將持續低估「刷機文化」的影響力。

### ROM 製造商大戰

2012年初，Android ROM 的圏子裡有一股奇怪的氛圍。這個氛圍到了2012年的4月份開始明朗化。2012年4月份，華為旗下的360推出訂製的ROM供用戶刷機...

今天，「品牌手機」在中國或將逐變為「品牌硬體」，這意味著用戶可以購買他們心目中理想的手機硬體，並且刷上他們喜愛的 ROM。HTC 手機將不會永遠裝載 HTC Sense UI，因為用戶可以將它更換為 MIUI。鎖機則是反制這種現象的一個手法，然而，不能刷機的「鎖機手機」是否能引起消費者的青眛。結果可能會讓原廠失望，這種現象將在2013年更加明顯。

從比較近期的小米手機，以及上述的 ROM 刷機文化，都能看到中國的科技產業，充滿年輕與活力。所以，Android 進到中國後，呈現很多樣化的發展。同時，因為 Android 的關係，也造就一批年輕的創業家。因為 Android 造就年輕人的學習與創業熱潮，再過幾年，待這股競爭力成熟後，台灣將很難再迎頭趕上。

因為 Android 開放源碼的關係，更造就了新的山寨文化。

## 中國的山寨文化

山寨市場是常規市場：下一波的市場新機會。或許應該將山寨市場正名為「常規市場」，這種的現象是一種新的社會文化。簡單說，山寨市場是一個永續存在的市場，低價機的需求就吃三餐一樣，不可不缺。

2010 年的尾聲，傳聞中的 Android 3.0 版本以及 Android 平板電腦，成為 2011 年科技業的重頭戲之一。在 2009 年時，筆者在雜誌上的專欄，提及二個主題：「發展自有 Android 分支」以及「山寨軍品牌革命：下一個山寨影響力」。根據 Google 對 Android 未來的發展策略，以及對廠商的支援政策來看，發展自有 Android 分支已經成為一項必要的工作。

在山寨軍品牌革命這篇評論裡，提到 Android 帶來的機會，以及山寨的轉型方向。隨著 Android 手機以及相關產品的大舉佔市，以及山寨大軍一年多來的努力，我們發現「山寨市場」以及「山寨文化」確實有一些顯著的改變。許多山寨商已經擁有自有的 Android 分支，但我們從更大的層面來放大觀察「山寨」：山寨改變了社會文化。以下是針對「山寨」所做的一些觀察，以及延續性的討論，請不吝指教。

針對「山寨」這個名詞，許多人都有「一個層面」上的誤解，即「山寨就是盜版」。即先前提到的：在抄襲與非正統的「模式」下所開發與製造的手機，就被暱稱為「山寨機」，意謂拷貝與強取之意。大陸知名山寨觀察家「阿甘」在他的著作「山寨手機幕後真相」裡指出，「山寨機」成為一種「社會文化」。

在阿甘先生的著作裡提出這樣的看法。過去的大型企業，做習慣了「規模經濟」，由於一些因素，這些企業在發展穩定後，便開始「貴族化」，這與山寨文化是非常鮮明的對比。山寨機經過幾年的發展，居然開始影響社會文化，讓山寨起家的「草根階層」也能和以大企業為代表的「精英階段」相互競爭。從產品的角度來看，這是個性化與「私品牌化」的潮流。

由山寨所帶起的社會文化改變，最鮮明的現象就是「個人與團隊」的快速堀起。這點在阿甘先生的著作裡也有觀察。有技術的個人，或是有能力的團隊，掌握了關鍵的資源或技術，因此萌生自立門戶的想法。關鍵的資源包含：市場、人力、商業模式、社會資源等等。單純從技術面來分析，Android 帶動巨大的機會，許多優秀的 Android 開發小公司，都是個人自立門戶下的成果。這就是山寨機崛起的關鍵因素：眾多的個人或小團隊。

因此，把山寨定位為盜版集團，可能是過時的看法了。維基百科、Linux kernel 以及山寨機本質本並無差別，他們都是以一種「籠統」、「非正規組織」、「個人」、「螞蟻大軍」等模式所建構出來的；從十多年前開始，透過網際網路的推波助灡與影響，這種新的社會文化就開始形成了。所以，就如同阿甘先生在他的著作裡的看法，「山寨企業將顛覆傳統的競爭法則」；自由軟體或 Android給了技術人員很好的機會。

在十月份的「2010 Android 社群平臺開發大會」上，小弟也發表了一個淺見。「山寨市場」或「類山寨市場」，與「正規市場」完全衝突，但山寨機廠商不但國際化也品牌化，許多山寨廠商的產品品質也和正規產品不相上下了，許多更已經「正規化」。因此，不如將山寨市場正名為「常規市場」，這種「非大企業也能為之」的現象是一種新的社會文化，許多山寨廠商都能直接和大公司建立商業關係，這代表精英階層的鬆動；阿甘先生在其著作裡所做的觀察，令人發省。從Android或自由軟體的技術面深入觀察，將角度提升到社會層面，將會發現許多有趣的改變。

### 山寨軍品牌革命：下一個山寨影響力

因為聯發科的解決方案、低價手機、不斷創新的外觀設計、龐大的內需市場以及技術螞蟻大軍等要素，造就第一個深圳手機產業的奇觀「山寨機」。在抄襲與非正統的「模式」下所開發與製造的手機，就被暱稱為「山寨機」，意謂拷貝與強取之意。

過去也曾經在本論壇提到的本土品牌廠天宇朗通，是以山寨機起來，轉型為本土品牌製造商的代表。過去一年來，因為受到 Android 開放平臺的影響，讓這批所謂的山寨大軍開始思考國際化與品牌化的道路。Android 作業系統讓這些手機商感受到「自主」的力量，這個力量可以由以下二個技術層面來討論。

第一、開放的作業系統，讓山寨手機商開始有了能「自由使用」的軟體；使用這個開發軟體，便可以不會「直接」受到軟體原廠的控制與限制，在產品開發上有了更大的自由度。第二、開放的作業系統，讓山寨手機商能開始真正思考，「構建自有軟體團隊」的可行性與做法；自有的軟體團隊，可以針對市場或客戶的需求，進行開發與軟體的客製化。

由此看來，「使用上的自由」以及「針對市場做軟體客製化」是山寨轉型需要掌握的二個力量；另人振奮的是，山寨大本營所在的深圳，有了更成熟的產業與資金環境，給了新創自有品牌產品一個難得的好機會。過去山寨品牌化都是個案，現在山寨品牌化已經變成一個現象，氛圍已經形成，許多山寨機製造商對於「自有產品」、「自主解決方案」以及「自有品牌」展現強烈的企圖力，未來將成為不可漠視的力量，山寨大軍的轉型，成為下一個手機產業的關鍵影響力。

山寨品牌化，以及走向國際銷售，供應鍊管理是首要加強的能力。借助台灣供應鍊及供應鍊管理能力，可使山寨品牌化的腳步跨出大步。具體實行上，提昇供應鍊端的價值是必要工作，為不致淪為單純的零件供應商，可以思考幾個具體的做法，由小地方逐步完善。單純就技術面來看，幾個提昇價值的具體做法如下。

第一、提供關鍵零組件更精緻的軟硬整合服務，以服務增加本身價值，並思考開源模式的助益或可能帶來的影響力。第二、提供更完整的平臺解決方案，形式上更像是一個 turnkey key solution 或是公板，這方面台灣有許多掌握關鍵技術的硬體廠，都有很不錯的做法。第三、為產品製造應用軟體，模式上可以和硬體綁定銷售。

山寨大軍若能成功帶起品牌革命，成功走向品牌化與國際化，這個影響力對大家都是有助益的，若能正面看待、樂觀因應，這又是一個開放平臺潮流裡的一個大機會。

從以上的觀察，Android 進到中國後，不但就造了新的經濟成長動力，更把影響力，提昇至社會文化的層面。這可能是當初 Google 推出 Android 開源計畫時，始料未及的。

### 我在 Android World 2012

筆者在 2012 年的 10 月 26 日，受邀參加由 IDG 美國國際數據集團主辦的 2012 Android World Global Developers Conference，原本是受邀發表演講，後來很認真聽了多場演講，相當有收獲，特別整理一些心得與觀察和大家分享。在這裡，可以把 Android 在中國的現況，一覽無遺。

IDG 過去在全球主辦的 Linux World 是非常知名的開發者大會，今年開始也啟動了 Android World 系列活動。Android World 第一次開辦就選擇在中國深圳，可見 IDG 對 Android 在中國發展的重視。根據現場工作人員表示，在網站上註冊的參加者有 1800 人。今天的會場是在深圳福田的香格里拉大酒店，主會場能容納 500 人；現場座無虛席，熱情的開發者填滿了整個會場。 

一早來報到時，很認真研究了二天的議程表，我發現這次的活動有一個特色：完全沒有人談硬體；還有另外一個特色：現場設有投融資專區！有志創業的軟體高手，在現場就可以洽談投資了。

會場設置的投融資專區，有紅杉資本、同創偉業、IDG 資本、勝訊產業共贏基本、鼎暉創投、高原資本、松禾資本、凱鵬華盈等，不管是風險、投資或融資，來了很多專業的投資人。投融資專區設有「密談專區」，有創業需求的軟體開發人，都能直接找這些投融資人洽談。

早上的主題演講還有共同點：多位嘉賓不約而同都談到了開發者與投資這塊議題。最特別的是奇虎 360 的副總裁，他在演講裡提到：「能力越大、責任越大」，他的意思是奇虎創造了今天這樣的公司規模後，他們便開始扶植有能力的軟體開發者。至今他們已投資超過 50 個開發者，總金額在 2 億 (人民幣) 以上。相信這些種子將會成為未來中國軟體產業的重要生力軍。

奇虎 360 的李總裁又說，只要有能力的開發者，都可以找奇虎投資。我認為，「能力越大、責任越大」，是一種企業展現社會責任的表現，個人相當欣賞。台灣成功的企業，也應該學習這種格局，共創後才能共榮。李總裁現場也公開留下他的手機號碼，要有需要的開發者直接找他！果然是年輕創業家的風格，這是一種完全沒有身段的風範啊。

這次的 Android World 談的都是開發者、軟體或投資，完全嗅不到硬體的味道。現場軟體、網路與創業的氛圍濃厚，與台灣的產業味道全然不同。因此個人認為，要提昇台灣軟體產業的競爭力，應該要從投融資環境的角度著手，學習中國模式，由投融資環境，打造一個創業平臺，活化年輕軟體工程師的創業動力，藉由年輕人的創業活動來建立有競爭力的軟體產業。意思是，政府不能光靠蓋蓋軟體園區就能造出「軟體產業」，只有這批有能力的年輕人才能創造一個軟體產業。

下午則是分會場演講，我只能留在自已的演講會場。在我後面的幾位講者，談的正好是我最感興趣的主題：手機遊戲。觀察了今天的所有分會場後，發現主要的議題都環繞在以下三個主題：遊戲、移動廣告與移動閱讀。移動閱讀的部份讓我較感意外，這也是中國火熱發展的一個行業。移動閱讀最基本的形式就是電子書。

大會還規劃了一個專門討論遊戲的分會場。遊戲產業，可以說是今日大會的大亮點。以下是中國遊戲業者的經驗分享，在此列出重要的幾個結論。

第一、關於遊戲收費部份，Freemium 已經成為主流的收費模式。第二、手機遊戲的生命週期大約三個月左右（用戶把遊戲整個玩一遍的時間）。
第三、透過任務系統、成就系統與道具系統，可以延長遊戲的生命週期。第四、傳統 RPG 遊戲的付費比例比較高。第五、遊戲運營，大約要投入 20% 的人力來評估用戶行為。第六、遊戲的運營如何運作，要根據收集到的數據來分析得知。第七、遊戲產業非常需要細緻化的運營。第八、便捷的支付管道是關鍵。

感覺中國的手機遊戲業發展非常快速，這些遊戲業者都有 1~2 年的經營經驗。對於有志初入手機遊戲的創業者，這些前輩的經驗是很寶貴的課程。

## 第二個手機時代開始：2013 年觀察重點

HTC 跌出十大品牌是 2013 年初的一個新聞。在 HTC Butterfly 如此熱銷的氛圍中出現這樣的消息，很是突兀。

在前面，筆者從營業利益率的角度，討論「手機業黃金五年結束。」該台灣智慧型手機品牌的營業利益率，在 2012 年 7 月前，就跌破了 10%：這是一個很關鍵的數字。

該品牌的營業利益率在 2013 年，甚致面臨保 2 的挑戰。就投資角度來說，該標地已經不具投資價值。「手機業黃金五年結束」，意思是智慧手機產業初生的高速成長蜜月期，已經正式結束。這段時間是2008到2012年。[2012 年底開始，手機業的營業利益率將開始下滑][1]。

[1]: http://www.jollen.org/blog/2012/12/smartphone-next-age-2013.html "第二個手機時代開始：2013 年觀察重點（原文刊載於 CTimes 雜誌 2013 年 1 月號）"

2012 年底是很重要的一個時間點，三星以智慧型手機龍頭的頭銜，完美地在第一個時間的戰場，繳出漂亮的成績單。三星的 Galaxy SII 成功奪下第一個灘頭堡，宏達電也因此挨了不輕的一拳；延續 Galaxy SII 的氣勢，SIII更是打下iPhone，贏得智慧型手機的王座。

下一個智慧型手機的時期，筆者認為可能會是在 2013~2015 年。第二個智慧型手機時代開始了。2013 年度到來，未來一年手機業的觀察重點為何，在此提出筆者的看法與大家分享。

第一、差距不至於再擴大。就如同大家所知的，智慧型手機的第一與第二戰線已經抵定，由Apple與Samsung形成的第一戰線，正與第二戰線的手機品牌擴大差距。從市場份額的角度來看，華為、中興、Sony、LG、HTC 等第二戰場品牌的總合，還略小於50%。這種大者恆大的現象，應不至於再持續，原因 Apple 與 Samsung 的品牌成本效益將更顯著，從贏家的角度來看，爭奪市份份額可能不是第一要務，反倒是思考如何善用品牌成本效益。並且第二戰線的產品，具備多樣化的特性，在品質與性能方面也有顯著提昇，將更能滿足一般消費者的需求。

從品牌成本效益的角度來看，HTC 的對手應當是華為、中興與 LG 等，而不是 Apple 與三星。

第二、品牌成本效益決定利潤。筆者認為，第二個智慧型手機的戰場，不能由硬體成本或是出貨量來觀察；在這個新戰場，利潤更有意義，裝置出貨數量只是配菜。台灣的硬體廠應該由品牌的角度來看手機市場，Apple 將持續發揮它的品牌成本效益，而 Samsung 的品牌成本效益明年才正要開始爆發。在品牌效益的加持下，對手賣一支手機的成本是 0.2 台手機，但自已卻是賣一支手機要一支手機的成本，沒有品牌效益，何來高獲利。

關於品牌成本效益可由幾個消費者數字來觀察。根據近期調查，頂極手機的消費者詢問，Apple 大約是 33%、RIM 大約是 3%、Nokia 大約是 8%，HTC 則是7%，至於 Samsung，高達 45%。以品牌的消費者滿意度來看， 根據近期調查，Apple 大約是 40%、Samsung 大約是 50%，而 HTC 則是大約 5%。品牌效益創造獲利的第二個手機時代來臨。

第三、新手機生態系統出現。就如大家所知道的，除了 Android 與 iOS 外，微軟的 Win8 將可能成為第三個生態系統。

Nokia 的硬體技術很優秀，它的品牌成本效益也高於 HTC 與其它品牌，因此[微軟收購 Nokia 的行動裝置事業][2]，其實是一筆很值得的交易。

[2]: http://mag.udn.com/mag/digital/storypage.jsp?f_ART_ID=474683 "54.4億歐元 微軟收購Nokia裝置與服務事業"

第四、人才搶奪戰。簡單說，就是 App 開發者的資源搶奪大賽。關於這一點，大家都有很深的感受，就不必多提了。但是有一個現象則是值得觀察，就是 App 開發者或開發商，同時為 Android 與 iOS 製作 App 的比例越來越高，這代表者只為單一作業系統製作 App 的問題並不存在。但是關鍵會在 App 開發者的獲利問題上，Google 與 Apple 如何在廣告與下載二個模式外，為開發者創造新的獲利模型，可能成為第二個手機時代的關鍵。

歐洲接下來將可能釋出大量的優秀人才，以及更大量的開發者資源。台灣的產業應把這個議題列入第一要務。合宜的政策與合約架構，才是能吸引這些人才的關鍵。錯過了這次好機會，優秀軟體開發者大量出現的情況可能難以再見。

有遠見的能力的大產，現在透過購併的方式來取得軟體人才。這個現象在 2013 年中轉趨明顯，並且在接下來的幾年，可能成為開放創新生態系統裡，重要商業活動。

第五、大量的手機 App 新創公司。根據筆者的觀察與實地了解，如果你認為現在的手機 App 新創公司已經夠多了，那麼未來二年的 Startups（新創公司）數量與實力可能另你瞠目結舌。這些新創公司的共同特色是走向精實模式，即小團隊、零固定成本、高毛利、更新速度極快、應變能力強、焦點式社群行銷等，另外團隊更年輕化也是一個趨勢。

第六、HTML5 與瀏覽器時代。雖然這是在 2012 年，談了一整年的議題，不過還是有一點值得再次提醒。從開發的角度來看，社交網路（Social Networks）的加據發展，將使 HTML5 的技術更為重要。而 HTML5 的運行環境「瀏覽器」，也會有快速的進步與技術創新。

第七、多核 App。顯然多核心已經成為手機應用處理器主流，不過，從技術的角度來看，多核心技術的重點在於 App 本身。雖然多核心技術涉及處理器、作業系統、Android 虛擬機技術、Android 框架等，但是 App 本身的設計是否能支持並發揮多核心特色，才是讓使用者最有直接感受的環節。簡單說，App 開發「多核化」會是一個技術工作的重點。

鑑古知來，筆者整理過去一年的心得，希望能更了解第二個智慧型手機時代的發展格局；此外，還有一點，如同上一期評論提到的「精實消費時代」，一味地 Cost Down，消費者可能未蒙其利，先受其害。

軟體團隊的更年輕化，在接下來幾年會更加明顯，以現況來看，大部份的新創軟體團隊，年齡大約在 23~30 歲之間，28 歲後的軟體開發者，更具備經營公司的能力；因此，如同筆者在 [我在 Android World 2012 深圳：與會心得分享][3] 所提及，打造一個好的投融資環境，是留住人才的最佳方法。目前台灣的投融資環境來說，和大陸與東南亞相較，實屬不足，這點值得大家省考。

[3]: http://www.jollen.org/blog/2012/11/android-world-2012-china.html "我在 Android World 2012 深圳：與會心得分享"

## 精實消費的時代

在看過了完整的 Android 發展史，以及了解它到中國後，對中國大陸產業所產生的影響後，接下來回頭看看，未來的行動裝置市場，可能往哪個方向發展。我認為，在大量生產與低價後的後時代，行動裝置的消費者，可能會加速往精實消費的行為移動。

首先，精實消費 (Lean Consumption) 的模式說明了一件事情：為什麼消費者寧可在誠品書店消費 300 元購買實體書，也不願意花費 49 元下載電子書。

過去人類在工業時代，以機器創造了大量的貨物，商人發現，只要能生產適當品質的產品就能被消費者接受。這是大量消費的時代。如今，在線上銷售 App 與電子書，消費者的決策時間更長，決策模式也有別以大量消費的時代。而且，在誠品書店，消費者有很多方式，可以幫助他們下達「決定購買」的決策；但在線上商店，卻缺乏幫助消費者下達這個決策的機制。最古代，而且有效的方式，不外乎「試用版」或「試讀章節」。

要說服消費者溝買電子書，就要先解決精實消費模式下的一個問題：滿足消費者聰明選購的各種需求。在書店，消費者會把一本書看完四分之一後，再左翻右翻來回好幾次，只要能滿足心理需求，消費者就會決定購買。

簡單來說，精實消費下，價格並不是絕對的重點。

人類大約在 2005 年左右，開始進入了精實消費的時代。但是大量消費的模式在人類史上有著長久的歷史，所以它很難短時間內被取代。大量消費與精實消費將並存於我們的時代，精實消費模式何時能完全取代大量消費模式，這並不需要我們關心，因為這是下一代或下下一代（甚致是下下下一代）的事情了。

因此現今的軟體與內容製造商，都應站在精實消費的角度去思考產品的價值以及產品定義。精實消費模式改變了產品的定義。

從 2005 年開始到 2012 年，因為智能手機的興起，造就了一批 App 開發者，也開展了線上銷售 App 的時代。這是大家親身經歷過的時代，我們都在手機上下載（購買）應用程式（App），Apple 的 iPhone 則是這個時代的領頭羊，它開啟了這一頁。

精實消費改變了公司的組織型態。過去大量生產時代，大多是龐大的企業組織，或是官遼體系。精實消費產品的供給者，必須是精實組織，這類型的紅織多半由個人或是小型團隊所構成。一個人的 App 開發者就是最小的精實組織。

### iPad Mini 或將終結這場瘋狂遊戲：精實化時代來臨

比較貴、但賣得比較多。

2012 年的一個現象：全球手機廠都陷入了一個瘋狂競賽，更是一個瘋狂遊戲。Apple、Samsung 構成這個遊戲的雙軸心，在這二個軸心外環繞著許多品牌。這些品牌的瘋狂競賽就是瘋狂地製造 Android 手機與平板電腦，然而，Apple 與 Samsung 卻已悄悄改變行銷商品的方法，他們由大量消費的銷售方式，逐漸轉變為「精實」的做法。

我認為，iPad Mini 可能會開啟新的消費史。過去工業生產模式下的大量消費模式，如今可能因為 iPad Mini 的發表，讓人類逐漸進入硬體的精實消費時代。過去精實消費只存在內容、軟體與服務產業，現在可能更擴大到硬體消費上。這意味著硬體產業將發生以下二種情況：

第一、「以低價搶攻市場，進而促進銷售的增長」這個幾乎被認為是鐵律的法則將失效。市場上為數眾多的低價 Android 平板電腦將面臨滯銷。

iPad Mini 的定價出乎市場意料之外，並沒有採取低價策略。可是我們要知道，如果這樣的價格，並不能如 Android 陣營所願地「嚇跑消費者」，對非蘋陣營造成的後果將更加嚴重。非蘋陣營將面臨「產品懸崖」的困境：完全找不出能與 iPad Mini 對抗的策略，因為低價策略也無法提升銷售數字了。

第二、Android 應用程式獨立開發商，以及內容供應商，將被迫做出決擇：壓注 iOS 平臺，或是分散資源同時發展 iOS 與 Android 平臺。

第二種現象對非蘋陣營更為不利，App 開發商枇杷別抱將對 Android 平板陣營造成莫大的傷害。不過，倒也不用過於悲觀，因為 Android 陣營在智能手機領域還是能擁有很大的優勢。iPad 開啟平板電腦之戰後，iPad Mini 是否能終結 Android 陣營加入平板戰場後所形成的混沌格局，讓我們繼續看下去。

一般看來，Android 平板電腦，已經有點「PC 化」，這多少和一開始 Android 陣營就以 PC 的觀點來開發平板電腦有關係。從這個角度來看，iPad Mini 更沒有必要直接和低價 Android 平板電腦競爭，只需要繼續走原本 iPad 的道路即可。

手機與平板已經不再是 PC 時代的硬體產品，所以相關產品的設計與開發都必須精緻且實用，售價固然是重要的因子，但只要合理，不需要低價，也能吸引特定的消費者。總結來說，大量消費時代下的銷售模式，低價必定能創造新的需求；這就像「老闆倒店了」的破盤價銷售模式。

筆者認為，這些製造與銷售低價 Android 平板的廠商，都應該清楚區分「需求」與「需要」的差別。 精實消費 (Lean Consumption) 的模式說明了一件事情：為什麼消費者寧可在誠品書店消費 300 元購買實體書，也不願意花費 49 元下載電子書。

蘋果已故執行長賈伯斯說：「消費者往往不知道自已真正的需求」，Android 低價平板陣營誤以為這是消費者的需求，然而，真正滿足他們需求的產品出現後，消費者才會突然了解自已的真正需求。這就是蘋果一向引人入勝的產品策略：告訴消費者這才是你的需求。

對於實體書來說，這是「需求」，因應考試、閱讀或上課等行為而生。電子書則是「需要」，在公車或捷運上為把握時間，有行動閱讀的需要而生。所以，如果只需要便宜、能用、易攜的平板電腦，Android 平板是好的選擇。然而，真正能滿足各方面需求的平板電腦，很可能只有 iPad Mini。

走向精實化的手機與平板電腦，老闆倒店的做法是否能行得通，就看 iPad Mini 幫我們解答了。筆者認為，低價 Android 平板因 iPad Mini 的出現，將正式面臨上述所提及的產品懸崖問題。iPad Mini 就像誠品的實體書，比較貴，但賣得比較多。
# 第七章：軟體人的創業之路

這一章並不是教你如何成功創業，也不是創業教學課程。而是從軟體人的角度，分析軟體人創業的幾個思惟。

## Project 或 Product

隨著 App 浪潮而起的大量新創 App 公司，在 2013 年開始，不少公司開始成為接案公司。這些團隊，有些是因為本身的 App 產品獲利有限，必須尋求其它的財源。有些團隊，則是因為公司固定成本的急速上升，例如：公司員工的擴增，也需要開拓新財源；所以，「接案」，成為一個又快又可靠的業務。

然而，接案本質上是 Project-Based 的工作，而不是 Product-Based。例如，開發一個網站，將代碼授權給其它公司，同時也幫客戶客製化軟體功能，有時，運氣好的話，也可以取得一份長期的維護合約。這是 Project-Based 的做法。如果是建構自已的 Sales & Marketing 團隊，為網站尋得獲利模式，並自已維護日常營運工作，這才是 Produdct 的概念。

至於 Project 與 Product 在一家公司裡，是否能同時併行？從 Startup 的角度來看，我覺得可行性並不高。更深入地探討這個問題。從公司經營的層面來看，若你是這家公司的 CEO，可能會有以下的想法：

- 過去外包工作，能為自已累積程式碼（智財），未來可以轉化為自已的產品
- 透過以案養人方式，穩定公司收入，並擴大規模

過去我在經營自已的公司時，草創初期也做過一些外包業務，也有上述相同的想法；但現在我認為，這個做法不適用於現在的商業環境。主要原因是，現在的軟體產業發展速度，以及競爭情況，不若以往。所以，筆者認為這幾個想法，套用在現在的環境是很危險的事情。詳細的理由如下：

- 外包工作的獲利，取決於固定成本的控管能力，因此外包業務「不一定」真的可以產生獲利，成本的控管，包含結案的風險、專案的時間週期、固定薪資，等等
- Social Networks、eCommerence 與 Mobile Apps，是現在與未來的主流題目，它們的成功，並不完全取決於技術，事實上，技術優勢，並不會真的是成功的要素
- 新技術、新工具、新軟體開發方法論等等，發展非常快速，過去累積的技術經驗，未來可能用不上

從上述的角度來看，新創公司專注在產品本身，並提昇產品本身的價值，才是最好的做法。至於產品開發，到上線營運，這中間的資金需求，現在可以透過天使投資的方式來填補空缺。找到對的天使投資人，創業團隊專注在核心價值的建立，才是最佳的策略。

另外，Project-Based 的公司，往往無法留住人才，這和「以案養人」的邏輯，完全背道而馳。

## 精實軟體開發

另一個開放創新與管理的支柱就是 [Lean Software Development][1]。Lean Sfotware Development 的概念源自日本 Toyota 的生產系統，後由 Agile 社群將之導入軟體工程領域，成為敏捷開發模式的重要思想基礎。在敏捷開發模式的發展過程中，Lean Software Development 的觀念不斷被討論；不久後，便由 Mary Poppendieck 與 Tom Poppendieck 將其發展成一套系統化的模式，Mary 與 Tom 同時也提出了 22 套工具，以落實 Lean Development。這是 Lean Software Development 的起源。

[1]: http://en.wikipedia.org/wiki/Lean_software_development "Lean software development"

精實軟體開發（Lean Software Development）的精神，非常值得新創團隊參加。精實創業（Lean Startup）的理念，採用時，要懂得隨機應變。無論是精實軟體開發，或是精實創業，它們的本質都是一種開發產品的方法。產品本身鎖定的客戶群如果很明確，精實創業的理念就不一定適用。例如：客戶是企業端時，使用精實創業理念，「先做出一部份功能給客戶、再逐步完善」，這個方式就不可行。

直至今日，App 產業的成形，以及大量的創新網路服務被發展出來，又再強化了 Lean Software Development 的重要性。現在軟體產業，已由技術導向的行業，轉變為文化與創意的產業。因此，Lean Software Development 方法論，結合 Lean Startup 創業模式，成為重要的管理思想。

今日的軟體開發，講究精實模式（Lean Software Development），敏捷開發方法的 Kanban 方法論，部份相當符合精實模式的精神。Kanban 方法論追求打造一個自我組織型（Self-Organized）的研發團隊，且主要以外部開發者為主要資源。這一點與 Chesbrough 的理念不謀而合（Chesbrough 2006）。這個部份的管理經驗，是台灣各大硬體廠所久缺的重要元素。

Lean Software Development 的其中一個法則（Lean Principles）就是：滅少不必要的浪費，這點與精實創業（Lean Startup） 的觀念一致，也和原始 Toyota 的精實生產系統一致。這個觀念在許多討論 Lean Startup 的文章都有提到。對於新創團隊來說，所謂減少不必要的浪費，可以先以下二個角度開始。

第一、避免不必要的內部溝通成本。Lean Startup 要表達的深層精神應該是：「先推出最有用的功能」，並專注服務固定的幾位使用者，讓第一批使用者滿足你所推出的產品。敏捷開發與 Lean Software Development 都提出實際的工具（有些工具指的是一套系統化方法），來幫助團隊解決這個問題。

第二、善用外部資源。以筆者近期的一個 Startup 計畫為例，將這個網站上線的硬體成本，大約只要美金 300 元左右；這與 12 年前的環境相差百倍以上。當時，我可能需要一個小型機房，或是 Co-Location 服務，加上頻寬費用，初期資金可不止要3萬塊美元。善用各種免費資源，或是付費服務（例如：Amazon EC2），都能減少不必要的浪費。另一個浪少良費與提昇效率的方式，就是使用開放源碼元件，這也是 Open Innovation 的核心觀念之一。

我看到有些現象是，新創公司盲目追求組織架構，許多傳統科技公司的新創過程，也太過於強調組織策略，這些經常埋下了日後的敗因。一個精實模式下的軟體開發，經常不需要依賴傳統的組織策略。對於經營 Startups 的團隊來說，在日後取得創投的資金浥注後，需要好好地思考這個議題。

例如，現在的組織策略，很難說明如何使用 Github 這樣的工具，創造成功的 Startup 計畫。更不用談，有些 Startup 團隊，更是以虛擬團隊的形式運作。在這裡提到的組織策略議題，並非要表達組織策略不具重要性，而是要強調如何採用新的管理方式來執行它：不能一味地 COPY 別人的組織結構與管理方法。

Lean Software Development 與 Lean Startup 同樣講求效率與消除浪費，如何善用現有的各項工具、技術與資源，以及導入新的管理方法與開發觀念，都是 Startup 團隊必須要不斷學習的新知識。到這裡就不難看出，Lean Software Developemnt 與 Open Innovation 的思考，是相輔相成的關係。

## 軟體人的創業優勢

經過一段時間，我了解到，軟體人創業其實比任何人更有潛在優勢。所以，善用這些優勢，幫助自已邁向成功之路。在這裡，我想用「成本管理」的角度，來解釋「軟體人的創業優勢」。

第一階段，產品開發。產品、專案與平臺，是三個不同的概念。筆者偏好經營一個產品公司（Product Company），因為它的價值積累效果最好，而且不怕「長期奮戰」。所謂的長期奮戰，是在成本控管良好的情況下，軟體人本身，可以在低成本的情況下，持續維護這項產品。

第二階段，價值提昇。這個階段稱為「Value Up」，網路上可以訂閱許多創業的文章，都有提到這個部份。許多教學都值得我們參考。不過，從軟體人「主觀」的角度來看，有一個觀念，筆者值得商議。

一般 Value Up 不外乎在評估「是否能連接社群網絡」，或是「使用者數量」等等；但是，軟體人本身的優勢，就是擁有自已的 Copyright。無論是內容或代碼，都能出自團隊之手。無須假手他人。在這個「Own Copyright」的前提之下，如果公司要經營部份「授權業務」，或許就有一些空間。

例如：公司開發了一個線上課程網站，理應自已來營運，經營社群，但是現在卻想把軟體授權給他人使用，協助客戶建立並營運自已的課程網站。這有違筆者在前面討論的 Project 或 Product 概念；以下是幾個思考點：

第一、內容或代碼是自已的 Copyright，你可以用 Copyright 的授權釋出客戶，例如：Apache License，只要不是 Copyleft 授權即可。

第二、以 Copyright 授權釋出代碼供客戶使用，目的不在「練功」或「培養團隊」，也不在等待機會。這一點，不等於筆者在前面所提的「典型接案思想」。

第三、重點在內容本身，而不是平臺本身。授權平臺的代碼，並不影響內容的價值。除非，你的客戶做出跟你一樣棒的內容；但換個角度，有能力製作高水準內容的公司，也有自已開發平臺的能力。

第四、因此，這個動作（授權業務）必須有很強的策略動機。因為，這個業務雖然能帶來一些收入，但這個收入並不來自於產品本身，而是一項服務收入。再者，這也不是本身。

所以，除非是有很強的策略驅動，而且這個策略有助於 Value Up，否則專注在開發產品才是聰明的選擇。但無論如何，這都只能做為副業經營，淺嚐即可。

## 又新、又快、又好

基本上，我認為，產品公司，要達到「又新、又快、又好」的三個條件，只有內部產出的模式可行。外部資源無法幫助產品公司達到這個目的。這是 Coders Team 與 Sales & PM Team 的一個差別。

Sales & PM Team 一般強調的是團隊的溝通協調、運籌能力與人脈，而 Coders Team 強調的是團隊本身具備的技能。

以一個開發案來看，Sales & PM Team 會設法找外部資源（外包）來完成這個任務，因為其本身不具有開發能力。Coders Team 則是團隊自行開發，事實上，Coders Team 也必須如此，才能大幅降低固定成本。

所以，其實 Coders Team 更適合軟體創新行業，在這個行業裡，最適合經營「產品公司」，在這家產品公司中，要建構「自產自銷」的模式與文化。兵家說「兵貴神速」，這種唯快不破的優勢，往往只存在於 Coders Team 等於創辦團隊的公司身上。

從天使投資人的角度，或許可以這樣看：

- 如果你找到的是 Sales & PM Team，不應該在 Early Stage 投入，而是讓他們設法找到外部資源與資金（畢竟這是他們的核心能力），在產品原型（Prototype）完成後，再參與 Series-A 的投資。
- 如果你找到的是 Coders Team，應輔導他們建立更全方面的技能（如：成本控管），因為在許多能力都能建立在創始團隊上時，就能大幅降低對外部資源的需求，固定成本就相當低。
- 如上。在這個時候，創業團隊本身吸收了大量固定成本可能產生的風險，再加上天使投資人的角度，應是站「共同創業」的角度之上，不仿在 Zero Stage（Early Stage）投入時，給予更佳的公司估值，做為鼓勵。

軟體人創業，在什麼時候才能專注在營運與盈利？理論上是公司內部的軟體開發框架成形後（系統化）。一但公司完成系統化的軟體開發框架，未來以小型研發團隊，在這個框架上擴充產品功能時，風險、成本與 Effort 都最小。創辦人此時就可以把焦點轉向營運與盈利上，並開始對投資人負責。

另外，進入營運與盈利後，因為焦點是在產品組合與收費模式方面，就不一定要強調「自製」的重要性，可以把重心放在「充實產品線」的考慮上。

## Internet Startup

軟體人創業做 Internet Startup，在建立獲利模式之前，應該先做完哪些事情？我覺得先把二件事情做對就夠了：(1) 控管成本；(2) 一個 reuseable 的內部軟體框架。

為了不讓自已在進入營運階段前，就燒光第一筆資金，必須學習如何控管成本。在草創初期，如果沒有專業的財務專家協助，或是沒有複雜的財務計畫，至少要把「固定成本」管理好。固定成本經常發生在以下二種情況：

第一、不必要的人事支出。很多新創公司，拿了投資人的錢，就盲目去擴充公司人數，結果就不用講了。

第二、重疊的成本支出。關於這一點比較複雜，所以我用一個簡單的例子來說明：創辦團隊能自已寫的代碼、就不要外包。別忘記了，這是 Coders Team 最大的優勢。

但不要誤解意思，這裡並不是鼓勵：什麼事都自已做，也不是不去擴充團隊規模進行分工。這單純是經營戰略的問題，是階段性的過程，是很細微的一個過程；Startup 本身就是一個細緻成長的過程。在營運階段前，軟體人就必須這麼做，以降低固定成本：去運用一個只有軟體人才有的優勢，Do It Yourself。

軟體人創業的優勢是：運用團隊本身的技術實力，以最低的固定成本打造出 Prototype，並把它 Value Up。這段時間可能只有幾個月的時間。在這之後，可以尋求天使投資人的幫助，注入資金；由於創業團隊本身，已經幫新公司避開了固定成本的風險（於後文說明），所以能用「價值估值」的方式，與天使投資人商議投資合約。別忘了，天使投資人是來幫助你做好事情、做對事情，比天使資金更重要的是：天使投資人的導師能否給予足夠的教練輔導。

當 Startup 開始進入到營運跟盈利階段，創辦團隊的階段任務，就算大功告成了；思考擴編公司規模，就是下一步。開始進入營運跟盈利階段的定義是：開始有持續的固定收入，例如：開始有 Monthly 的訂閱費（Subscription）收入。哪怕第一個月的訂閱費只有區區 100 塊美金，都是一個 Milestone 的成功達陣。

核心能力在創辦團隊的比率越高，固定成本越低；反之，固定成本就高。Sales & PM 組成的 Team 成本最高（因為他們什麼工作都要找外部資源）。所以，Coders team 要善用自已的優勢。

從這個角度來看，Lean Software Develpment (Kanban) 、Github、Open source、Open innovation 就很適合這種團隊。Sales & PM 組成的團隊，沒有這種優勢，Lean Software Develpment (Kanban) 、Github、Open source、Open innovation 對他們來說，永遠都變成固定成本。

創辦團隊擁有公司股份，收益建構在未來的公司營收，以及 Value-up 方面（如購併）；而不是薪資。用這個角度來看，經理人背景出身的人，也要學程式設計才行。

「大家都要學 Coding」，是為了讓自已、讓別人，都有機會跟上這波 Open Innovation 的世界潮流。傳統的企業經理人，本身沒有程式設計技能，他們的工作大部份都在執行溝通協調任務。

此外，了解技術面，大家的溝通協調會更快。傳統的經理人在現在這個時代，溝通協調能力不見得比 Coder 好，因為他們不會用「對的工具」，也不會用「對的語言」。所以，「大家都要學 Coding」，就是這個道理。

### 天使投資人與軟體人

綜合以上的分析，天使投資人去看待 Startup 團隊時，就要先關心 Planning & Execution 的表現能力。Planning & Execution 是人的問題，只要人對了，事情就對了。

別忘了，Internet Startup 可能是近代人類文明史上，創業門檻最低的模式。所謂的門檻，指的是資金門檻（Capital），所以，天使投資人與軟體人的相結合，會有無比的威力。天使投資人與軟體人的連線時代，到來了。

## 新創公司的成本控管

再談新創公司的成本（Cost）控管問題。許多 Startup 經常低估了營運成本，導致在初期（Early Stage）的創業過程中，很快就糟遇到資金的問題。無論 Startup 是否得到天使投資人的協助，成本控管是 CEO 重要的第一課。

Startup 如何評估成本？Joseph Anthony 在他的一篇文章裡，提出了[五個 Startup 評估成本的建言][2]。

- Have a solid plan—then change it.
- Be willing to pull back.
- Calculate prices, time correctly.
- Correctly estimate your startup time.
- Be realistic about the cost of money.

第一點是大多數年輕創業團隊經常有的成本，你常聽到人家說「創業要有一份 計畫書」，而且，你也必須有這份計畫書。這與「執行力」並不相違悖：我的意思是說，一些創業文章都提倡，「快速的決策與執行」，以及「逐步修正」的觀念。片面去解讀這些文章，可能導致一個誤解：不需要計畫、先做再說。不需要計畫，先做再說，這和打戰時，只會一味往前衝的「勇」字兵沒有二樣。

事實上，應該解釋為「膽大心細」，任何的新創事業，都要有一份架構完整的計畫書（Solid Plan），然後大膽去行動、做了再說：在執行的過程中，依據實際情況，不斷去改變、調整計畫書。撰寫計畫書的目的，是從「成本」的角度去看。Bently College 大學的管理學教授，同時也是該校創業學程的主任 Jeff Shuman 說：

> "The conventional wisdom is that an entrepreneur sees an opportunity, comes up with a business plan to capitalize on it, determines the capital that needs to be raised, raises the capital and then applies it to building the business described in the business plan."

中譯：

> 傳統智慧是，一個創業家看到一個機會，想出一個商業計劃來利用這個機會，決定要募集的資本額，然後募集資金，來建立在計畫書中所描述的計畫。

因此，擬定完整計畫書是成本問題，用意是確認需要的資金，在行動前，可以確保資金無虞；行動時，可以掌握資金的有效運用，降低不必要的浪費。

第二點談的是要願意去「Pull Back」。這是一個盲點，經常發生在剛創業者的身上：擬好商業計畫後，就大張旗鼓地去行動，並且擴展規模；這樣的行動模式，有時是缺乏成本觀念，有時是得意忘形所致。所謂的 Pull Back 是這個意思：Pull Back，就是回頭，尋求一個「Smaller Model」來啟步，從成本控管的角度來看，這才能維持好資金的運用。這一點，和精實創業（Lean Startup）所提倡的觀念相同：由一個小的規模開始，確認這個小計畫是對的後，再逐步放大。

第三點的意思是不要任意去壓低產品價格。美國大學 Kogod 商學院，[Barbara Bird][3] 教授說：

> "Small-business owners may under-price their product or service, thinking they have to come in at as low a price point as possible to compete," 

中譯：

> 小企業業主，可能過低定價他們的產品或服務，他們想說，必須以低的價格來進入，才能夠來競爭

關於這點，根據我幾年經營服務業的經驗來看，確實沒有錯。產品或服務本身，能帶給客戶更多價值時，反倒能考慮提高價格。

公司的價值是建構在商業化以及商業模式之上，所以，價格請反應公司產品的價值：如果你能成功把產品銷售出去，客戶也滿足你的產品，公司就能站穩在你所定義的價值水平之上。只有你自已最清楚公司產品的價值，而不是客戶幫你決定；這是「別低估產品價格」的意義。只要不犯了「暪天喊價」的大錯誤即可。

第四點開宗明義說「時間就是金錢」，並且從最基本的公司營運「辦公室」來說明這個觀念。新創公司應當設法減少辦公室的租金成本，因為這是「每個月」的固定費用。如果辦公室的固定費用，當然也包含水電等日常固定支出，在 Startup 階段過高，而且，對於 Startup 的時間評估失準，公司的固定成本就會因為這個時間而增加，這產生了資金的風險。

所謂的 Startup 時間，指的是產品開發，到能開啟營運的這段時間。在進入營運階段前，要設法正確評估 Startup 的時間，並減少固定成本的支出。

第五點是很實際且現實的問題。許多業主，都是「self-finance」的方式取得資金。例如：使用個人信用卡舉債取得現金，或是向親朋友好集資。但從成本的角度來看，對較大投資額的 Startup 來說，這並不是一個實際的做法。

卡內基美隆大學的 [Emerson][4] 說：

> "startups should figure in the cost of capital when determining initial expenses and cash flow."

中譯：

> Startup 公司應該弄清楚資金的成本，當確定初始費用與現金流時。

Emerson 又說：

> "The cost is usually based on what the interest would be that similar cash invested in something with similar risk would command on the market," Emerson says. "It's usually a figure that is a few percentage points or more above the prime rate."

中譯：

> 成本通常是基於利率的情況，類似現金被用來投資在一些地方，都具有類似市面決定的信用風險

從成本的角度來看，個人舉債或借款而得的資金，會產生額外的成本。聰明的創業者，應當與天使投資人合作，讓資本就是資本，而不是成本。能得到天使投資人支援的創業者，也應當珍惜這個寶貴的機會。


[2]: http://www.microsoft.com/business/en-us/resources/startups/startup-financing/5-tips-for-estimating-your-startup-costs.aspx?fbid=AmIinDbPTFy# "Estimate Startup Costs - 5 Tips"
[3]: http://www.american.edu/kogod/faculty/bbird.cfm "Barbara Bird"
[4]: http://public.tepper.cmu.edu/facultydirectory/FacultyDirectoryProfile.aspx?id=53 "S. Thomas Emerson"

### 固定成本

公司營運的固定成本：

- 辦公室租金
- 薪水
- 法律福利開支
- 員工福利開支
- 旅行和運輸費用
- 娛樂費、會議費
- 行政開支 (郵資、茶點等)
- 耗材費用
- 廣告費
- 招聘成本
- 支付佣金
- 維護修理費用
- 水電等場地成本
- 網站與伺服器維護費用
- 辦公器具與裝潢支出

對新創公司來說，又以下列項目造成的成本壓力最大：


## 保持創業的熱情

當你像隻鳥飛在天空上，往遠方的目標飛去時，你不會在乎地上的圍籬。如果只是走在地面上，就會看到前面障礙重重的圍籬，反而記記了遠方的目標。對於創業，必須先設定一個大目標，再務實地朝向這個目標前進。因此，設定一個長遠的目標，並且從簡單的出發點開始；在執行的過程中，必須注重細節（例如：成本）。老子說：「圖難於其易，為大於其細。天下難事必作於易，天下大事必作於細。」譯文：

> 任何困難的事，一開始都是容易的；進行任何鉅大的工作，都是從細微的地方開始。天底下的困難事情，都是從容易的地方開始；天下的任何大事，必是從細微的地方做起。

設定遠大的目標，是為了建立自已的格局，讓自已像空中的飛鳥。注重細節與規劃，是讓自已更務實，讓自已由細節開始，去累積出成功。

老子的思想，與「Startup」有非常的相同之處。根據 Standford 的 [Startup Engineering][5] 課程對 Startup 的定義：Startup 就像下西洋橫，是一系列的成長過程。意思是：棋藝是一個充滿策略與步驟的過程，要很有層次與步驟，才能達到最後的目的「將軍」。創辦一家 Startup 公司，不也是如此嗎。

[5]: https://class.coursera.org/startup-001/class "Startup Engineering"

創業風潮正盛行，網路上也有許多創業教學的文章，或是創業教學的出版。其中，以精實創業（Lean Startup）最受到歡迎。精實創業模式，提倡的也是類以的創業思想。因此，創業者，特別是軟體創業者，除了有技術外，還要有一套屬於自已的思想。

> 眼界決定境界，定位決定地位。思路決定出路，思想決定一切。

由此可知，在技術以外，世界還很大，創業者的思想，決定了格局與品味。格局、品味，都會反應在新創公司的產品上面。

## 先做產品、再做平臺

軟體公司的產品就是軟體，廣義的軟體是軟性的智財，而不是只有程式碼。所以，軟體公司就該做產品，當然這個產品很可能是以軟體的形式呈現。軟體公司去做平臺的風險：

## 機會成本

先做產品，再做平臺，是一種機會成本的概念。

機會成本的概念是很簡單的：先做重要與產品面的事。例如，設計伺服器，或是建構 Infrastructure 本身並不是很重要，也無關產品開發。新創公司利用 Amazon 的 AWS 服務，可以節省許多這方面的時間，把時間投注在產品開發上。當機會來的時候，產品正好可以銜接到這個機會。

反之，把時間花費在建構 Infrastructure 時，失去先機的可能性提高；這是機會成本的概念。所以，機會成本，也是新創公司要消除的一項成本；如何消除機會成本？需要建立一些重要的觀念：

- 善用外資源，例如 AWS，將團隊精力放在產品開發上
- 結果管理：先做產品開發，以及重要的事情

## 

- 2013 年 4 月：有 14 年歷史的 MSN 吹熄燈號
- 2013 年 12 月 26 日：無名小站與雅虎部落格關閉

無名小站曾經創下單月瀏覽人次破百億的紀錄，不過因為這幾年臉書和手機通訊軟體的推陳出新，無名人氣逐年下滑，然而無名的關閉，也象徵著部落格時代，即將成為追憶。

無名小站成立於 1999 年，2007 年被雅虎以七億台幣併購，

2010 年開始，手機通訊軟體改變了傳統網站的通訊方式，# 失落的台灣軟體產業

1. 技術、觀念與概念
2. 別的不談，就看網站風格
3. 技術可以追，沒有觀念就是債留子孫
4. 